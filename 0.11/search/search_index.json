{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Index.py \u8fd9\u662f\u4e00\u4e2a\u57fa\u4e8e ASGI \u534f\u8bae\u7684\u5f02\u6b65 web \u6846\u67b6\uff0c\u611f\u8c22 PHP \u5e26\u6765\u7684\u7075\u611f\u3002\u8bbe\u8ba1\u76ee\u7684\u5728\u4e8e\u5feb\u901f\u7684\u6784\u5efa\u9700\u8981\u7684 web \u670d\u52a1\uff0c\u65e0\u8bba\u662f Templates \u8fd8\u662f API\u3002 Index.py \u6709\u5982\u4e0b\u7279\u6027\uff1a \u65e0\u9700\u624b\u52a8\u7ed1\u5b9a\u8def\u7531 (\u6587\u4ef6\u7cfb\u7edf\u6620\u5c04 URI) \u81ea\u52a8\u89e3\u6790\u8bf7\u6c42 & \u751f\u6210\u6587\u6863 (\u57fa\u4e8e pydantic) \u53ef\u89c6\u5316 API \u63a5\u53e3 (\u57fa\u4e8e ReDoc, \u9488\u5bf9\u4e2d\u6587\u5b57\u4f53\u4f18\u5316) \u73b0\u4ee3\u5316\u7684\u6d4b\u8bd5\u7ec4\u4ef6 (\u57fa\u4e8e pytest \u4e0e requests) \u975e\u5e38\u7b80\u5355\u7684\u90e8\u7f72 (\u57fa\u4e8e uvicorn \u4e0e gunicorn) \u652f\u6301\u771f\u6b63\u7684\u70ed\u91cd\u8f7d (\u9ed8\u8ba4\u5173\u95ed) \u6302\u8f7d ASGI/WSGI \u5e94\u7528 (\u57fa\u4e8e a2wsgi ) \u66f4\u597d\u7528\u7684 background tasks (\u57fa\u4e8e starlette) \u53ef\u4f7f\u7528\u4efb\u4f55\u53ef\u7528\u7684 ASGI \u751f\u6001 \u5355\u7eaf\u770b\u6027\u80fd\uff0cIndex.py \u4e0d\u900a\u8272\u4e8e Starlette/FastAPI\uff0c\u4ece\u7406\u8bba\u4e0a Index.py \u66f4\u5feb\u4e00\u70b9\uff0c\u8fd9\u662f\u7531\u4e8e\u524d\u8005\u7684\u8def\u7531\u7cfb\u7edf\u9700\u8981\u641c\u7d22\u5230\u6700\u5408\u9002\u7684\u8def\u7531\u8fdb\u884c\u5904\u7406\uff0c\u800c Index.py \u57fa\u4e8e\u6587\u4ef6\u7cfb\u7edf\u76f4\u63a5\u6620\u5c04\u3002\u7f51\u7ad9\u8d8a\u5927\uff0c\u8def\u7531\u8d8a\u591a\uff0cIndex.py \u4f18\u52bf\u8d8a\u660e\u663e\u3002 Index.py \u5c06\u59cb\u7ec8\u575a\u6301\u6587\u4ef6\u6620\u5c04\u8def\u7531\u2014\u2014\u5982\u679c\u4f60\u559c\u6b22\u57fa\u4e8e\u88c5\u9970\u5668\u7684\u8def\u7531\u6ce8\u518c\uff08\u4f8b\u5982 flask\uff09\uff0c\u90a3\u4e48\u8bf7\u4f7f\u7528 FastAPI \uff0c\u5b83\u4e0e Index.py \u90fd\u5b9e\u73b0\u4e86 OpenAPI \u6587\u6863\u751f\u6210\u529f\u80fd\u3001\u540e\u53f0\u4efb\u52a1\u7b49\u529f\u80fd\uff1b\u5982\u679c\u4f60\u559c\u6b22 Django \u5f0f\u7684\u8def\u7531\u6ce8\u518c\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Starlette \uff0cFastAPI \u4e0e Index.py \u90fd\u662f\u57fa\u4e8e Starlette \u7684\u4e8c\u6b21\u5f00\u53d1\u6846\u67b6\u3002 \u5982\u679c\u4f60\u5bf9\u672c\u6846\u67b6\u540e\u7eed\u53d1\u5c55\u6709\u4efb\u4f55\u7684\u60f3\u6cd5\uff0c\u6b22\u8fce\u8bbf\u95ee Github \u63d0 issue\u3002","title":"\u4ecb\u7ecd"},{"location":"#indexpy","text":"\u8fd9\u662f\u4e00\u4e2a\u57fa\u4e8e ASGI \u534f\u8bae\u7684\u5f02\u6b65 web \u6846\u67b6\uff0c\u611f\u8c22 PHP \u5e26\u6765\u7684\u7075\u611f\u3002\u8bbe\u8ba1\u76ee\u7684\u5728\u4e8e\u5feb\u901f\u7684\u6784\u5efa\u9700\u8981\u7684 web \u670d\u52a1\uff0c\u65e0\u8bba\u662f Templates \u8fd8\u662f API\u3002 Index.py \u6709\u5982\u4e0b\u7279\u6027\uff1a \u65e0\u9700\u624b\u52a8\u7ed1\u5b9a\u8def\u7531 (\u6587\u4ef6\u7cfb\u7edf\u6620\u5c04 URI) \u81ea\u52a8\u89e3\u6790\u8bf7\u6c42 & \u751f\u6210\u6587\u6863 (\u57fa\u4e8e pydantic) \u53ef\u89c6\u5316 API \u63a5\u53e3 (\u57fa\u4e8e ReDoc, \u9488\u5bf9\u4e2d\u6587\u5b57\u4f53\u4f18\u5316) \u73b0\u4ee3\u5316\u7684\u6d4b\u8bd5\u7ec4\u4ef6 (\u57fa\u4e8e pytest \u4e0e requests) \u975e\u5e38\u7b80\u5355\u7684\u90e8\u7f72 (\u57fa\u4e8e uvicorn \u4e0e gunicorn) \u652f\u6301\u771f\u6b63\u7684\u70ed\u91cd\u8f7d (\u9ed8\u8ba4\u5173\u95ed) \u6302\u8f7d ASGI/WSGI \u5e94\u7528 (\u57fa\u4e8e a2wsgi ) \u66f4\u597d\u7528\u7684 background tasks (\u57fa\u4e8e starlette) \u53ef\u4f7f\u7528\u4efb\u4f55\u53ef\u7528\u7684 ASGI \u751f\u6001 \u5355\u7eaf\u770b\u6027\u80fd\uff0cIndex.py \u4e0d\u900a\u8272\u4e8e Starlette/FastAPI\uff0c\u4ece\u7406\u8bba\u4e0a Index.py \u66f4\u5feb\u4e00\u70b9\uff0c\u8fd9\u662f\u7531\u4e8e\u524d\u8005\u7684\u8def\u7531\u7cfb\u7edf\u9700\u8981\u641c\u7d22\u5230\u6700\u5408\u9002\u7684\u8def\u7531\u8fdb\u884c\u5904\u7406\uff0c\u800c Index.py \u57fa\u4e8e\u6587\u4ef6\u7cfb\u7edf\u76f4\u63a5\u6620\u5c04\u3002\u7f51\u7ad9\u8d8a\u5927\uff0c\u8def\u7531\u8d8a\u591a\uff0cIndex.py \u4f18\u52bf\u8d8a\u660e\u663e\u3002 Index.py \u5c06\u59cb\u7ec8\u575a\u6301\u6587\u4ef6\u6620\u5c04\u8def\u7531\u2014\u2014\u5982\u679c\u4f60\u559c\u6b22\u57fa\u4e8e\u88c5\u9970\u5668\u7684\u8def\u7531\u6ce8\u518c\uff08\u4f8b\u5982 flask\uff09\uff0c\u90a3\u4e48\u8bf7\u4f7f\u7528 FastAPI \uff0c\u5b83\u4e0e Index.py \u90fd\u5b9e\u73b0\u4e86 OpenAPI \u6587\u6863\u751f\u6210\u529f\u80fd\u3001\u540e\u53f0\u4efb\u52a1\u7b49\u529f\u80fd\uff1b\u5982\u679c\u4f60\u559c\u6b22 Django \u5f0f\u7684\u8def\u7531\u6ce8\u518c\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Starlette \uff0cFastAPI \u4e0e Index.py \u90fd\u662f\u57fa\u4e8e Starlette \u7684\u4e8c\u6b21\u5f00\u53d1\u6846\u67b6\u3002 \u5982\u679c\u4f60\u5bf9\u672c\u6846\u67b6\u540e\u7eed\u53d1\u5c55\u6709\u4efb\u4f55\u7684\u60f3\u6cd5\uff0c\u6b22\u8fce\u8bbf\u95ee Github \u63d0 issue\u3002","title":"Index.py"},{"location":"command/","text":"\u5185\u7f6e\u547d\u4ee4 Index \u5185\u7f6e\u4e86\u4e00\u4e9b\u547d\u4ee4\u65b9\u4fbf\u4f7f\u7528\u3002 Notice \u5b83\u4eec\u90fd\u5fc5\u987b\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u6267\u884c index-cli index-cli \u662f index \u5185\u7f6e\u7684\u6839\u547d\u4ee4\uff0c\u6240\u6709\u5176\u4f59\u547d\u4ee4\u5747\u4e3a index-cli \u7684\u5b50\u547d\u4ee4\u3002 index-cli serve \u4f7f\u7528 uvicorn \u542f\u52a8 Index\uff0c\u5982\u679c\u4f7f\u7528\u4e86 Lifespan/Mount \u7b49\u9700\u8981\u81ea\u884c\u521b\u5efa application \u7684\u529f\u80fd\uff0c\u5e94\u5f53\u663e\u5f0f\u7684\u6307\u5b9a application\uff0c\u4f8b\u5982 index-cli serve main:app \u3002 index-cli gunicorn index-cli gunicorn start \u901a\u8fc7 gunicorn \u542f\u52a8\u670d\u52a1\u3001\u7ba1\u7406\u8fdb\u7a0b\u3002\u53ef\u4ee5\u7c97\u6d45\u7684\u7406\u89e3\u4e3a\u80fd\u542f\u52a8\u591a\u4e2a\u8fdb\u7a0b\u7684 serve \u547d\u4ee4\uff0c\u53ea\u4e0d\u8fc7\u7531 gunicorn \u76d1\u89c6\u5e76\u7ba1\u7406\u5404\u4e2a worker \u8fdb\u7a0b\u7684\u8fd0\u884c\u3002\u540c\u6837\u7684\uff0c\u5982\u679c\u4f7f\u7528\u4e86 Lifespan/Mount \u7b49\u9700\u8981\u81ea\u884c\u521b\u5efa application \u7684\u529f\u80fd\uff0c\u5e94\u5f53\u663e\u5f0f\u7684\u6307\u5b9a application\uff0c\u4f8b\u5982 index-cli gunicorn start main:app \u3002 \u276f index - cli gunicorn -- help Usage : index - cli gunicorn [ OPTIONS ] [ start|stop|reload ] [ APPLICATION ] deploy by gunicorn Options : - w , -- workers INTEGER - d , -- daemon - c , -- configuration FILE --help Show this message and exit. \u4f60\u53ef\u4ee5\u901a\u8fc7 --workers \u9009\u9879\u6307\u5b9a\u542f\u52a8\u7684\u8fdb\u7a0b\u6570\u91cf\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u5b83\u9ed8\u8ba4\u662f CPU \u6838\u5fc3\u6570\u3002 \u5982\u679c\u5f00\u542f\u4e86 --daemon \u9009\u9879\uff0cIndex \u5c06\u5728\u540e\u53f0\u8fd0\u884c\uff0c\u4e3b\u8fdb\u7a0b\u53f7\u4f1a\u88ab\u5199\u5165\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684 .pid \u4e2d\uff0c\u8fd0\u884c\u65e5\u5fd7\u5219\u5199\u5165\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684 log.index \u91cc\u3002 \u5047\u5982\u4f60\u9700\u8981\u7f16\u5199\u66f4\u591a\u7684 gunicorn \u914d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u7528 -c \u6765\u6307\u5b9a\u4e00\u4e2a .py \u4f5c\u4e3a\u914d\u7f6e\u6587\u4ef6\u3002\u8be6\u89c1 gunicorn \u6587\u6863 index-cli gunicorn stop \u5f53\u4f60\u4f7f\u7528 index-cli gunicorn start -d \u5728\u540e\u53f0\u542f\u52a8\u4e86 Index \u65f6\uff0c\u53ef\u4ee5\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u6267\u884c\u6b64\u547d\u4ee4\u53bb\u505c\u6b62 Index\u3002 index-cli gunicorn reload \u5f53\u4f60\u4f7f\u7528 index-cli gunicorn start -d \u5728\u540e\u53f0\u542f\u52a8\u4e86 Index \u65f6\uff0c\u53ef\u4ee5\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u6267\u884c\u6b64\u547d\u4ee4\u53bb\u91cd\u542f Index\u3002 index-cli test \u276f index - cli test -- help Usage : index - cli test [ OPTIONS ] [ PATH ] run test Options : - app , -- application TEXT ASGI Application , like : main : app -- args TEXT --help Show this message and exit. \u8fd9\u4e2a\u547d\u4ee4\u7528\u4e8e\u8fd0\u884c\u6d4b\u8bd5\uff0c\u5f53\u76f4\u63a5\u4f7f\u7528 index-cli test \u65f6\uff0c\u5b83\u5c06\u8fd0\u884c\u6240\u6709\u6d4b\u8bd5\uff08\u7531 pytest \u63d0\u4f9b\u652f\u6301\uff09\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7 --args \u53c2\u6570\u4f20\u9012\u53c2\u6570\u7ed9 pytest\uff0c\u4f8b\u5982\uff1a index-cli test --args \"['-q',]\" \u3002 \u5982\u679c\u4f7f\u7528\u4e86 Lifespan/Mount \u7b49\u9700\u8981\u81ea\u884c\u521b\u5efa application \u7684\u529f\u80fd\uff0c\u5e94\u5f53\u663e\u5f0f\u7684\u6307\u5b9a application\uff0c\u4f8b\u5982\uff1a index-cli test -app example:app \u3002 \u6709\u4e9b\u65f6\u5019\uff0c\u4e5f\u8bb8\u4f60\u5e76\u4e0d\u60f3\u6267\u884c\u6240\u6709\u6d4b\u8bd5\uff0c\u901a\u8fc7 index-cli test \u7684 PATH \u53c2\u6570\uff0c\u4f60\u53ef\u4ee5\u8f7b\u677e\u6307\u5b9a\u9700\u8981\u6267\u884c\u7684\u6d4b\u8bd5\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e9b\u4f8b\u5b50\uff1a index-cli test / : \u6267\u884c URL \u4e3a / \u7684\u6d4b\u8bd5 index-cli test views/index.py : \u6267\u884c views/index.py \u6587\u4ef6\u4e2d\u7684\u6d4b\u8bd5( \u4e0e\u4e0a\u4e00\u6761\u547d\u4ee4\u7b49\u4ef7 ) index-cli test /::Test::test_get_0 : \u6307\u5b9a\u4e00\u4e2a\u6d4b\u8bd5\u51fd\u6570 index-cli test views/index.py::Test::test_get_0 : \u6307\u5b9a\u4e00\u4e2a\u6d4b\u8bd5\u51fd\u6570( \u4e0e\u4e0a\u4e00\u6761\u547d\u4ee4\u7b49\u4ef7 ) \u81ea\u5b9a\u4e49\u547d\u4ee4 Index \u4f7f\u7528\u4e86 click \u6765\u63d0\u4f9b\u547d\u4ee4\u652f\u6301\u3002 \u6240\u4ee5\u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\u547d\u4ee4\uff0c\u4f60\u53ea\u9700\u8981\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u65b0\u5efa\u4e00\u4e2a commands.py \u6587\u4ef6\uff0c\u5728\u5176\u4e2d\u6309\u7167 click \u7684\u89c4\u5219\u7f16\u5199\u81ea\u5df1\u7684\u547d\u4ee4\u3002 \u4f8b\u5b50 \u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684 commands.py \u91cc\u5199\u5165\u4ee5\u4e0b\u5185\u5bb9 from indexpy.cli import main @main . command ( help = 'Custom command' ) def only_print (): print ( 'Custom command' ) \u7136\u540e\u4f7f\u7528 index-cli --help \u80fd\u770b\u5230\u547d\u4ee4\u5df2\u7ecf\u88ab\u52a0\u5165\u4e86 \u276f index - cli -- help Usage : index - cli [ OPTIONS ] COMMAND [ ARGS ] ... Options : -- help Show this message and exit . Commands : gunicorn deploy by gunicorn only - print Custom command serve use only uvicorn","title":"Command"},{"location":"command/#_1","text":"Index \u5185\u7f6e\u4e86\u4e00\u4e9b\u547d\u4ee4\u65b9\u4fbf\u4f7f\u7528\u3002 Notice \u5b83\u4eec\u90fd\u5fc5\u987b\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u6267\u884c","title":"\u5185\u7f6e\u547d\u4ee4"},{"location":"command/#index-cli","text":"index-cli \u662f index \u5185\u7f6e\u7684\u6839\u547d\u4ee4\uff0c\u6240\u6709\u5176\u4f59\u547d\u4ee4\u5747\u4e3a index-cli \u7684\u5b50\u547d\u4ee4\u3002","title":"index-cli"},{"location":"command/#index-cli-serve","text":"\u4f7f\u7528 uvicorn \u542f\u52a8 Index\uff0c\u5982\u679c\u4f7f\u7528\u4e86 Lifespan/Mount \u7b49\u9700\u8981\u81ea\u884c\u521b\u5efa application \u7684\u529f\u80fd\uff0c\u5e94\u5f53\u663e\u5f0f\u7684\u6307\u5b9a application\uff0c\u4f8b\u5982 index-cli serve main:app \u3002","title":"index-cli serve"},{"location":"command/#index-cli-gunicorn","text":"","title":"index-cli gunicorn"},{"location":"command/#index-cli-gunicorn-start","text":"\u901a\u8fc7 gunicorn \u542f\u52a8\u670d\u52a1\u3001\u7ba1\u7406\u8fdb\u7a0b\u3002\u53ef\u4ee5\u7c97\u6d45\u7684\u7406\u89e3\u4e3a\u80fd\u542f\u52a8\u591a\u4e2a\u8fdb\u7a0b\u7684 serve \u547d\u4ee4\uff0c\u53ea\u4e0d\u8fc7\u7531 gunicorn \u76d1\u89c6\u5e76\u7ba1\u7406\u5404\u4e2a worker \u8fdb\u7a0b\u7684\u8fd0\u884c\u3002\u540c\u6837\u7684\uff0c\u5982\u679c\u4f7f\u7528\u4e86 Lifespan/Mount \u7b49\u9700\u8981\u81ea\u884c\u521b\u5efa application \u7684\u529f\u80fd\uff0c\u5e94\u5f53\u663e\u5f0f\u7684\u6307\u5b9a application\uff0c\u4f8b\u5982 index-cli gunicorn start main:app \u3002 \u276f index - cli gunicorn -- help Usage : index - cli gunicorn [ OPTIONS ] [ start|stop|reload ] [ APPLICATION ] deploy by gunicorn Options : - w , -- workers INTEGER - d , -- daemon - c , -- configuration FILE --help Show this message and exit. \u4f60\u53ef\u4ee5\u901a\u8fc7 --workers \u9009\u9879\u6307\u5b9a\u542f\u52a8\u7684\u8fdb\u7a0b\u6570\u91cf\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u5b83\u9ed8\u8ba4\u662f CPU \u6838\u5fc3\u6570\u3002 \u5982\u679c\u5f00\u542f\u4e86 --daemon \u9009\u9879\uff0cIndex \u5c06\u5728\u540e\u53f0\u8fd0\u884c\uff0c\u4e3b\u8fdb\u7a0b\u53f7\u4f1a\u88ab\u5199\u5165\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684 .pid \u4e2d\uff0c\u8fd0\u884c\u65e5\u5fd7\u5219\u5199\u5165\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684 log.index \u91cc\u3002 \u5047\u5982\u4f60\u9700\u8981\u7f16\u5199\u66f4\u591a\u7684 gunicorn \u914d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u7528 -c \u6765\u6307\u5b9a\u4e00\u4e2a .py \u4f5c\u4e3a\u914d\u7f6e\u6587\u4ef6\u3002\u8be6\u89c1 gunicorn \u6587\u6863","title":"index-cli gunicorn start"},{"location":"command/#index-cli-gunicorn-stop","text":"\u5f53\u4f60\u4f7f\u7528 index-cli gunicorn start -d \u5728\u540e\u53f0\u542f\u52a8\u4e86 Index \u65f6\uff0c\u53ef\u4ee5\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u6267\u884c\u6b64\u547d\u4ee4\u53bb\u505c\u6b62 Index\u3002","title":"index-cli gunicorn stop"},{"location":"command/#index-cli-gunicorn-reload","text":"\u5f53\u4f60\u4f7f\u7528 index-cli gunicorn start -d \u5728\u540e\u53f0\u542f\u52a8\u4e86 Index \u65f6\uff0c\u53ef\u4ee5\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u6267\u884c\u6b64\u547d\u4ee4\u53bb\u91cd\u542f Index\u3002","title":"index-cli gunicorn reload"},{"location":"command/#index-cli-test","text":"\u276f index - cli test -- help Usage : index - cli test [ OPTIONS ] [ PATH ] run test Options : - app , -- application TEXT ASGI Application , like : main : app -- args TEXT --help Show this message and exit. \u8fd9\u4e2a\u547d\u4ee4\u7528\u4e8e\u8fd0\u884c\u6d4b\u8bd5\uff0c\u5f53\u76f4\u63a5\u4f7f\u7528 index-cli test \u65f6\uff0c\u5b83\u5c06\u8fd0\u884c\u6240\u6709\u6d4b\u8bd5\uff08\u7531 pytest \u63d0\u4f9b\u652f\u6301\uff09\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7 --args \u53c2\u6570\u4f20\u9012\u53c2\u6570\u7ed9 pytest\uff0c\u4f8b\u5982\uff1a index-cli test --args \"['-q',]\" \u3002 \u5982\u679c\u4f7f\u7528\u4e86 Lifespan/Mount \u7b49\u9700\u8981\u81ea\u884c\u521b\u5efa application \u7684\u529f\u80fd\uff0c\u5e94\u5f53\u663e\u5f0f\u7684\u6307\u5b9a application\uff0c\u4f8b\u5982\uff1a index-cli test -app example:app \u3002 \u6709\u4e9b\u65f6\u5019\uff0c\u4e5f\u8bb8\u4f60\u5e76\u4e0d\u60f3\u6267\u884c\u6240\u6709\u6d4b\u8bd5\uff0c\u901a\u8fc7 index-cli test \u7684 PATH \u53c2\u6570\uff0c\u4f60\u53ef\u4ee5\u8f7b\u677e\u6307\u5b9a\u9700\u8981\u6267\u884c\u7684\u6d4b\u8bd5\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e9b\u4f8b\u5b50\uff1a index-cli test / : \u6267\u884c URL \u4e3a / \u7684\u6d4b\u8bd5 index-cli test views/index.py : \u6267\u884c views/index.py \u6587\u4ef6\u4e2d\u7684\u6d4b\u8bd5( \u4e0e\u4e0a\u4e00\u6761\u547d\u4ee4\u7b49\u4ef7 ) index-cli test /::Test::test_get_0 : \u6307\u5b9a\u4e00\u4e2a\u6d4b\u8bd5\u51fd\u6570 index-cli test views/index.py::Test::test_get_0 : \u6307\u5b9a\u4e00\u4e2a\u6d4b\u8bd5\u51fd\u6570( \u4e0e\u4e0a\u4e00\u6761\u547d\u4ee4\u7b49\u4ef7 )","title":"index-cli test"},{"location":"command/#_2","text":"Index \u4f7f\u7528\u4e86 click \u6765\u63d0\u4f9b\u547d\u4ee4\u652f\u6301\u3002 \u6240\u4ee5\u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\u547d\u4ee4\uff0c\u4f60\u53ea\u9700\u8981\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u65b0\u5efa\u4e00\u4e2a commands.py \u6587\u4ef6\uff0c\u5728\u5176\u4e2d\u6309\u7167 click \u7684\u89c4\u5219\u7f16\u5199\u81ea\u5df1\u7684\u547d\u4ee4\u3002","title":"\u81ea\u5b9a\u4e49\u547d\u4ee4"},{"location":"command/#_3","text":"\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684 commands.py \u91cc\u5199\u5165\u4ee5\u4e0b\u5185\u5bb9 from indexpy.cli import main @main . command ( help = 'Custom command' ) def only_print (): print ( 'Custom command' ) \u7136\u540e\u4f7f\u7528 index-cli --help \u80fd\u770b\u5230\u547d\u4ee4\u5df2\u7ecf\u88ab\u52a0\u5165\u4e86 \u276f index - cli -- help Usage : index - cli [ OPTIONS ] COMMAND [ ARGS ] ... Options : -- help Show this message and exit . Commands : gunicorn deploy by gunicorn only - print Custom command serve use only uvicorn","title":"\u4f8b\u5b50"},{"location":"event/","text":"Index \u5141\u8bb8\u6ce8\u518c\u82e5\u5e72\u4e2a\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\uff0c\u4ee5\u5904\u7406\u5728\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u4e4b\u524d\u6216\u5173\u95ed\u65f6\u9700\u8981\u8fd0\u884c\u7684\u4ee3\u7801\u3002 on_startup : Index \u542f\u52a8\u4e4b\u524d\u8fd0\u884c\u7684\u51fd\u6570 on_shutdown : Index \u5173\u95ed\u4e4b\u524d\u8fd0\u884c\u7684\u51fd\u6570 \u6ce8\u518c\u4e8b\u4ef6 \u4f60\u53ef\u4ee5\u7528\u88c5\u9970\u5668\u8bed\u6cd5\u6ce8\u518c\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\uff1a import logging from indexpy import Index app = Index () logger = logging . getLogger ( \"example\" ) @app . on_startup def logger_on_startup (): logger . info ( \"Called on startup\" ) @app . on_shutdown def logger_on_shutdown (): logger . info ( \"Called on shutdown\" )","title":"Lifespan"},{"location":"event/#_1","text":"\u4f60\u53ef\u4ee5\u7528\u88c5\u9970\u5668\u8bed\u6cd5\u6ce8\u518c\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\uff1a import logging from indexpy import Index app = Index () logger = logging . getLogger ( \"example\" ) @app . on_startup def logger_on_startup (): logger . info ( \"Called on startup\" ) @app . on_shutdown def logger_on_shutdown (): logger . info ( \"Called on shutdown\" )","title":"\u6ce8\u518c\u4e8b\u4ef6"},{"location":"http/","text":"\u8def\u7531 \u5728 views \u91cc\u521b\u5efa\u4efb\u610f\u5408\u6cd5\u540d\u79f0\u7684 .py \u6587\u4ef6\uff0c\u5e76\u5728\u5176\u4e2d\u521b\u5efa\u540d\u4e3a HTTP \u7684\u7c7b\uff0c\u5373\u53ef\u4f7f\u6b64\u6587\u4ef6\u80fd\u591f\u5904\u7406\u5bf9\u5e94\u5176\u76f8\u5bf9\u4e8e views \u7684\u8def\u5f84\u7684 HTTP \u8bf7\u6c42\u3002 \u4f46\u8f83\u4e3a\u7279\u6b8a\u7684\u662f\u540d\u4e3a index.py \u7684\u6587\u4ef6\uff0c\u5b83\u80fd\u591f\u5904\u7406\u4ee5 / \u4f5c\u4e3a\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684 URI\u3002 Tip \u7531\u4e8e Python \u89c4\u5b9a\uff0c\u6a21\u5757\u540d\u79f0\u5fc5\u987b\u7531\u5b57\u6bcd\u3001\u6570\u5b57\u4e0e\u4e0b\u5212\u7ebf\u7ec4\u6210\uff0c\u4f46\u8fd9\u79cd URI \u4e0d\u53cb\u597d\uff0c\u6240\u4ee5 Index \u4f1a\u5c06 URI \u4e2d\u7684 _ \u5168\u90e8\u66ff\u6362\u6210 - \u5e76\u505a 301 \u8df3\u8f6c\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e ALLOW_UNDERLINE \u4e3a\u771f\u53bb\u5173\u95ed\u6b64\u529f\u80fd\u3002 \u4e00\u4e9b\u4f8b\u5b50 \u6587\u4ef6\u76f8\u5bf9\u8def\u5f84 \u6587\u4ef6\u80fd\u5904\u7406\u7684URI views/index.py / views/about.py /about views/api/create_article.py /api/create-article views/article/index.py /article/ HTTP \u7684\u7c7b\u5e94\u4ece indexpy.http.HTTPView \u7ee7\u627f\u800c\u6765\uff0c\u4f60\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b\u65b9\u6cd5\u53bb\u5904\u7406\u5bf9\u5e94\u7684 HTTP \u8bf7\u6c42\u3002 get post put patch delete head options trace \u8fd9\u4e9b\u51fd\u6570\u9ed8\u8ba4\u4e0d\u63a5\u53d7\u4efb\u4f55\u53c2\u6570\uff0c\u4f46\u4f60\u53ef\u4ee5\u4f7f\u7528 self.request \u53bb\u83b7\u53d6\u6b64\u6b21\u8bf7\u6c42\u7684\u4e00\u4e9b\u4fe1\u606f\u3002 Notice \u8fd9\u4e9b\u88ab\u7528\u4e8e\u5b9e\u9645\u5904\u7406 HTTP \u8bf7\u6c42\u7684\u51fd\u6570\uff0c\u65e0\u8bba\u4f60\u4ee5\u4f55\u79cd\u65b9\u5f0f\u5b9a\u4e49\uff0c\u90fd\u4f1a\u5728\u52a0\u8f7d\u65f6\u88ab\u6539\u9020\u6210\u5f02\u6b65\u51fd\u6570\uff0c\u4f46\u4e3a\u4e86\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u635f\u8017\uff0c\u5c3d\u91cf\u4f7f\u7528 async def \u53bb\u5b9a\u4e49\u5b83\u4eec\u2014\u2014\u9664\u975e\u5728\u5176\u4e2d\u4f7f\u7528\u4e86\u542b\u6709\u963b\u585e IO \u7684\u5176\u4ed6\u51fd\u6570\uff0c\u4f8b\u5982 Django ORM, PonyORM \u7b49\u3002 \u83b7\u53d6\u8bf7\u6c42 \u5982\u4e0a\u6240\u8bf4\uff0c\u6240\u6709 HTTP \u7c7b\u4e2d\u7684\u65b9\u6cd5\u90fd\u53ef\u4ee5\u901a\u8fc7 self.request \u6765\u8bfb\u53d6\u6b64\u6b21\u8bf7\u6c42\u7684\u4fe1\u606f\u3002\u4e0b\u9762\u5c06\u4ecb\u7ecd\u5b83\u6700\u5e38\u7528\u7684\u4e00\u4e9b\u5c5e\u6027\u3002 Method \u901a\u8fc7 request.method \u53ef\u4ee5\u83b7\u53d6\u5230\u8bf7\u6c42\u65b9\u6cd5\uff0c\u4f8b\u5982 get / post \u7b49\u3002 URL \u901a\u8fc7 request.url \u53ef\u4ee5\u83b7\u53d6\u5230\u8bf7\u6c42\u8def\u5f84\u3002\u8be5\u5c5e\u6027\u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u5b57\u7b26\u4e32\u7684\u5bf9\u8c61\uff0c\u5b83\u516c\u5f00\u4e86\u53ef\u4ee5\u4eceURL\u4e2d\u89e3\u6790\u51fa\u7684\u6240\u6709\u7ec4\u4ef6\u3002 \u4f8b\u5982\uff1a request.url.path , request.url.port , request.url.scheme Headers request.headers \u662f\u4e00\u4e2a\u5927\u5c0f\u5199\u65e0\u5173\u7684\u591a\u503c\u5b57\u5178(multi-dict)\u3002\u4f46\u901a\u8fc7 request.headers.keys() / request.headers.items() \u53d6\u51fa\u6765\u7684 key \u5747\u4e3a\u5c0f\u5199\u3002 Query Parameters request.query_params \u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u591a\u503c\u5b57\u5178(multi-dict)\u3002 \u4f8b\u5982\uff1a request.query_params['search'] Client Address request.client \u662f\u4e00\u4e2a namedtuple \uff0c\u5b9a\u4e49\u4e3a namedtuple(\"Address\", [\"host\", \"port\"]) \u3002 \u83b7\u53d6\u5ba2\u6237\u7aef hostname \u6216 IP \u5730\u5740: request.client.host \u3002 \u83b7\u53d6\u5ba2\u6237\u7aef\u5728\u5f53\u524d\u8fde\u63a5\u4e2d\u4f7f\u7528\u7684\u7aef\u53e3: request.client.port \u3002 Notice \u5143\u7ec4\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u90fd\u53ef\u80fd\u4e3a None\u3002\u8fd9\u53d7\u9650\u4e8e ASGI \u670d\u52a1\u5668\u4f20\u9012\u7684\u503c\u3002 Cookies request.cookies \u662f\u4e00\u4e2a\u6807\u51c6\u5b57\u5178\uff0c\u5b9a\u4e49\u4e3a Dict[str, str] \u3002 \u4f8b\u5982\uff1a request.cookies.get('mycookie') Notice \u4f60\u6ca1\u529e\u6cd5\u4ece request.cookies \u91cc\u8bfb\u53d6\u5230\u65e0\u6548\u7684 cookie (RFC2109) Body \u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u8bfb\u5230\u8bf7\u6c42\u4f53\u5185\u5bb9\uff1a await request.body() \uff1a\u8fd4\u56de\u4e00\u4e2a bytes \u3002 await request.form() \uff1a\u5c06 body \u4f5c\u4e3a\u8868\u5355\u8fdb\u884c\u89e3\u6790\u5e76\u8fd4\u56de\u7ed3\u679c\uff08\u591a\u503c\u5b57\u5178\uff09\u3002 await request.json() \uff1a\u5c06 body \u4f5c\u4e3a JSON \u5b57\u7b26\u4e32\u89e3\u6790\u5e76\u8fd4\u56de\u7ed3\u679c\u3002 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 async for \u8bed\u6cd5\u5c06 body \u4f5c\u4e3a\u4e00\u4e2a bytes \u6d41\u8fdb\u884c\u8bfb\u53d6\uff1a async def post ( self ): ... body = b '' async for chunk in self . request . stream (): body += chunk ... \u5982\u679c\u4f60\u76f4\u63a5\u4f7f\u7528\u4e86 request.stream() \u53bb\u8bfb\u53d6\u6570\u636e\uff0c\u90a3\u4e48\u8bf7\u6c42\u4f53\u5c06\u4e0d\u4f1a\u7f13\u5b58\u5728\u5185\u5b58\u4e2d\u3002\u5176\u540e\u4efb\u4f55\u5bf9 .body() / .form() / .json() \u7684\u8c03\u7528\u90fd\u5c06\u629b\u51fa\u9519\u8bef\u3002 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f8b\u5982\u957f\u8f6e\u8be2\u6216\u6d41\u5f0f\u54cd\u5e94\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u786e\u5b9a\u5ba2\u6237\u7aef\u662f\u5426\u5df2\u65ad\u5f00\u8fde\u63a5\u3002\u53ef\u4ee5\u4f7f\u7528 disconnected = await request.is_disconnected() \u786e\u5b9a\u6b64\u72b6\u6001\u3002 Request Files \u901a\u8fc7 await request.form() \u53ef\u4ee5\u89e3\u6790\u901a\u8fc7 multipart/form-data \u683c\u5f0f\u63a5\u6536\u5230\u7684\u8868\u5355\uff0c\u5305\u62ec\u6587\u4ef6\u3002 \u6587\u4ef6\u5c06\u88ab\u5305\u88c5\u4e3a starlette.datastructures.UploadFile \u5bf9\u8c61\uff0c\u5b83\u6709\u5982\u4e0b\u5c5e\u6027\uff1a filename: str : \u88ab\u63d0\u4ea4\u7684\u539f\u59cb\u6587\u4ef6\u540d\u79f0 (\u4f8b\u5982 myimage.jpg ). content_type: str : \u6587\u4ef6\u7c7b\u578b (MIME type / media type) (\u4f8b\u5982 image/jpeg ). file: tempfile.SpooledTemporaryFile : \u5b58\u50a8\u6587\u4ef6\u5185\u5bb9\u7684\u4e34\u65f6\u6587\u4ef6\uff08\u53ef\u4ee5\u76f4\u63a5\u8bfb\u5199\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u4f46\u6700\u597d\u4e0d\u8981\uff09\u3002 UploadFile \u8fd8\u6709\u56db\u4e2a\u5f02\u6b65\u65b9\u6cd5\uff08\u5f53\u6587\u4ef6\u5728\u5185\u5b58\u4e2d\u65f6\u5c06\u76f4\u63a5\u8fdb\u884c\u64cd\u4f5c\uff0c\u5728\u78c1\u76d8\u65f6\u5c06\u4f7f\u7528\u591a\u7ebf\u7a0b\u5305\u88f9\u539f\u59cb\u6587\u4ef6\u7684\u64cd\u4f5c\u4ece\u800c\u5f97\u5230\u5f02\u6b65\u80fd\u529b starlette#933 \uff09\u3002 async write(data: Union[str, bytes]) : \u5199\u5165\u6570\u636e\u5230\u6587\u4ef6\u4e2d\u3002 async read(size: int) : \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u3002 async seek(offset: int) : \u6587\u4ef6\u6307\u9488\u8df3\u8f6c\u5230\u6307\u5b9a\u4f4d\u7f6e\u3002 async close() : \u5173\u95ed\u6587\u4ef6\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u8bfb\u53d6\u539f\u59cb\u6587\u4ef6\u540d\u79f0\u548c\u5185\u5bb9\u7684\u4f8b\u5b50\uff1a form = await request . form () filename = form [ \"upload_file\" ] . filename contents = await form [ \"upload_file\" ] . read () State \u67d0\u4e9b\u60c5\u51b5\u4e0b\u9700\u8981\u50a8\u5b58\u4e00\u4e9b\u989d\u5916\u7684\u81ea\u5b9a\u4e49\u4fe1\u606f\u5230 request \u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 request.state \u7528\u4e8e\u5b58\u50a8\u3002 request . state . user = User ( name = \"Alice\" ) # \u5199 user_name = request . state . user . name # \u8bfb del request . state . user # \u5220 \u8fd4\u56de\u54cd\u5e94 \u5bf9\u4e8e\u4efb\u4f55\u6b63\u5e38\u5904\u7406\u7684 HTTP \u8bf7\u6c42\u90fd\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a indexpy.http.responses.Response \u5bf9\u8c61\u6216\u8005\u662f\u5b83\u7684\u5b50\u7c7b\u5bf9\u8c61\u3002 \u5728 index.http.repsonses \u91cc\u5185\u7f6e\u7684\u53ef\u7528\u5bf9\u8c61\u5982\u4e0b\uff1a Response HTMLResponse PlainTextResponse JSONResponse RedirectResponse StreamingResponse FileResponse TemplateResponse Index \u63d0\u4f9b\u4e86\u4f7f\u7528 Jinja2 \u7684\u65b9\u6cd5\u3002\u5982\u4e0b\u4ee3\u7801\u5c06\u4f1a\u81ea\u52a8\u5728\u9879\u76ee\u4e0b\u5bfb\u627e\u5bf9\u5e94\u7684\u6a21\u677f\u8fdb\u884c\u6e32\u67d3\u3002\uff08\u5bfb\u627e\u8def\u5f84\u7531 TEMPLATES \u914d\u7f6e\u8fdb\u884c\u7ba1\u7406\uff09 from indexpy.http import HTTPView from indexpy.http.responses import TemplateResponse class HTTP ( HTTPView ): def get ( self ): return TemplateResponse ( \"chat.html\" , { \"request\" : self . request }) TemplateResponse \u4f7f\u7528\u7684 jinja2.Environment \u6765\u81ea\u4e8e Index().jinja_env \uff0c\u901a\u8fc7\u66f4\u6539\u3001\u8986\u76d6\u7b49\u65b9\u5f0f\uff0c\u4f60\u53ef\u4ee5\u81ea\u7531\u7684\u63a7\u5236 TemplateResponse \u3002 \u4f8b\u5b50\uff1a from datetime import datetime from indexpy import Index app = Index () app . jinja_env . globals [ \"now\" ] = datetime . now YAMLResponse YAMLResponse \u4e0e JSONResponse \u7684\u4f7f\u7528\u65b9\u6cd5\u76f8\u540c\u3002 \u552f\u4e00\u4e0d\u540c\u7684\u662f\uff0c\u4e00\u4e2a\u8fd4\u56de YAML \u683c\u5f0f\uff0c\u4e00\u4e2a\u8fd4\u56de JSON \u683c\u5f0f\u3002 \u54cd\u5e94\u7684\u7b80\u5316\u5199\u6cd5 \u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528\uff0cIndex \u5141\u8bb8\u81ea\u5b9a\u4e49\u4e00\u4e9b\u51fd\u6570\u6765\u5904\u7406 HTTP \u5185\u8fd4\u56de\u7684\u975e Response \u5bf9\u8c61\u3002\u5b83\u7684\u539f\u7406\u662f\u62e6\u622a\u54cd\u5e94\uff0c\u901a\u8fc7\u54cd\u5e94\u503c\u7684\u7c7b\u578b\u6765\u81ea\u52a8\u9009\u62e9\u5904\u7406\u51fd\u6570\uff0c\u628a\u975e Response \u5bf9\u8c61\u8f6c\u6362\u4e3a Response \u5bf9\u8c61\u3002 Index \u5185\u7f6e\u4e86\u4e09\u4e2a\u5904\u7406\u51fd\u6570\u7528\u4e8e\u5904\u7406\u516d\u79cd\u7c7b\u578b\uff1a @automatic . register ( type ( None )) def _none ( ret : typing . Type [ None ]) -> typing . NoReturn : raise TypeError ( \"Get 'None'. Maybe you need to add a return statement to the function.\" ) @automatic . register ( tuple ) @automatic . register ( list ) @automatic . register ( dict ) def _json ( body : typing . Tuple [ tuple , list , dict ], status : int = 200 , headers : dict = None ) -> Response : return JSONResponse ( body , status , headers ) @automatic . register ( str ) @automatic . register ( bytes ) def _plain_text ( body : typing . Union [ str , bytes ], status : int = 200 , headers : dict = None ) -> Response : return PlainTextResponse ( body , status , headers ) \u6b63\u662f\u6709\u4e86\u8fd9\u4e9b\u5185\u7f6e\u5904\u7406\u51fd\u6570\uff0c\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u5c06\u88ab\u6b63\u786e\u89e3\u6790\u4e3a\u4e00\u4e2a JSON \u54cd\u5e94\u3002 from indexpy.http import HTTPView class HTTP ( HTTPView ): def get ( self ): return { \"key\" : \"value\" } \u540c\u6837\u7684\uff0c\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u54cd\u5e94\u503c\u7684\u7b80\u5316\u5199\u6cd5\u4ee5\u7edf\u4e00\u9879\u76ee\u7684\u54cd\u5e94\u89c4\u8303\uff08\u54ea\u6015\u6709 TypedDict \uff0cPython \u7684 Dict \u7ea6\u675f\u4f9d\u65e7\u5f88\u5f31\uff0c\u4f46 dataclass \u5219\u6709\u6548\u5f97\u591a\uff09\uff0c\u4f8b\u5982\uff1a from dataclasses import dataclass , asdict from indexpy.http.responses import automatic , Response , JSONResponse @dataclass class Error : code : int = 0 title : str = \"\" message : str = \"\" @automatic . register ( Error ) def _error_json ( error : Error , status : int = 400 ) -> Response : return JSONResponse ( asdict ( error ), status ) \u9ed8\u8ba4\u54cd\u5e94 \u5f53\u4f60\u9700\u8981\u8fd4\u56de\u4e00\u4e2a HTTP \u72b6\u6001\u7801\u4ee5\u53ca\u5176\u9ed8\u8ba4\u7684\u63cf\u8ff0\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 raise indexpy . http . HTTPException ( CODE ) \u5176\u597d\u5904\u5728\u4e8e\u4f60\u53ef\u4ee5\u901a\u8fc7 \u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406 \u6765\u6355\u6349\u5e76\u81ea\u5b9a\u4e49\u5b83\u4eec\u3002 \u4f8b\u5982\uff1a\u7f51\u7ad9\u9700\u8981\u6709\u7edf\u4e00\u7684 404 \u9875\u9762\u3002 \u4e2d\u95f4\u4ef6 \u5728 views \u4e2d\u4efb\u610f __init__.py \u4e2d\u5b9a\u4e49\u540d\u4e3a Middleware \u7684\u7c7b, \u5b83\u5c06\u80fd\u5904\u7406\u6240\u6709\u901a\u8fc7\u8be5\u8def\u5f84\u7684 HTTP \u8bf7\u6c42\u3002 \u8b6c\u5982\u5728 views/__init__.py \u4e2d\u5b9a\u4e49\u7684\u4e2d\u95f4\u4ef6\uff0c\u80fd\u5904\u7406\u6240\u6709 URI \u7684 HTTP \u8bf7\u6c42\uff1b\u5728 views/api/__init__.py \u5219\u53ea\u80fd\u5904\u7406 URI \u4e3a /api/### \u7684\u8bf7\u6c42\u3002 Middleware \u9700\u8981\u7ee7\u627f indexpy.http.MiddlewareMixin \uff0c\u6709\u4ee5\u4e0b\u4e09\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u91cd\u5199\u3002 process_request(request) \u6b64\u65b9\u6cd5\u5728\u8bf7\u6c42\u88ab\u5c42\u5c42\u4f20\u9012\u65f6\u8c03\u7528\uff0c\u53ef\u7528\u4e8e\u4fee\u6539 request \u5bf9\u8c61\u4ee5\u4f9b\u540e\u7eed\u5904\u7406\u4f7f\u7528\u3002\u5fc5\u987b\u8fd4\u56de None \uff0c\u5426\u5219\u8fd4\u56de\u503c\u5c06\u4f5c\u4e3a\u6700\u7ec8\u7ed3\u679c\u5e76\u76f4\u63a5\u7ec8\u6b62\u6b64\u6b21\u8bf7\u6c42\u3002 process_response(request, response) \u6b64\u65b9\u6cd5\u5728\u8bf7\u6c42\u88ab\u6b63\u5e38\u5904\u7406\u3001\u5df2\u7ecf\u8fd4\u56de\u54cd\u5e94\u5bf9\u8c61\u540e\u8c03\u7528\uff0c\u5b83\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u53ef\u7528\u7684\u54cd\u5e94\u5bf9\u8c61\uff08\u4e00\u822c\u6765\u8bf4\u76f4\u63a5\u8fd4\u56de response \u5373\u53ef\uff09\u3002 process_exception(request, exception) \u6b64\u65b9\u6cd5\u5728\u4e2d\u95f4\u4ef6\u4e4b\u540e\u7684\u8c03\u7528\u94fe\u8def\u4e0a\u51fa\u73b0\u5f02\u5e38\u65f6\u88ab\u8c03\u7528\u3002\u5f53\u5176\u8fd4\u56de\u503c\u4e3a None \u65f6\uff0c\u5f02\u5e38\u4f1a\u88ab\u539f\u6837\u629b\u51fa\uff0c\u5426\u5219\u5176\u8fd4\u56de\u503c\u5c06\u4f5c\u4e3a\u6b64\u6b21\u8bf7\u6c42\u7684\u54cd\u5e94\u503c\u88ab\u8fd4\u56de\u3002 Notice \u4ee5\u4e0a\u51fd\u6570\u65e0\u8bba\u4f60\u4ee5\u4f55\u79cd\u65b9\u5f0f\u5b9a\u4e49\uff0c\u90fd\u4f1a\u5728\u52a0\u8f7d\u65f6\u88ab\u6539\u9020\u6210\u5f02\u6b65\u51fd\u6570\uff0c\u4f46\u4e3a\u4e86\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u635f\u8017\uff0c\u5c3d\u91cf\u4f7f\u7528 async def \u53bb\u5b9a\u4e49\u5b83\u4eec\u2014\u2014\u9664\u975e\u5728\u5176\u4e2d\u4f7f\u7528\u4e86\u542b\u6709\u963b\u585e IO \u7684\u5176\u4ed6\u51fd\u6570\uff0c\u4f8b\u5982 Django ORM, PonyORM \u7b49\u3002 \u5b50\u4e2d\u95f4\u4ef6 \u5f88\u591a\u65f6\u5019\uff0c\u5bf9\u4e8e\u540c\u4e00\u4e2a\u7236 URI\uff0c\u9700\u8981\u6709\u591a\u4e2a\u4e2d\u95f4\u4ef6\u53bb\u5904\u7406\u3002\u901a\u8fc7\u6307\u5b9a Middleware \u4e2d\u7684 mounts \u5c5e\u6027\uff0c\u53ef\u4ee5\u4e3a\u4e2d\u95f4\u4ef6\u6307\u5b9a\u5b50\u4e2d\u95f4\u4ef6\u3002\u6267\u884c\u65f6\u4f1a\u5148\u6267\u884c\u7236\u4e2d\u95f4\u4ef6\uff0c\u518d\u6267\u884c\u5b50\u4e2d\u95f4\u4ef6\u3002 Notice \u5b50\u4e2d\u95f4\u4ef6\u7684\u6267\u884c\u987a\u5e8f\u662f\u4ece\u5de6\u5230\u53f3\u3002 from indexpy.http import MiddlewareMixin class ExampleChildMiddleware ( MiddlewareMixin ): async def process_request ( self , request ): print ( \"enter first process request\" ) async def process_response ( self , request , response ): print ( \"enter last process response\" ) return response class Middleware ( MiddlewareMixin ): mounts = ( ExampleChildMiddleware ,) async def process_request ( self , request ): print ( \"example base middleware request\" ) async def process_response ( self , request , response ): print ( \"example base middleware response\" ) return response \u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406 \u5bf9\u4e8e\u4e00\u4e9b\u6545\u610f\u629b\u51fa\u7684\u5f02\u5e38\uff0cIndex \u63d0\u4f9b\u4e86\u65b9\u6cd5\u8fdb\u884c\u7edf\u4e00\u5904\u7406\u3002 \u4ee5\u4e0b\u4e3a\u6837\u4f8b\uff1a from indexpy import Index from indexpy.types import Request , Response from indexpy.http.responses import PlainTextResponse from indexpy.http import HTTPException app = Index () @app . exception_handler ( 404 ) def not_found ( request : Request , exc : HTTPException ) -> Response : return PlainTextResponse ( \"what do you want to do?\" , status_code = 404 ) @app . exception_handler ( ValueError ) def value_error ( request : Request , exc : ValueError ) -> Response : return PlainTextResponse ( \"Something went wrong with the server.\" , status_code = 500 ) Notice \u5982\u679c\u662f\u6355\u6349 HTTP \u72b6\u6001\u7801\uff0c\u5219\u4f1a\u6355\u6349 indexpy.http.HTTPException \u3002 Tip \u5728\u6b64\u53ef\u4ee5\u6355\u6349\u5305\u62ec\u6302\u8f7d\u5230 Index \u4e2d\u7684\u5176\u4ed6 app \u7684\u5f02\u5e38\u3002\u800c\u4e2d\u95f4\u4ef6\u4e2d\u4ec5\u80fd\u5904\u7406\u901a\u8fc7\u4e2d\u95f4\u4ef6\u7684\u5f02\u5e38\u3002 \u540e\u53f0\u4efb\u52a1 After Response Index \u63d0\u4f9b\u4e86\u7b80\u5355\u53ef\u7528\u7684\u540e\u53f0\u4efb\u52a1\u7684\u4f7f\u7528\u65b9\u6cd5\u3002 from indexpy.http import HTTPView from indexpy.http import after_response @after_response def only_print ( message : str ) -> None : print ( message ) class HTTP ( HTTPView ): async def get ( self ): \"\"\" welcome page \"\"\" only_print ( \"world\" ) print ( \"hello\" ) return \"\" \u5f97\u76ca\u4e8e contextvars \uff0c\u4f60\u53ef\u4ee5\u5728\u6574\u4e2a HTTP \u8bf7\u6c42\u7684\u5468\u671f\u5185\u7684\u4efb\u4f55\u4f4d\u7f6e\u53bb\u8c03\u7528\u51fd\u6570\uff0c\u5b83\u4eec\u90fd\u5c06\u5728\u54cd\u5e94\u6210\u529f\u5b8c\u6210\u540e\u5f00\u59cb\u6267\u884c\u3002 Finished Response Index \u63d0\u4f9b\u4e86\u53e6\u4e00\u4e2a\u88c5\u9970\u5668 finished_response \uff0c\u5b83\u7684\u4f7f\u7528\u4e0e after_response \u5b8c\u5168\u76f8\u540c\u3002\u4e0d\u540c\u7684\u662f\uff0c finished_response \u7684\u6267\u884c\u65f6\u95f4\u8282\u70b9\u5728\u6b64\u6b21\u54cd\u5e94\u7ed3\u675f\u540e\uff08\u5305\u62ec after_response \u4efb\u52a1\u6267\u884c\u5b8c\u6210\uff09\uff0c\u65e0\u8bba\u5728\u6b64\u8fc7\u7a0b\u4e2d\u662f\u5426\u5f15\u53d1\u4e86\u9519\u8bef\u5bfc\u81f4\u6d41\u7a0b\u63d0\u524d\u7ed3\u675f\uff0c finished_response \u90fd\u5c06\u6267\u884c\u3002 \u7c97\u6d45\u7684\u7406\u89e3\uff0c after_response \u7528\u4e8e\u8bf7\u6c42\u88ab\u6b63\u5e38\u5904\u7406\u5b8c\u6210\u540e\u6267\u884c\u4e00\u4e9b\u4efb\u52a1\uff0c\u4e00\u65e6\u5904\u7406\u8bf7\u6c42\u7684\u8fc7\u7a0b\u4e2d\u629b\u51fa\u9519\u8bef\uff0c after_response \u5c06\u4e0d\u4f1a\u6267\u884c\u3002\u800c finished_response \u5145\u5f53\u4e86 finally \u7684\u89d2\u8272\uff0c\u65e0\u8bba\u5982\u4f55\uff0c\u5b83\u90fd\u4f1a\u6267\u884c\uff08\u9664\u975e Index \u670d\u52a1\u7ec8\u6b62\uff09\u3002","title":"HTTP"},{"location":"http/#_1","text":"\u5728 views \u91cc\u521b\u5efa\u4efb\u610f\u5408\u6cd5\u540d\u79f0\u7684 .py \u6587\u4ef6\uff0c\u5e76\u5728\u5176\u4e2d\u521b\u5efa\u540d\u4e3a HTTP \u7684\u7c7b\uff0c\u5373\u53ef\u4f7f\u6b64\u6587\u4ef6\u80fd\u591f\u5904\u7406\u5bf9\u5e94\u5176\u76f8\u5bf9\u4e8e views \u7684\u8def\u5f84\u7684 HTTP \u8bf7\u6c42\u3002 \u4f46\u8f83\u4e3a\u7279\u6b8a\u7684\u662f\u540d\u4e3a index.py \u7684\u6587\u4ef6\uff0c\u5b83\u80fd\u591f\u5904\u7406\u4ee5 / \u4f5c\u4e3a\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684 URI\u3002 Tip \u7531\u4e8e Python \u89c4\u5b9a\uff0c\u6a21\u5757\u540d\u79f0\u5fc5\u987b\u7531\u5b57\u6bcd\u3001\u6570\u5b57\u4e0e\u4e0b\u5212\u7ebf\u7ec4\u6210\uff0c\u4f46\u8fd9\u79cd URI \u4e0d\u53cb\u597d\uff0c\u6240\u4ee5 Index \u4f1a\u5c06 URI \u4e2d\u7684 _ \u5168\u90e8\u66ff\u6362\u6210 - \u5e76\u505a 301 \u8df3\u8f6c\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e ALLOW_UNDERLINE \u4e3a\u771f\u53bb\u5173\u95ed\u6b64\u529f\u80fd\u3002 \u4e00\u4e9b\u4f8b\u5b50 \u6587\u4ef6\u76f8\u5bf9\u8def\u5f84 \u6587\u4ef6\u80fd\u5904\u7406\u7684URI views/index.py / views/about.py /about views/api/create_article.py /api/create-article views/article/index.py /article/ HTTP \u7684\u7c7b\u5e94\u4ece indexpy.http.HTTPView \u7ee7\u627f\u800c\u6765\uff0c\u4f60\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b\u65b9\u6cd5\u53bb\u5904\u7406\u5bf9\u5e94\u7684 HTTP \u8bf7\u6c42\u3002 get post put patch delete head options trace \u8fd9\u4e9b\u51fd\u6570\u9ed8\u8ba4\u4e0d\u63a5\u53d7\u4efb\u4f55\u53c2\u6570\uff0c\u4f46\u4f60\u53ef\u4ee5\u4f7f\u7528 self.request \u53bb\u83b7\u53d6\u6b64\u6b21\u8bf7\u6c42\u7684\u4e00\u4e9b\u4fe1\u606f\u3002 Notice \u8fd9\u4e9b\u88ab\u7528\u4e8e\u5b9e\u9645\u5904\u7406 HTTP \u8bf7\u6c42\u7684\u51fd\u6570\uff0c\u65e0\u8bba\u4f60\u4ee5\u4f55\u79cd\u65b9\u5f0f\u5b9a\u4e49\uff0c\u90fd\u4f1a\u5728\u52a0\u8f7d\u65f6\u88ab\u6539\u9020\u6210\u5f02\u6b65\u51fd\u6570\uff0c\u4f46\u4e3a\u4e86\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u635f\u8017\uff0c\u5c3d\u91cf\u4f7f\u7528 async def \u53bb\u5b9a\u4e49\u5b83\u4eec\u2014\u2014\u9664\u975e\u5728\u5176\u4e2d\u4f7f\u7528\u4e86\u542b\u6709\u963b\u585e IO \u7684\u5176\u4ed6\u51fd\u6570\uff0c\u4f8b\u5982 Django ORM, PonyORM \u7b49\u3002","title":"\u8def\u7531"},{"location":"http/#_2","text":"\u5982\u4e0a\u6240\u8bf4\uff0c\u6240\u6709 HTTP \u7c7b\u4e2d\u7684\u65b9\u6cd5\u90fd\u53ef\u4ee5\u901a\u8fc7 self.request \u6765\u8bfb\u53d6\u6b64\u6b21\u8bf7\u6c42\u7684\u4fe1\u606f\u3002\u4e0b\u9762\u5c06\u4ecb\u7ecd\u5b83\u6700\u5e38\u7528\u7684\u4e00\u4e9b\u5c5e\u6027\u3002","title":"\u83b7\u53d6\u8bf7\u6c42"},{"location":"http/#method","text":"\u901a\u8fc7 request.method \u53ef\u4ee5\u83b7\u53d6\u5230\u8bf7\u6c42\u65b9\u6cd5\uff0c\u4f8b\u5982 get / post \u7b49\u3002","title":"Method"},{"location":"http/#url","text":"\u901a\u8fc7 request.url \u53ef\u4ee5\u83b7\u53d6\u5230\u8bf7\u6c42\u8def\u5f84\u3002\u8be5\u5c5e\u6027\u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u5b57\u7b26\u4e32\u7684\u5bf9\u8c61\uff0c\u5b83\u516c\u5f00\u4e86\u53ef\u4ee5\u4eceURL\u4e2d\u89e3\u6790\u51fa\u7684\u6240\u6709\u7ec4\u4ef6\u3002 \u4f8b\u5982\uff1a request.url.path , request.url.port , request.url.scheme","title":"URL"},{"location":"http/#headers","text":"request.headers \u662f\u4e00\u4e2a\u5927\u5c0f\u5199\u65e0\u5173\u7684\u591a\u503c\u5b57\u5178(multi-dict)\u3002\u4f46\u901a\u8fc7 request.headers.keys() / request.headers.items() \u53d6\u51fa\u6765\u7684 key \u5747\u4e3a\u5c0f\u5199\u3002","title":"Headers"},{"location":"http/#query-parameters","text":"request.query_params \u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u591a\u503c\u5b57\u5178(multi-dict)\u3002 \u4f8b\u5982\uff1a request.query_params['search']","title":"Query Parameters"},{"location":"http/#client-address","text":"request.client \u662f\u4e00\u4e2a namedtuple \uff0c\u5b9a\u4e49\u4e3a namedtuple(\"Address\", [\"host\", \"port\"]) \u3002 \u83b7\u53d6\u5ba2\u6237\u7aef hostname \u6216 IP \u5730\u5740: request.client.host \u3002 \u83b7\u53d6\u5ba2\u6237\u7aef\u5728\u5f53\u524d\u8fde\u63a5\u4e2d\u4f7f\u7528\u7684\u7aef\u53e3: request.client.port \u3002 Notice \u5143\u7ec4\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u90fd\u53ef\u80fd\u4e3a None\u3002\u8fd9\u53d7\u9650\u4e8e ASGI \u670d\u52a1\u5668\u4f20\u9012\u7684\u503c\u3002","title":"Client Address"},{"location":"http/#cookies","text":"request.cookies \u662f\u4e00\u4e2a\u6807\u51c6\u5b57\u5178\uff0c\u5b9a\u4e49\u4e3a Dict[str, str] \u3002 \u4f8b\u5982\uff1a request.cookies.get('mycookie') Notice \u4f60\u6ca1\u529e\u6cd5\u4ece request.cookies \u91cc\u8bfb\u53d6\u5230\u65e0\u6548\u7684 cookie (RFC2109)","title":"Cookies"},{"location":"http/#body","text":"\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u8bfb\u5230\u8bf7\u6c42\u4f53\u5185\u5bb9\uff1a await request.body() \uff1a\u8fd4\u56de\u4e00\u4e2a bytes \u3002 await request.form() \uff1a\u5c06 body \u4f5c\u4e3a\u8868\u5355\u8fdb\u884c\u89e3\u6790\u5e76\u8fd4\u56de\u7ed3\u679c\uff08\u591a\u503c\u5b57\u5178\uff09\u3002 await request.json() \uff1a\u5c06 body \u4f5c\u4e3a JSON \u5b57\u7b26\u4e32\u89e3\u6790\u5e76\u8fd4\u56de\u7ed3\u679c\u3002 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 async for \u8bed\u6cd5\u5c06 body \u4f5c\u4e3a\u4e00\u4e2a bytes \u6d41\u8fdb\u884c\u8bfb\u53d6\uff1a async def post ( self ): ... body = b '' async for chunk in self . request . stream (): body += chunk ... \u5982\u679c\u4f60\u76f4\u63a5\u4f7f\u7528\u4e86 request.stream() \u53bb\u8bfb\u53d6\u6570\u636e\uff0c\u90a3\u4e48\u8bf7\u6c42\u4f53\u5c06\u4e0d\u4f1a\u7f13\u5b58\u5728\u5185\u5b58\u4e2d\u3002\u5176\u540e\u4efb\u4f55\u5bf9 .body() / .form() / .json() \u7684\u8c03\u7528\u90fd\u5c06\u629b\u51fa\u9519\u8bef\u3002 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f8b\u5982\u957f\u8f6e\u8be2\u6216\u6d41\u5f0f\u54cd\u5e94\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u786e\u5b9a\u5ba2\u6237\u7aef\u662f\u5426\u5df2\u65ad\u5f00\u8fde\u63a5\u3002\u53ef\u4ee5\u4f7f\u7528 disconnected = await request.is_disconnected() \u786e\u5b9a\u6b64\u72b6\u6001\u3002","title":"Body"},{"location":"http/#request-files","text":"\u901a\u8fc7 await request.form() \u53ef\u4ee5\u89e3\u6790\u901a\u8fc7 multipart/form-data \u683c\u5f0f\u63a5\u6536\u5230\u7684\u8868\u5355\uff0c\u5305\u62ec\u6587\u4ef6\u3002 \u6587\u4ef6\u5c06\u88ab\u5305\u88c5\u4e3a starlette.datastructures.UploadFile \u5bf9\u8c61\uff0c\u5b83\u6709\u5982\u4e0b\u5c5e\u6027\uff1a filename: str : \u88ab\u63d0\u4ea4\u7684\u539f\u59cb\u6587\u4ef6\u540d\u79f0 (\u4f8b\u5982 myimage.jpg ). content_type: str : \u6587\u4ef6\u7c7b\u578b (MIME type / media type) (\u4f8b\u5982 image/jpeg ). file: tempfile.SpooledTemporaryFile : \u5b58\u50a8\u6587\u4ef6\u5185\u5bb9\u7684\u4e34\u65f6\u6587\u4ef6\uff08\u53ef\u4ee5\u76f4\u63a5\u8bfb\u5199\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u4f46\u6700\u597d\u4e0d\u8981\uff09\u3002 UploadFile \u8fd8\u6709\u56db\u4e2a\u5f02\u6b65\u65b9\u6cd5\uff08\u5f53\u6587\u4ef6\u5728\u5185\u5b58\u4e2d\u65f6\u5c06\u76f4\u63a5\u8fdb\u884c\u64cd\u4f5c\uff0c\u5728\u78c1\u76d8\u65f6\u5c06\u4f7f\u7528\u591a\u7ebf\u7a0b\u5305\u88f9\u539f\u59cb\u6587\u4ef6\u7684\u64cd\u4f5c\u4ece\u800c\u5f97\u5230\u5f02\u6b65\u80fd\u529b starlette#933 \uff09\u3002 async write(data: Union[str, bytes]) : \u5199\u5165\u6570\u636e\u5230\u6587\u4ef6\u4e2d\u3002 async read(size: int) : \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u3002 async seek(offset: int) : \u6587\u4ef6\u6307\u9488\u8df3\u8f6c\u5230\u6307\u5b9a\u4f4d\u7f6e\u3002 async close() : \u5173\u95ed\u6587\u4ef6\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u8bfb\u53d6\u539f\u59cb\u6587\u4ef6\u540d\u79f0\u548c\u5185\u5bb9\u7684\u4f8b\u5b50\uff1a form = await request . form () filename = form [ \"upload_file\" ] . filename contents = await form [ \"upload_file\" ] . read ()","title":"Request Files"},{"location":"http/#state","text":"\u67d0\u4e9b\u60c5\u51b5\u4e0b\u9700\u8981\u50a8\u5b58\u4e00\u4e9b\u989d\u5916\u7684\u81ea\u5b9a\u4e49\u4fe1\u606f\u5230 request \u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 request.state \u7528\u4e8e\u5b58\u50a8\u3002 request . state . user = User ( name = \"Alice\" ) # \u5199 user_name = request . state . user . name # \u8bfb del request . state . user # \u5220","title":"State"},{"location":"http/#_3","text":"\u5bf9\u4e8e\u4efb\u4f55\u6b63\u5e38\u5904\u7406\u7684 HTTP \u8bf7\u6c42\u90fd\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a indexpy.http.responses.Response \u5bf9\u8c61\u6216\u8005\u662f\u5b83\u7684\u5b50\u7c7b\u5bf9\u8c61\u3002 \u5728 index.http.repsonses \u91cc\u5185\u7f6e\u7684\u53ef\u7528\u5bf9\u8c61\u5982\u4e0b\uff1a","title":"\u8fd4\u56de\u54cd\u5e94"},{"location":"http/#response","text":"","title":"Response"},{"location":"http/#htmlresponse","text":"","title":"HTMLResponse"},{"location":"http/#plaintextresponse","text":"","title":"PlainTextResponse"},{"location":"http/#jsonresponse","text":"","title":"JSONResponse"},{"location":"http/#redirectresponse","text":"","title":"RedirectResponse"},{"location":"http/#streamingresponse","text":"","title":"StreamingResponse"},{"location":"http/#fileresponse","text":"","title":"FileResponse"},{"location":"http/#templateresponse","text":"Index \u63d0\u4f9b\u4e86\u4f7f\u7528 Jinja2 \u7684\u65b9\u6cd5\u3002\u5982\u4e0b\u4ee3\u7801\u5c06\u4f1a\u81ea\u52a8\u5728\u9879\u76ee\u4e0b\u5bfb\u627e\u5bf9\u5e94\u7684\u6a21\u677f\u8fdb\u884c\u6e32\u67d3\u3002\uff08\u5bfb\u627e\u8def\u5f84\u7531 TEMPLATES \u914d\u7f6e\u8fdb\u884c\u7ba1\u7406\uff09 from indexpy.http import HTTPView from indexpy.http.responses import TemplateResponse class HTTP ( HTTPView ): def get ( self ): return TemplateResponse ( \"chat.html\" , { \"request\" : self . request }) TemplateResponse \u4f7f\u7528\u7684 jinja2.Environment \u6765\u81ea\u4e8e Index().jinja_env \uff0c\u901a\u8fc7\u66f4\u6539\u3001\u8986\u76d6\u7b49\u65b9\u5f0f\uff0c\u4f60\u53ef\u4ee5\u81ea\u7531\u7684\u63a7\u5236 TemplateResponse \u3002 \u4f8b\u5b50\uff1a from datetime import datetime from indexpy import Index app = Index () app . jinja_env . globals [ \"now\" ] = datetime . now","title":"TemplateResponse"},{"location":"http/#yamlresponse","text":"YAMLResponse \u4e0e JSONResponse \u7684\u4f7f\u7528\u65b9\u6cd5\u76f8\u540c\u3002 \u552f\u4e00\u4e0d\u540c\u7684\u662f\uff0c\u4e00\u4e2a\u8fd4\u56de YAML \u683c\u5f0f\uff0c\u4e00\u4e2a\u8fd4\u56de JSON \u683c\u5f0f\u3002","title":"YAMLResponse"},{"location":"http/#_4","text":"\u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528\uff0cIndex \u5141\u8bb8\u81ea\u5b9a\u4e49\u4e00\u4e9b\u51fd\u6570\u6765\u5904\u7406 HTTP \u5185\u8fd4\u56de\u7684\u975e Response \u5bf9\u8c61\u3002\u5b83\u7684\u539f\u7406\u662f\u62e6\u622a\u54cd\u5e94\uff0c\u901a\u8fc7\u54cd\u5e94\u503c\u7684\u7c7b\u578b\u6765\u81ea\u52a8\u9009\u62e9\u5904\u7406\u51fd\u6570\uff0c\u628a\u975e Response \u5bf9\u8c61\u8f6c\u6362\u4e3a Response \u5bf9\u8c61\u3002 Index \u5185\u7f6e\u4e86\u4e09\u4e2a\u5904\u7406\u51fd\u6570\u7528\u4e8e\u5904\u7406\u516d\u79cd\u7c7b\u578b\uff1a @automatic . register ( type ( None )) def _none ( ret : typing . Type [ None ]) -> typing . NoReturn : raise TypeError ( \"Get 'None'. Maybe you need to add a return statement to the function.\" ) @automatic . register ( tuple ) @automatic . register ( list ) @automatic . register ( dict ) def _json ( body : typing . Tuple [ tuple , list , dict ], status : int = 200 , headers : dict = None ) -> Response : return JSONResponse ( body , status , headers ) @automatic . register ( str ) @automatic . register ( bytes ) def _plain_text ( body : typing . Union [ str , bytes ], status : int = 200 , headers : dict = None ) -> Response : return PlainTextResponse ( body , status , headers ) \u6b63\u662f\u6709\u4e86\u8fd9\u4e9b\u5185\u7f6e\u5904\u7406\u51fd\u6570\uff0c\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u5c06\u88ab\u6b63\u786e\u89e3\u6790\u4e3a\u4e00\u4e2a JSON \u54cd\u5e94\u3002 from indexpy.http import HTTPView class HTTP ( HTTPView ): def get ( self ): return { \"key\" : \"value\" } \u540c\u6837\u7684\uff0c\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u54cd\u5e94\u503c\u7684\u7b80\u5316\u5199\u6cd5\u4ee5\u7edf\u4e00\u9879\u76ee\u7684\u54cd\u5e94\u89c4\u8303\uff08\u54ea\u6015\u6709 TypedDict \uff0cPython \u7684 Dict \u7ea6\u675f\u4f9d\u65e7\u5f88\u5f31\uff0c\u4f46 dataclass \u5219\u6709\u6548\u5f97\u591a\uff09\uff0c\u4f8b\u5982\uff1a from dataclasses import dataclass , asdict from indexpy.http.responses import automatic , Response , JSONResponse @dataclass class Error : code : int = 0 title : str = \"\" message : str = \"\" @automatic . register ( Error ) def _error_json ( error : Error , status : int = 400 ) -> Response : return JSONResponse ( asdict ( error ), status )","title":"\u54cd\u5e94\u7684\u7b80\u5316\u5199\u6cd5"},{"location":"http/#_5","text":"\u5f53\u4f60\u9700\u8981\u8fd4\u56de\u4e00\u4e2a HTTP \u72b6\u6001\u7801\u4ee5\u53ca\u5176\u9ed8\u8ba4\u7684\u63cf\u8ff0\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 raise indexpy . http . HTTPException ( CODE ) \u5176\u597d\u5904\u5728\u4e8e\u4f60\u53ef\u4ee5\u901a\u8fc7 \u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406 \u6765\u6355\u6349\u5e76\u81ea\u5b9a\u4e49\u5b83\u4eec\u3002 \u4f8b\u5982\uff1a\u7f51\u7ad9\u9700\u8981\u6709\u7edf\u4e00\u7684 404 \u9875\u9762\u3002","title":"\u9ed8\u8ba4\u54cd\u5e94"},{"location":"http/#_6","text":"\u5728 views \u4e2d\u4efb\u610f __init__.py \u4e2d\u5b9a\u4e49\u540d\u4e3a Middleware \u7684\u7c7b, \u5b83\u5c06\u80fd\u5904\u7406\u6240\u6709\u901a\u8fc7\u8be5\u8def\u5f84\u7684 HTTP \u8bf7\u6c42\u3002 \u8b6c\u5982\u5728 views/__init__.py \u4e2d\u5b9a\u4e49\u7684\u4e2d\u95f4\u4ef6\uff0c\u80fd\u5904\u7406\u6240\u6709 URI \u7684 HTTP \u8bf7\u6c42\uff1b\u5728 views/api/__init__.py \u5219\u53ea\u80fd\u5904\u7406 URI \u4e3a /api/### \u7684\u8bf7\u6c42\u3002 Middleware \u9700\u8981\u7ee7\u627f indexpy.http.MiddlewareMixin \uff0c\u6709\u4ee5\u4e0b\u4e09\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u91cd\u5199\u3002 process_request(request) \u6b64\u65b9\u6cd5\u5728\u8bf7\u6c42\u88ab\u5c42\u5c42\u4f20\u9012\u65f6\u8c03\u7528\uff0c\u53ef\u7528\u4e8e\u4fee\u6539 request \u5bf9\u8c61\u4ee5\u4f9b\u540e\u7eed\u5904\u7406\u4f7f\u7528\u3002\u5fc5\u987b\u8fd4\u56de None \uff0c\u5426\u5219\u8fd4\u56de\u503c\u5c06\u4f5c\u4e3a\u6700\u7ec8\u7ed3\u679c\u5e76\u76f4\u63a5\u7ec8\u6b62\u6b64\u6b21\u8bf7\u6c42\u3002 process_response(request, response) \u6b64\u65b9\u6cd5\u5728\u8bf7\u6c42\u88ab\u6b63\u5e38\u5904\u7406\u3001\u5df2\u7ecf\u8fd4\u56de\u54cd\u5e94\u5bf9\u8c61\u540e\u8c03\u7528\uff0c\u5b83\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u53ef\u7528\u7684\u54cd\u5e94\u5bf9\u8c61\uff08\u4e00\u822c\u6765\u8bf4\u76f4\u63a5\u8fd4\u56de response \u5373\u53ef\uff09\u3002 process_exception(request, exception) \u6b64\u65b9\u6cd5\u5728\u4e2d\u95f4\u4ef6\u4e4b\u540e\u7684\u8c03\u7528\u94fe\u8def\u4e0a\u51fa\u73b0\u5f02\u5e38\u65f6\u88ab\u8c03\u7528\u3002\u5f53\u5176\u8fd4\u56de\u503c\u4e3a None \u65f6\uff0c\u5f02\u5e38\u4f1a\u88ab\u539f\u6837\u629b\u51fa\uff0c\u5426\u5219\u5176\u8fd4\u56de\u503c\u5c06\u4f5c\u4e3a\u6b64\u6b21\u8bf7\u6c42\u7684\u54cd\u5e94\u503c\u88ab\u8fd4\u56de\u3002 Notice \u4ee5\u4e0a\u51fd\u6570\u65e0\u8bba\u4f60\u4ee5\u4f55\u79cd\u65b9\u5f0f\u5b9a\u4e49\uff0c\u90fd\u4f1a\u5728\u52a0\u8f7d\u65f6\u88ab\u6539\u9020\u6210\u5f02\u6b65\u51fd\u6570\uff0c\u4f46\u4e3a\u4e86\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u635f\u8017\uff0c\u5c3d\u91cf\u4f7f\u7528 async def \u53bb\u5b9a\u4e49\u5b83\u4eec\u2014\u2014\u9664\u975e\u5728\u5176\u4e2d\u4f7f\u7528\u4e86\u542b\u6709\u963b\u585e IO \u7684\u5176\u4ed6\u51fd\u6570\uff0c\u4f8b\u5982 Django ORM, PonyORM \u7b49\u3002","title":"\u4e2d\u95f4\u4ef6"},{"location":"http/#_7","text":"\u5f88\u591a\u65f6\u5019\uff0c\u5bf9\u4e8e\u540c\u4e00\u4e2a\u7236 URI\uff0c\u9700\u8981\u6709\u591a\u4e2a\u4e2d\u95f4\u4ef6\u53bb\u5904\u7406\u3002\u901a\u8fc7\u6307\u5b9a Middleware \u4e2d\u7684 mounts \u5c5e\u6027\uff0c\u53ef\u4ee5\u4e3a\u4e2d\u95f4\u4ef6\u6307\u5b9a\u5b50\u4e2d\u95f4\u4ef6\u3002\u6267\u884c\u65f6\u4f1a\u5148\u6267\u884c\u7236\u4e2d\u95f4\u4ef6\uff0c\u518d\u6267\u884c\u5b50\u4e2d\u95f4\u4ef6\u3002 Notice \u5b50\u4e2d\u95f4\u4ef6\u7684\u6267\u884c\u987a\u5e8f\u662f\u4ece\u5de6\u5230\u53f3\u3002 from indexpy.http import MiddlewareMixin class ExampleChildMiddleware ( MiddlewareMixin ): async def process_request ( self , request ): print ( \"enter first process request\" ) async def process_response ( self , request , response ): print ( \"enter last process response\" ) return response class Middleware ( MiddlewareMixin ): mounts = ( ExampleChildMiddleware ,) async def process_request ( self , request ): print ( \"example base middleware request\" ) async def process_response ( self , request , response ): print ( \"example base middleware response\" ) return response","title":"\u5b50\u4e2d\u95f4\u4ef6"},{"location":"http/#_8","text":"\u5bf9\u4e8e\u4e00\u4e9b\u6545\u610f\u629b\u51fa\u7684\u5f02\u5e38\uff0cIndex \u63d0\u4f9b\u4e86\u65b9\u6cd5\u8fdb\u884c\u7edf\u4e00\u5904\u7406\u3002 \u4ee5\u4e0b\u4e3a\u6837\u4f8b\uff1a from indexpy import Index from indexpy.types import Request , Response from indexpy.http.responses import PlainTextResponse from indexpy.http import HTTPException app = Index () @app . exception_handler ( 404 ) def not_found ( request : Request , exc : HTTPException ) -> Response : return PlainTextResponse ( \"what do you want to do?\" , status_code = 404 ) @app . exception_handler ( ValueError ) def value_error ( request : Request , exc : ValueError ) -> Response : return PlainTextResponse ( \"Something went wrong with the server.\" , status_code = 500 ) Notice \u5982\u679c\u662f\u6355\u6349 HTTP \u72b6\u6001\u7801\uff0c\u5219\u4f1a\u6355\u6349 indexpy.http.HTTPException \u3002 Tip \u5728\u6b64\u53ef\u4ee5\u6355\u6349\u5305\u62ec\u6302\u8f7d\u5230 Index \u4e2d\u7684\u5176\u4ed6 app \u7684\u5f02\u5e38\u3002\u800c\u4e2d\u95f4\u4ef6\u4e2d\u4ec5\u80fd\u5904\u7406\u901a\u8fc7\u4e2d\u95f4\u4ef6\u7684\u5f02\u5e38\u3002","title":"\u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406"},{"location":"http/#_9","text":"","title":"\u540e\u53f0\u4efb\u52a1"},{"location":"http/#after-response","text":"Index \u63d0\u4f9b\u4e86\u7b80\u5355\u53ef\u7528\u7684\u540e\u53f0\u4efb\u52a1\u7684\u4f7f\u7528\u65b9\u6cd5\u3002 from indexpy.http import HTTPView from indexpy.http import after_response @after_response def only_print ( message : str ) -> None : print ( message ) class HTTP ( HTTPView ): async def get ( self ): \"\"\" welcome page \"\"\" only_print ( \"world\" ) print ( \"hello\" ) return \"\" \u5f97\u76ca\u4e8e contextvars \uff0c\u4f60\u53ef\u4ee5\u5728\u6574\u4e2a HTTP \u8bf7\u6c42\u7684\u5468\u671f\u5185\u7684\u4efb\u4f55\u4f4d\u7f6e\u53bb\u8c03\u7528\u51fd\u6570\uff0c\u5b83\u4eec\u90fd\u5c06\u5728\u54cd\u5e94\u6210\u529f\u5b8c\u6210\u540e\u5f00\u59cb\u6267\u884c\u3002","title":"After Response"},{"location":"http/#finished-response","text":"Index \u63d0\u4f9b\u4e86\u53e6\u4e00\u4e2a\u88c5\u9970\u5668 finished_response \uff0c\u5b83\u7684\u4f7f\u7528\u4e0e after_response \u5b8c\u5168\u76f8\u540c\u3002\u4e0d\u540c\u7684\u662f\uff0c finished_response \u7684\u6267\u884c\u65f6\u95f4\u8282\u70b9\u5728\u6b64\u6b21\u54cd\u5e94\u7ed3\u675f\u540e\uff08\u5305\u62ec after_response \u4efb\u52a1\u6267\u884c\u5b8c\u6210\uff09\uff0c\u65e0\u8bba\u5728\u6b64\u8fc7\u7a0b\u4e2d\u662f\u5426\u5f15\u53d1\u4e86\u9519\u8bef\u5bfc\u81f4\u6d41\u7a0b\u63d0\u524d\u7ed3\u675f\uff0c finished_response \u90fd\u5c06\u6267\u884c\u3002 \u7c97\u6d45\u7684\u7406\u89e3\uff0c after_response \u7528\u4e8e\u8bf7\u6c42\u88ab\u6b63\u5e38\u5904\u7406\u5b8c\u6210\u540e\u6267\u884c\u4e00\u4e9b\u4efb\u52a1\uff0c\u4e00\u65e6\u5904\u7406\u8bf7\u6c42\u7684\u8fc7\u7a0b\u4e2d\u629b\u51fa\u9519\u8bef\uff0c after_response \u5c06\u4e0d\u4f1a\u6267\u884c\u3002\u800c finished_response \u5145\u5f53\u4e86 finally \u7684\u89d2\u8272\uff0c\u65e0\u8bba\u5982\u4f55\uff0c\u5b83\u90fd\u4f1a\u6267\u884c\uff08\u9664\u975e Index \u670d\u52a1\u7ec8\u6b62\uff09\u3002","title":"Finished Response"},{"location":"mount/","text":"\u5c31\u50cf\u5176\u4ed6 ASGI \u6846\u67b6\u4e00\u6837\uff0cIndex \u4e5f\u63d0\u4f9b\u4e86\u6302\u8f7d\u5176\u4ed6\u5e94\u7528\u7684\u80fd\u529b\u2014\u2014ASGI \u5e94\u7528\u6216\u8005 WSGI \u5e94\u7528\u90fd\u53ef\u4ee5\u3002 \u4f7f\u7528 mount from indexpy import Index from otherprogram import app as otherprogram_app from anotherprogram import app as anotherprogram_app app = Index () # mount any wsgi application like flask/django app . mount_wsgi ( \"/hello\" , otherprogram_app ) # mount any asgi application like starlette/responder app . mount_asgi ( \"/hello\" , anotherprogram_app ) \u5c42\u53e0\u7528\u6cd5 \u4f7f\u7528 Index \u7684 mount \u529f\u80fd\u6302\u8f7d\u5176\u4ed6\u5e94\u7528\uff0c\u5f53\u76ee\u6807\u5e94\u7528\u629b\u51fa\u4e00\u4e2a 404 \u4e14\u672a\u8bfb\u53d6 request.body \u7684\u65f6\u5019\uff0cIndex \u5c06\u4f1a\u81ea\u52a8\u5bfb\u627e\u4e0b\u4e00\u4e2a\u5339\u914d\u5bf9\u8c61\uff0c\u76f4\u5230\u7531 Index \u81ea\u8eab\u8fdb\u884c\u5904\u7406\u3002 \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff1a\u63a5\u6536\u5230\u4e00\u4e2a\u8def\u5f84\u4e3a /hello/django/web \u7684\u8bf7\u6c42\uff0c\u5982\u679c otherprogram_app \u629b\u51fa 404\uff0c\u5219\u4e0b\u4e00\u4e2a\u4f1a\u7531 anotherprogram_app \u53bb\u5904\u7406\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u628a otherprogram_app \u7684 404 \u54cd\u5e94\u8fd4\u56de\u7ed9\u7528\u6237 (\u6240\u6709\u57fa\u4e8e starlette \u7684\u6846\u67b6\u90fd\u662f\u76f4\u63a5\u8fd4\u56de 404\uff0c\u65e0\u8bba\u662f FastAPI \u8fd8\u662f responder)\u3002","title":"Mount"},{"location":"mount/#mount","text":"from indexpy import Index from otherprogram import app as otherprogram_app from anotherprogram import app as anotherprogram_app app = Index () # mount any wsgi application like flask/django app . mount_wsgi ( \"/hello\" , otherprogram_app ) # mount any asgi application like starlette/responder app . mount_asgi ( \"/hello\" , anotherprogram_app )","title":"\u4f7f\u7528 mount"},{"location":"mount/#_1","text":"\u4f7f\u7528 Index \u7684 mount \u529f\u80fd\u6302\u8f7d\u5176\u4ed6\u5e94\u7528\uff0c\u5f53\u76ee\u6807\u5e94\u7528\u629b\u51fa\u4e00\u4e2a 404 \u4e14\u672a\u8bfb\u53d6 request.body \u7684\u65f6\u5019\uff0cIndex \u5c06\u4f1a\u81ea\u52a8\u5bfb\u627e\u4e0b\u4e00\u4e2a\u5339\u914d\u5bf9\u8c61\uff0c\u76f4\u5230\u7531 Index \u81ea\u8eab\u8fdb\u884c\u5904\u7406\u3002 \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff1a\u63a5\u6536\u5230\u4e00\u4e2a\u8def\u5f84\u4e3a /hello/django/web \u7684\u8bf7\u6c42\uff0c\u5982\u679c otherprogram_app \u629b\u51fa 404\uff0c\u5219\u4e0b\u4e00\u4e2a\u4f1a\u7531 anotherprogram_app \u53bb\u5904\u7406\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u628a otherprogram_app \u7684 404 \u54cd\u5e94\u8fd4\u56de\u7ed9\u7528\u6237 (\u6240\u6709\u57fa\u4e8e starlette \u7684\u6846\u67b6\u90fd\u662f\u76f4\u63a5\u8fd4\u56de 404\uff0c\u65e0\u8bba\u662f FastAPI \u8fd8\u662f responder)\u3002","title":"\u5c42\u53e0\u7528\u6cd5"},{"location":"openapi/","text":"Index \u4f7f\u7528 pydantic \u7528\u4e8e\u66f4\u8f7b\u677e\u7684\u89e3\u6790 HTTP \u8bf7\u6c42\u4fe1\u606f\uff0c\u5e76\u4e3a\u4e4b\u7ed1\u5b9a\u4e86\u4e00\u5957\u751f\u6210 OpenAPI \u6587\u6863\u7684\u7a0b\u5e8f\u3002 OpenAPI\u6587\u6863 \u5c06 indexpy.openapi.application.OpenAPI \u6302\u8f7d\u8fdb index \u4e2d\u3002 from indexpy import Index from indexpy.openapi import OpenAPI app = Index () app . mount_asgi ( \"/openapi\" , OpenAPI ( \"index.py example\" , \"just a example, power by index.py\" , \"0.1.0\" ) ) \u542f\u52a8 index\uff0c\u8bbf\u95ee\u4f60\u670d\u52a1\u4e0a /openapi/ \u5373\u53ef\u770b\u5230\u751f\u6210\u7684\u6587\u6863\u3002 \u63a5\u53e3\u63cf\u8ff0 \u5bf9\u4e8e\u6240\u6709\u53ef\u5904\u7406 HTTP \u8bf7\u6c42\u7684\u65b9\u6cd5\uff0c\u5b83\u4eec\u7684 __doc__ \u90fd\u4f1a\u7528\u4e8e\u751f\u6210 OpenAPI \u6587\u6863\u3002 \u7b2c\u4e00\u884c\u5c06\u88ab\u5f53\u4f5c\u6982\u8981\u63cf\u8ff0\uff0c\u6240\u4ee5\u5c3d\u91cf\u7b80\u660e\u627c\u8981\uff0c\u4e0d\u8981\u592a\u957f\u3002 \u7a7a\u4e00\u884c\u4e4b\u540e\uff0c\u540e\u7eed\u7684\u6587\u5b57\u90fd\u4f1a\u88ab\u5f53\u4f5c\u8be6\u7ec6\u4ecb\u7ecd\uff0c\u88ab\u5b89\u7f6e\u5728 OpenAPI \u6587\u6863\u4e2d\u3002 \u8bf7\u6c42 \u5f53\u4f60\u4f7f\u7528 pydantic.BaseModel \u53bb\u89e3\u6790\u8bf7\u6c42\u65f6\uff0c\u8bf7\u6c42\u6587\u6863\u5c06\u88ab\u81ea\u52a8\u751f\u6210\u3002 \u54cd\u5e94 \u4e3a\u4e86\u63cf\u8ff0\u4e0d\u540c\u72b6\u6001\u7801\u7684\u54cd\u5e94\u7ed3\u679c\uff0cIndex \u4f7f\u7528\u88c5\u9970\u5668\u63cf\u8ff0\uff0c\u800c\u4e0d\u662f\u7c7b\u578b\u6ce8\u89e3\u3002\u65e2\u53ef\u4ee5\u4f7f\u7528 models \u63cf\u8ff0\u54cd\u5e94(\u4ec5\u652f\u6301 application/json)\uff0c\u4ea6\u53ef\u4ee5\u76f4\u63a5\u4f20\u9012 OpenAPI \u6587\u6863\u5b57\u7b26\u4e32\uff08\u5f53\u4f60\u4e0d\u60f3\u8fd4\u56de\u4e00\u4e2a application/json \u7c7b\u578b\u7684\u54cd\u5e94\u65f6\uff09\u3002 Notice \u6b64\u529f\u80fd\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u9664\u751f\u6210OpenAPI\u6587\u6863\u7684\u4f5c\u7528\u5916\uff0c\u65e0\u5176\u4ed6\u4f5c\u7528\u3002 \u672a\u6765\u6216\u8bb8\u4f1a\u589e\u52a0 mock \u529f\u80fd\u3002 from indexpy.http import HTTPView from indexpy.test import TestView from indexpy.http.responses import TemplateResponse from indexpy.openapi import describe from pydantic import BaseModel , Field class Hello ( BaseModel ): name : str = Field ( \"Aber\" , description = \"your name\" ) class Message ( BaseModel ): \"\"\"your message\"\"\" name : str = Field ( ... , description = \"your name\" ) text : str = Field ( ... , description = \"what are you want to say?\" ) class MessageResponse ( BaseModel ): \"\"\"message response\"\"\" message : Message class HTTP ( HTTPView ): @describe ( 200 , \"\"\" image/png: schema: type: string format: binary \"\"\" , ) @describe ( 403 , \"\"\"text/plain: schema: type: string example: pong \"\"\" , ) async def get ( self , query : Hello ): \"\"\" welcome page \"\"\" ... @describe ( 200 , MessageResponse ) @describe ( 201 , None ) async def post ( self , body : Message ): \"\"\" echo your message just echo your message. \"\"\" return { \"message\" : body . dict ()}, 200 , { \"server\" : \"index.py\" } Tags OpenAPI \u7684 Tags \u662f\u4e00\u4e2a\u6709\u7528\u7684\u529f\u80fd\uff0c\u5728 Index \u91cc\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u6765\u6307\u5b9a URL \u7684 tags app . mount_asgi ( \"/openapi\" , OpenAPI ( \"index.py example\" , \"just a example, power by index.py\" , __version__ , tags = { \"something\" : { \"description\" : \"test over two tags in one path\" , \"paths\" : [ \"/about/\" , \"/file\" , \"/\" ], }, \"about\" : { \"description\" : \"about page\" , \"paths\" : [ \"/about/\" , \"/about/me\" ]}, \"file\" : { \"description\" : \"get/upload file api\" , \"paths\" : [ \"/file\" ]}, }, ) )","title":"OpenAPI"},{"location":"openapi/#openapi","text":"\u5c06 indexpy.openapi.application.OpenAPI \u6302\u8f7d\u8fdb index \u4e2d\u3002 from indexpy import Index from indexpy.openapi import OpenAPI app = Index () app . mount_asgi ( \"/openapi\" , OpenAPI ( \"index.py example\" , \"just a example, power by index.py\" , \"0.1.0\" ) ) \u542f\u52a8 index\uff0c\u8bbf\u95ee\u4f60\u670d\u52a1\u4e0a /openapi/ \u5373\u53ef\u770b\u5230\u751f\u6210\u7684\u6587\u6863\u3002","title":"OpenAPI\u6587\u6863"},{"location":"openapi/#_1","text":"\u5bf9\u4e8e\u6240\u6709\u53ef\u5904\u7406 HTTP \u8bf7\u6c42\u7684\u65b9\u6cd5\uff0c\u5b83\u4eec\u7684 __doc__ \u90fd\u4f1a\u7528\u4e8e\u751f\u6210 OpenAPI \u6587\u6863\u3002 \u7b2c\u4e00\u884c\u5c06\u88ab\u5f53\u4f5c\u6982\u8981\u63cf\u8ff0\uff0c\u6240\u4ee5\u5c3d\u91cf\u7b80\u660e\u627c\u8981\uff0c\u4e0d\u8981\u592a\u957f\u3002 \u7a7a\u4e00\u884c\u4e4b\u540e\uff0c\u540e\u7eed\u7684\u6587\u5b57\u90fd\u4f1a\u88ab\u5f53\u4f5c\u8be6\u7ec6\u4ecb\u7ecd\uff0c\u88ab\u5b89\u7f6e\u5728 OpenAPI \u6587\u6863\u4e2d\u3002","title":"\u63a5\u53e3\u63cf\u8ff0"},{"location":"openapi/#_2","text":"\u5f53\u4f60\u4f7f\u7528 pydantic.BaseModel \u53bb\u89e3\u6790\u8bf7\u6c42\u65f6\uff0c\u8bf7\u6c42\u6587\u6863\u5c06\u88ab\u81ea\u52a8\u751f\u6210\u3002","title":"\u8bf7\u6c42"},{"location":"openapi/#_3","text":"\u4e3a\u4e86\u63cf\u8ff0\u4e0d\u540c\u72b6\u6001\u7801\u7684\u54cd\u5e94\u7ed3\u679c\uff0cIndex \u4f7f\u7528\u88c5\u9970\u5668\u63cf\u8ff0\uff0c\u800c\u4e0d\u662f\u7c7b\u578b\u6ce8\u89e3\u3002\u65e2\u53ef\u4ee5\u4f7f\u7528 models \u63cf\u8ff0\u54cd\u5e94(\u4ec5\u652f\u6301 application/json)\uff0c\u4ea6\u53ef\u4ee5\u76f4\u63a5\u4f20\u9012 OpenAPI \u6587\u6863\u5b57\u7b26\u4e32\uff08\u5f53\u4f60\u4e0d\u60f3\u8fd4\u56de\u4e00\u4e2a application/json \u7c7b\u578b\u7684\u54cd\u5e94\u65f6\uff09\u3002 Notice \u6b64\u529f\u80fd\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u9664\u751f\u6210OpenAPI\u6587\u6863\u7684\u4f5c\u7528\u5916\uff0c\u65e0\u5176\u4ed6\u4f5c\u7528\u3002 \u672a\u6765\u6216\u8bb8\u4f1a\u589e\u52a0 mock \u529f\u80fd\u3002 from indexpy.http import HTTPView from indexpy.test import TestView from indexpy.http.responses import TemplateResponse from indexpy.openapi import describe from pydantic import BaseModel , Field class Hello ( BaseModel ): name : str = Field ( \"Aber\" , description = \"your name\" ) class Message ( BaseModel ): \"\"\"your message\"\"\" name : str = Field ( ... , description = \"your name\" ) text : str = Field ( ... , description = \"what are you want to say?\" ) class MessageResponse ( BaseModel ): \"\"\"message response\"\"\" message : Message class HTTP ( HTTPView ): @describe ( 200 , \"\"\" image/png: schema: type: string format: binary \"\"\" , ) @describe ( 403 , \"\"\"text/plain: schema: type: string example: pong \"\"\" , ) async def get ( self , query : Hello ): \"\"\" welcome page \"\"\" ... @describe ( 200 , MessageResponse ) @describe ( 201 , None ) async def post ( self , body : Message ): \"\"\" echo your message just echo your message. \"\"\" return { \"message\" : body . dict ()}, 200 , { \"server\" : \"index.py\" }","title":"\u54cd\u5e94"},{"location":"openapi/#tags","text":"OpenAPI \u7684 Tags \u662f\u4e00\u4e2a\u6709\u7528\u7684\u529f\u80fd\uff0c\u5728 Index \u91cc\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u6765\u6307\u5b9a URL \u7684 tags app . mount_asgi ( \"/openapi\" , OpenAPI ( \"index.py example\" , \"just a example, power by index.py\" , __version__ , tags = { \"something\" : { \"description\" : \"test over two tags in one path\" , \"paths\" : [ \"/about/\" , \"/file\" , \"/\" ], }, \"about\" : { \"description\" : \"about page\" , \"paths\" : [ \"/about/\" , \"/about/me\" ]}, \"file\" : { \"description\" : \"get/upload file api\" , \"paths\" : [ \"/file\" ]}, }, ) )","title":"Tags"},{"location":"test/","text":"Index \u501f\u52a9\u4e86 starlette \u7684 Test Client \u7528\u4ee5\u63d0\u4f9b\u6d4b\u8bd5\u80fd\u529b\uff0c\u5e76\u7531 Pytest \u63d0\u4f9b\u5f3a\u529b\u7684\u6d4b\u8bd5\u652f\u6301\u3002 \u5728\u5b89\u88c5\u65f6\u6307\u5b9a index.py[test] \u4ee5\u5b89\u88c5 requests \u4e0e pytest \u4f5c\u4e3a\u9ed8\u8ba4\u7684\u6d4b\u8bd5\u7ec4\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9\u5176\u4ed6\u4efb\u4f55\u4f60\u559c\u6b22\u7684\u6d4b\u8bd5\u7ec4\u4ef6\uff0c\u8fd9\u4e0e Index \u7684\u6838\u5fc3\u529f\u80fd\u5e76\u4e0d\u662f\u5f3a\u6346\u7ed1\u7684\u3002 TestView Notice \u5728\u6d4b\u8bd5\u7a0b\u5e8f\u91cc\uff0c\u6240\u6709\u7684 HTTP \u8bf7\u6c42\u3001\u53d1\u9001 ws \u6570\u636e\u3001\u63a5\u6536 ws \u6570\u636e\u90fd\u662f\u540c\u6b65\u7684\u3002 TestView \u505a\u4e86\u8f7b\u5ea6\u7684\u5c01\u88c5\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u5728\u9700\u8981\u6d4b\u8bd5\u7684 HTTP/Socket \u7684\u540c\u4e00\u4e2a\u6587\u4ef6\u5185\u76f4\u63a5\u7f16\u5199\u6d4b\u8bd5\u7a0b\u5e8f\uff0c\u4e0d\u9700\u8981\u6307\u5b9a\u6d4b\u8bd5\u7684 URI\u3002 Test Client \u7684 HTTP \u8bf7\u6c42\u90e8\u5206\u662f\u57fa\u4e8e requests\uff0c\u4fdd\u6301\u4e86 requests \u7684\u6240\u6709\u7684 API\uff0c\u6545\u800c\u4f60\u53ef\u4ee5\u50cf\u4f7f\u7528 requests \u4e00\u6837\u53bb\u6d4b\u8bd5\u4f60\u7684\u7a0b\u5e8f\u3002 # example/views/index.py from indexpy.test import TestView ... class Test ( TestView ): def test_get ( self ): resp = self . client . get () assert resp . status_code == 200 resp = self . client . get ( params = { \"name\" : \"darling\" }) assert resp . status_code == 200 def test_post ( self ): resp = self . client . post () assert resp . status_code == 400 resp = self . client . post ( data = { \"name\" : \"Aber\" , \"text\" : \"message\" }) assert resp . status_code == 200 \u800c Test Client \u7684 websocket \u8bf7\u6c42\u90e8\u5206\uff0c\u5c31\u50cf\u5728 Index \u4e2d\u4f7f\u7528 websocket \u4e00\u6837\uff0c\u540c\u6837\u6709\u4e09\u5bf9\u53d1\u9001/\u63a5\u6536\u6570\u636e\u7684\u51fd\u6570\u3002 \u4f60\u53ea\u9700\u8981\u4f7f\u7528 self.client.websocket_connect() \u5373\u53ef\u8fde\u63a5\u5e76\u6d4b\u8bd5\u3002 class Test ( TestView ): def test_chat ( self ) -> None : with self . client . websocket_connect () as ws : ws . send_text ( \"hello\" ) assert ws . receive_json ()[ \"message\" ] == \"hello\"","title":"Test"},{"location":"test/#testview","text":"Notice \u5728\u6d4b\u8bd5\u7a0b\u5e8f\u91cc\uff0c\u6240\u6709\u7684 HTTP \u8bf7\u6c42\u3001\u53d1\u9001 ws \u6570\u636e\u3001\u63a5\u6536 ws \u6570\u636e\u90fd\u662f\u540c\u6b65\u7684\u3002 TestView \u505a\u4e86\u8f7b\u5ea6\u7684\u5c01\u88c5\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u5728\u9700\u8981\u6d4b\u8bd5\u7684 HTTP/Socket \u7684\u540c\u4e00\u4e2a\u6587\u4ef6\u5185\u76f4\u63a5\u7f16\u5199\u6d4b\u8bd5\u7a0b\u5e8f\uff0c\u4e0d\u9700\u8981\u6307\u5b9a\u6d4b\u8bd5\u7684 URI\u3002 Test Client \u7684 HTTP \u8bf7\u6c42\u90e8\u5206\u662f\u57fa\u4e8e requests\uff0c\u4fdd\u6301\u4e86 requests \u7684\u6240\u6709\u7684 API\uff0c\u6545\u800c\u4f60\u53ef\u4ee5\u50cf\u4f7f\u7528 requests \u4e00\u6837\u53bb\u6d4b\u8bd5\u4f60\u7684\u7a0b\u5e8f\u3002 # example/views/index.py from indexpy.test import TestView ... class Test ( TestView ): def test_get ( self ): resp = self . client . get () assert resp . status_code == 200 resp = self . client . get ( params = { \"name\" : \"darling\" }) assert resp . status_code == 200 def test_post ( self ): resp = self . client . post () assert resp . status_code == 400 resp = self . client . post ( data = { \"name\" : \"Aber\" , \"text\" : \"message\" }) assert resp . status_code == 200 \u800c Test Client \u7684 websocket \u8bf7\u6c42\u90e8\u5206\uff0c\u5c31\u50cf\u5728 Index \u4e2d\u4f7f\u7528 websocket \u4e00\u6837\uff0c\u540c\u6837\u6709\u4e09\u5bf9\u53d1\u9001/\u63a5\u6536\u6570\u636e\u7684\u51fd\u6570\u3002 \u4f60\u53ea\u9700\u8981\u4f7f\u7528 self.client.websocket_connect() \u5373\u53ef\u8fde\u63a5\u5e76\u6d4b\u8bd5\u3002 class Test ( TestView ): def test_chat ( self ) -> None : with self . client . websocket_connect () as ws : ws . send_text ( \"hello\" ) assert ws . receive_json ()[ \"message\" ] == \"hello\"","title":"TestView"},{"location":"websocket/","text":"Websocket \u7684\u5904\u7406\u7a0b\u5e8f\u7f16\u5199\u4e0e HTTP \u7c7b\u4f3c\uff0c\u540c\u6837\u4f7f\u7528\u6587\u4ef6\u8def\u5f84\u6620\u5c04\u5230 URI \u7684\u8bbe\u8ba1\u3002 \u7a0d\u6709\u4e0d\u540c\u7684\u662f Websocket \u7684\u5904\u7406\u7c7b\uff0c\u9700\u8981\u4ece indexpy.websocket.SocketView \u7ee7\u627f\u800c\u6765\uff0c\u7c7b\u540d\u5fc5\u987b\u662f Socket \u3002 Socket \u5b83\u6709\u4e00\u4e2a\u7c7b\u5c5e\u6027\uff1a encoding \uff0c\u6b64\u5c5e\u6027\u6709\u4e09\u4e2a\u53ef\u7528\u503c\u2014\u2014 \"text\" \u3001 \"bytes\" \u3001 \"json\" \uff0c\u5c06\u51b3\u5b9a\u63a5\u6536\u5230\u7684 websocket \u6570\u636e\u4ee5\u4f55\u79cd\u7f16\u7801\u88ab\u89e3\u6790\u3002 \u5b83\u6709\u4e09\u4e2a\u65b9\u6cd5\u53ef\u7528\u4e8e\u5e38\u89c4\u4f7f\u7528\uff0c\u5206\u522b\u5bf9\u5e94\u4e00\u4e2a Websocket \u8fde\u63a5\u7684\u4e0d\u540c\u72b6\u6001\uff1a on_connect() \u8fd9\u4e2a\u51fd\u6570\u5728\u4e00\u4e2a websocket \u8fde\u63a5\u88ab\u5efa\u7acb\u540e\u8c03\u7528\uff0c\u4f60\u5fc5\u987b\u5728\u5176\u4e2d\u663e\u5f0f\u7684\u8c03\u7528 await self.websocket.accept() \u6765\u63a5\u53d7 websocket \u8fde\u63a5\u7684\u5efa\u7acb\u3002 on_receive(data: typing.Any) \u8fd9\u4e2a\u51fd\u6570\u5728\u63a5\u53d7\u4e00\u6761\u5b8c\u6574\u7684\u6570\u636e\u65f6\u88ab\u8c03\u7528\uff08\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u636e\u5e27\uff09\uff0c data \u7684\u7c7b\u578b\u7531\u7c7b\u5c5e\u6027 encoding \u63a7\u5236\u3002 on_disconnect(close_code: int) \u8fd9\u4e2a\u51fd\u6570\u5728\u4e00\u4e2a websocket \u5373\u5c06\u88ab\u5173\u95ed\u65f6\u8c03\u7528\uff0c\u4f60\u5fc5\u987b\u5728\u5176\u4e2d\u663e\u5f0f\u7684\u8c03\u7528 await self.websocket.close(code=close_code) \u7528\u4ee5\u5173\u95ed websocket \u8fde\u63a5\u3002 Notice \u8fd9\u4e09\u4e2a\u51fd\u6570\u5fc5\u987b\u90fd\u4ee5 async def \u7684\u65b9\u5f0f\u88ab\u5b9a\u4e49\u4e3a\u5f02\u6b65\u51fd\u6570 WebSocket \u5bf9\u8c61 \u6bcf\u4e2a websocket \u8fde\u63a5\u90fd\u4f1a\u5bf9\u5e94\u4e00\u4e2a WebSocket \u5bf9\u8c61\uff0c\u5b83\u62e5\u6709\u4e00\u5bf9 receive / send \u51fd\u6570\u3002\u4f46\u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u5c01\u88c5\u4e86\u4e09\u5bf9 recv/send \u51fd\u6570\u3002 receive_byte / send_byte : \u63a5\u6536/\u53d1\u9001 bytes \u7c7b\u578b\u7684\u6570\u636e receive_text / send_text : \u63a5\u6536/\u53d1\u9001 text \u7c7b\u578b\u7684\u6570\u636e receive_json / send_json : \u63a5\u6536/\u53d1\u9001 bytes / text \u7c7b\u578b\u7684\u6570\u636e\uff0c\u4f46\u4ee5 JSON \u683c\u5f0f\u4f5c\u4e3a\u4e2d\u8f6c\u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u76f4\u63a5\u53d1\u9001/\u63a5\u6536\u4efb\u4f55\u80fd\u88ab json.dumps / json.loads \u89e3\u6790\u7684\u5bf9\u8c61\u3002","title":"WebSocket"},{"location":"websocket/#socket","text":"\u5b83\u6709\u4e00\u4e2a\u7c7b\u5c5e\u6027\uff1a encoding \uff0c\u6b64\u5c5e\u6027\u6709\u4e09\u4e2a\u53ef\u7528\u503c\u2014\u2014 \"text\" \u3001 \"bytes\" \u3001 \"json\" \uff0c\u5c06\u51b3\u5b9a\u63a5\u6536\u5230\u7684 websocket \u6570\u636e\u4ee5\u4f55\u79cd\u7f16\u7801\u88ab\u89e3\u6790\u3002 \u5b83\u6709\u4e09\u4e2a\u65b9\u6cd5\u53ef\u7528\u4e8e\u5e38\u89c4\u4f7f\u7528\uff0c\u5206\u522b\u5bf9\u5e94\u4e00\u4e2a Websocket \u8fde\u63a5\u7684\u4e0d\u540c\u72b6\u6001\uff1a on_connect() \u8fd9\u4e2a\u51fd\u6570\u5728\u4e00\u4e2a websocket \u8fde\u63a5\u88ab\u5efa\u7acb\u540e\u8c03\u7528\uff0c\u4f60\u5fc5\u987b\u5728\u5176\u4e2d\u663e\u5f0f\u7684\u8c03\u7528 await self.websocket.accept() \u6765\u63a5\u53d7 websocket \u8fde\u63a5\u7684\u5efa\u7acb\u3002 on_receive(data: typing.Any) \u8fd9\u4e2a\u51fd\u6570\u5728\u63a5\u53d7\u4e00\u6761\u5b8c\u6574\u7684\u6570\u636e\u65f6\u88ab\u8c03\u7528\uff08\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u636e\u5e27\uff09\uff0c data \u7684\u7c7b\u578b\u7531\u7c7b\u5c5e\u6027 encoding \u63a7\u5236\u3002 on_disconnect(close_code: int) \u8fd9\u4e2a\u51fd\u6570\u5728\u4e00\u4e2a websocket \u5373\u5c06\u88ab\u5173\u95ed\u65f6\u8c03\u7528\uff0c\u4f60\u5fc5\u987b\u5728\u5176\u4e2d\u663e\u5f0f\u7684\u8c03\u7528 await self.websocket.close(code=close_code) \u7528\u4ee5\u5173\u95ed websocket \u8fde\u63a5\u3002 Notice \u8fd9\u4e09\u4e2a\u51fd\u6570\u5fc5\u987b\u90fd\u4ee5 async def \u7684\u65b9\u5f0f\u88ab\u5b9a\u4e49\u4e3a\u5f02\u6b65\u51fd\u6570","title":"Socket"},{"location":"websocket/#websocket","text":"\u6bcf\u4e2a websocket \u8fde\u63a5\u90fd\u4f1a\u5bf9\u5e94\u4e00\u4e2a WebSocket \u5bf9\u8c61\uff0c\u5b83\u62e5\u6709\u4e00\u5bf9 receive / send \u51fd\u6570\u3002\u4f46\u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u5c01\u88c5\u4e86\u4e09\u5bf9 recv/send \u51fd\u6570\u3002 receive_byte / send_byte : \u63a5\u6536/\u53d1\u9001 bytes \u7c7b\u578b\u7684\u6570\u636e receive_text / send_text : \u63a5\u6536/\u53d1\u9001 text \u7c7b\u578b\u7684\u6570\u636e receive_json / send_json : \u63a5\u6536/\u53d1\u9001 bytes / text \u7c7b\u578b\u7684\u6570\u636e\uff0c\u4f46\u4ee5 JSON \u683c\u5f0f\u4f5c\u4e3a\u4e2d\u8f6c\u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u76f4\u63a5\u53d1\u9001/\u63a5\u6536\u4efb\u4f55\u80fd\u88ab json.dumps / json.loads \u89e3\u6790\u7684\u5bf9\u8c61\u3002","title":"WebSocket \u5bf9\u8c61"},{"location":"config/","text":"Index \u5185\u7f6e\u7684\u914d\u7f6e\u7c7b indexpy.config.Config \u662f\u4e00\u4e2a\u5355\u4f8b\u7c7b\uff0c\u4f60\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u4f7f\u7528 Config() \uff0c\u5b83\u4eec\u90fd\u5c06\u8fd4\u56de\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002 \u6240\u6709\u914d\u7f6e\u90fd\u662f\u5927\u5c0f\u5199\u65e0\u5173\u7684\uff0c Config().KEY \u7b49\u4ef7\u4e8e Config().Key \u548c Config().key \u3002 \u5728 Index \u542f\u52a8\u65f6\uff0c\u5b83\u5c06\u81ea\u52a8\u4ece\u73af\u5883\u53d8\u91cf\u4e0e\u9879\u76ee\u6839\u76ee\u5f55\u4e0b index.yaml / index.yml / index.json \u91cc\u8bfb\u53d6\u914d\u7f6e\u3002 Notice \u5728 Index \u8fd0\u884c\u4e4b\u540e\u66f4\u6539\u914d\u7f6e\u6587\u4ef6\u6216\u8005\u73af\u5883\u53d8\u91cf\u5e76\u4e0d\u4f1a\u89e6\u53d1 Index \u7684\u70ed\u66f4\u65b0\uff0c\u4f60\u53ea\u80fd\u901a\u8fc7\u91cd\u542f\u6765\u4f7f\u7528\u65b0\u914d\u7f6e\u542f\u52a8 Index\u3002 \u73af\u5883\u53d8\u91cf Index \u5728\u542f\u52a8\u65f6\u5c06\u4ece\u73af\u5883\u53d8\u91cf\u91cc\u8bfb\u53d6 INDEX_DEBUG \u548c INDEX_ENV \u4e24\u4e2a\u503c. INDEX_DEBUG \u7684\u503c\u4e3a True \u6216\u8005 on \u5219 DEBUG \u4e3a\u771f\uff0c\u5176\u4ed6\u4efb\u4f55\u503c\u90fd\u662f\u5047\u3002 INDEX_ENV \u7684\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u5b57\u7b26\u4e32\uff0c\u5b83\u5bf9\u5e94 ENV \u3002 Tip \u73af\u5883\u53d8\u91cf\u5728\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u4e4b\u540e\u8bfb\u53d6\uff0c\u8fd9\u610f\u5473\u4f60\u53ef\u4ee5\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u7684\u914d\u7f6e\u6765\u8986\u76d6\u914d\u7f6e\u6587\u4ef6\u91cc\u7684\u914d\u7f6e\u3002 \u914d\u7f6e\u6587\u4ef6\u793a\u4f8b # overwrite default value to this program app : \"example:app\" port : 4918 allowed_hosts : [ \"localhost\" ] cors_allow_origins : [ \"*\" ] cors_allow_methods : [ \"GET\" ] cors_allow_credentials : false templates : [ \"templates\" , \"other_templates\" ] # use in development dev : \"host\" : \"localhost\" \"debug\" : true \"log_level\" : \"debug\" # use in production pro : \"host\" : \"127.0.0.1\" \"port\" : \"41900\" \"log_level\" : \"warning\" # use in test test : log_level : \"debug\" \u4ec0\u4e48\u662f\u914d\u7f6e\u9694\u79bb\uff1f \u540c\u4e00\u4e2a\u9879\u76ee\uff0c\u4e0d\u540c\u73af\u5883\u4e0b\u7684\u90e8\u5206\u914d\u7f6e\u53ef\u80fd\u4e0d\u540c\u3002Index \u5185\u7f6e\u7684\u914d\u7f6e\u5141\u8bb8\u4f7f\u7528 ENV \u6765\u6307\u5b9a\u5f53\u524d\u4f7f\u7528\u7684\u914d\u7f6e\u73af\u5883\u3002 \u4ee5\u4e0a\u9762\u7684\u914d\u7f6e\u6587\u4ef6\u4e3a\u4f8b\uff0c\u5f53 ENV \u7684\u503c\u4e3a \"dev\" \u65f6\uff0c Config().DEBUG \u4f1a\u4e3a True \u3002 \u5f53\u4f60\u6307\u5b9a ENV \u7684\u503c\u4e3a \"pro\" \u65f6, \u5728\u4f7f\u7528 Config().DEBUG \u7684\u65f6\u5019\uff0c\u5b83\u5c06\u5148\u4ece \"pro\" \u4e2d\u67e5\u627e \"debug\" \uff08\u4e0d\u5206\u5927\u5c0f\u5199\uff09\u3002\u5f53\u6ca1\u6709\u627e\u5230\u65f6\uff0c\u7ee7\u7eed\u5411\u4e0a\u67e5\u627e\u3002\u7136\u800c\u8fd9\u4efd\u914d\u7f6e\u6587\u4ef6\u5e76\u6ca1\u6709\u5728\u6839\u914d\u7f6e\u4e2d\u6307\u5b9a \"debug\" \uff0c\u6240\u4ee5 Config().DEBUG \u4f1a\u4f7f\u7528\u9ed8\u8ba4\u503c False \u3002 \u5176\u4ed6\u7684\u914d\u7f6e\u540c\u7406\u3002","title":"\u4ecb\u7ecd"},{"location":"config/#_1","text":"Index \u5728\u542f\u52a8\u65f6\u5c06\u4ece\u73af\u5883\u53d8\u91cf\u91cc\u8bfb\u53d6 INDEX_DEBUG \u548c INDEX_ENV \u4e24\u4e2a\u503c. INDEX_DEBUG \u7684\u503c\u4e3a True \u6216\u8005 on \u5219 DEBUG \u4e3a\u771f\uff0c\u5176\u4ed6\u4efb\u4f55\u503c\u90fd\u662f\u5047\u3002 INDEX_ENV \u7684\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u5b57\u7b26\u4e32\uff0c\u5b83\u5bf9\u5e94 ENV \u3002 Tip \u73af\u5883\u53d8\u91cf\u5728\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u4e4b\u540e\u8bfb\u53d6\uff0c\u8fd9\u610f\u5473\u4f60\u53ef\u4ee5\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u7684\u914d\u7f6e\u6765\u8986\u76d6\u914d\u7f6e\u6587\u4ef6\u91cc\u7684\u914d\u7f6e\u3002","title":"\u73af\u5883\u53d8\u91cf"},{"location":"config/#_2","text":"# overwrite default value to this program app : \"example:app\" port : 4918 allowed_hosts : [ \"localhost\" ] cors_allow_origins : [ \"*\" ] cors_allow_methods : [ \"GET\" ] cors_allow_credentials : false templates : [ \"templates\" , \"other_templates\" ] # use in development dev : \"host\" : \"localhost\" \"debug\" : true \"log_level\" : \"debug\" # use in production pro : \"host\" : \"127.0.0.1\" \"port\" : \"41900\" \"log_level\" : \"warning\" # use in test test : log_level : \"debug\"","title":"\u914d\u7f6e\u6587\u4ef6\u793a\u4f8b"},{"location":"config/#_3","text":"\u540c\u4e00\u4e2a\u9879\u76ee\uff0c\u4e0d\u540c\u73af\u5883\u4e0b\u7684\u90e8\u5206\u914d\u7f6e\u53ef\u80fd\u4e0d\u540c\u3002Index \u5185\u7f6e\u7684\u914d\u7f6e\u5141\u8bb8\u4f7f\u7528 ENV \u6765\u6307\u5b9a\u5f53\u524d\u4f7f\u7528\u7684\u914d\u7f6e\u73af\u5883\u3002 \u4ee5\u4e0a\u9762\u7684\u914d\u7f6e\u6587\u4ef6\u4e3a\u4f8b\uff0c\u5f53 ENV \u7684\u503c\u4e3a \"dev\" \u65f6\uff0c Config().DEBUG \u4f1a\u4e3a True \u3002 \u5f53\u4f60\u6307\u5b9a ENV \u7684\u503c\u4e3a \"pro\" \u65f6, \u5728\u4f7f\u7528 Config().DEBUG \u7684\u65f6\u5019\uff0c\u5b83\u5c06\u5148\u4ece \"pro\" \u4e2d\u67e5\u627e \"debug\" \uff08\u4e0d\u5206\u5927\u5c0f\u5199\uff09\u3002\u5f53\u6ca1\u6709\u627e\u5230\u65f6\uff0c\u7ee7\u7eed\u5411\u4e0a\u67e5\u627e\u3002\u7136\u800c\u8fd9\u4efd\u914d\u7f6e\u6587\u4ef6\u5e76\u6ca1\u6709\u5728\u6839\u914d\u7f6e\u4e2d\u6307\u5b9a \"debug\" \uff0c\u6240\u4ee5 Config().DEBUG \u4f1a\u4f7f\u7528\u9ed8\u8ba4\u503c False \u3002 \u5176\u4ed6\u7684\u914d\u7f6e\u540c\u7406\u3002","title":"\u4ec0\u4e48\u662f\u914d\u7f6e\u9694\u79bb\uff1f"},{"location":"config/list/","text":"ENV \u9ed8\u8ba4\u503c: \"dev\" env \u662f\u4e00\u4e2a\u5341\u5206\u91cd\u8981\u7684\u914d\u7f6e\uff0c\u5b83\u5141\u8bb8 \u81ea\u52a8\u4f7f\u7528\u5bf9\u5e94\u73af\u5883\u4e0b\u7684\u914d\u7f6e \u3002 \u5b83\u5c06\u8bfb\u53d6\u73af\u5883\u53d8\u91cf\u91cc INDEX_ENV \u7684\u503c\uff0c\u53ef\u4ee5\u4f46\u4e0d\u63a8\u8350\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u3002 DEBUG \u9ed8\u8ba4\u503c: False \u5728\u73af\u5883\u53d8\u91cf\u91cc INDEX_DEBUG \u4e3a \"on\" \u6216\u8005 \"True\" \u65f6\uff0c DEBUG \u4e3a\u771f\uff1b\u8be5\u503c\u540c\u6837\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u3002 \u5f53 DEBUG \u4e3a\u771f\u65f6\uff0c\u5c06\u8be6\u7ec6\u7684\u663e\u793a 500 \u9519\u8bef\u4fe1\u606f\u3002 APP \u9ed8\u8ba4\u503c: indexpy:app app \u5141\u8bb8\u81ea\u5b9a\u4e49 serve / gunicorn / test \u547d\u4ee4\u4e2d\u7684\u9ed8\u8ba4 app \u3002 LOG_LEVEL \u9ed8\u8ba4\u503c: \"info\" log_level \u6709\u4e94\u4e2a\u53ef\u7528\u503c, \u4e0b\u9762\u662f\u5b83\u4e0e logging \u7684\u7b49\u7ea7\u5bf9\u5e94\u8868 log_level logging \"critical\" logging.CRITICAL \"error\" logging.ERROR \"warning\" logging.WARNING \"info\" logging.INFO \"debug\" logging.DEBUG HOST \u9ed8\u8ba4\u503c: \"127.0.0.1\" host \u6307\u5b9a Index \u76d1\u542c\u7684\u5730\u5740\u3002 PORT \u9ed8\u8ba4\u503c: 4190 port \u6307\u5b9a Index \u76d1\u542c\u7684\u7aef\u53e3\u3002 ALLOWED_HOSTS \u9ed8\u8ba4\u503c: [\"*\"] allowed_hosts \u7528\u4e8e\u6307\u5b9a Index \u5141\u8bb8\u88ab\u8bbf\u95ee\u7684 HOST\u3002 \u4e00\u4e9b\u4f8b\u5b50: [\"*\"] \u5141\u8bb8\u6240\u6709\u7684 HOST \u8bbf\u95ee [\"example.com\", \"*example.com\"] \u5141\u8bb8 example.com \u4ee5\u53ca example.com \u7684\u5b50\u57df\u540d\u8bbf\u95ee\u3002 [\"example.com\", \"test.com\"] \u5141\u8bb8 example.com \u4e0e test.com \u7684\u8bbf\u95ee\u3002 FORCE_SSL \u9ed8\u8ba4\u503c: False force_ssl \u5141\u8bb8 HTTP/WS \u5f3a\u5236\u8df3\u8f6c\u5230 HTTPS/WSS\u3002 AUTORELOAD \u9ed8\u8ba4\u503c: True autoreload \u4e3a\u771f\u65f6\uff0c\u4f7f\u7528 index-cli serve \u6216 index-cli gunicorn start \u65f6\uff0c\u5c06\u4f1a\u76d1\u542c\u5f53\u524d\u7684\u9879\u76ee\u4fee\u6539\uff0c\u81ea\u52a8\u91cd\u542f\u670d\u52a1\u3002 ALLOW_UNDERLINE \u9ed8\u8ba4\u503c: False \u7531\u4e8e Python \u7684 module \u53ea\u5141\u8bb8\u5b57\u6bcd\u3001\u6570\u5b57\u4e0e\u4e0b\u5212\u7ebf\uff0c\u4f46 URI \u4e2d\u51fa\u73b0\u51fa\u73b0\u4e0b\u5212\u7ebf\u662f\u4e0d\u63a8\u8350\u7684\uff0c\u6240\u4ee5\u6709\u4e86\u8fd9\u4e2a\u914d\u7f6e\u9009\u9879\u3002 \u5f53 allow_underline \u4e3a\u5047\u65f6\uff0c\u5982\u679c _ \u5b58\u5728\u4e8e URI \u4e2d\uff0c\u5b83\u5c06\u4f1a\u88ab\u81ea\u52a8\u66ff\u6362\u6210 - \u5e76\u4e14 301 \u8df3\u8f6c\u8fc7\u53bb\u3002 TEMPLATES \u9ed8\u8ba4\u503c: (\"templates\",) \u901a\u8fc7\u8fd9\u4e2a\u503c\uff0c\u53ef\u4ee5\u63a7\u5236 TemplateResponse \u5c06\u5728\u54ea\u4e9b\u8def\u5f84\u4e0b\u5bfb\u627e\u6a21\u677f\u3002 CORS_ALLOW_ORIGINS \u9ed8\u8ba4\u503c: () \u5728\u8de8\u57df\u8bf7\u6c42\u4e2d\u5141\u8bb8\u7684 ORIGIN \u5217\u8868\u3002 \u4f8b\u5982\uff1a ['https://example.org', 'https://www.example.org'] \u4f60\u53ef\u4ee5\u4f7f\u7528 ['*'] \u6765\u5141\u8bb8\u6240\u6709\u7684 ORIGIN \u503c\u3002 CORS_ALLOW_ORIGIN_REGEX \u9ed8\u8ba4\u503c: None \u9700\u8981\u662f\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\uff0c\u5b83\u5c06\u7528\u4e8e\u5339\u914d\u5728\u8de8\u57df\u8bf7\u6c42\u4e2d\u5141\u8bb8\u7684 ORIGIN \u3002 \u4f8b\u5982\uff1a 'https://.*\\.example\\.org' CORS_ALLOW_METHODS \u9ed8\u8ba4\u503c: (\"GET\",) \u5728\u8de8\u57df\u8bf7\u6c42\u4e2d\u5141\u8bb8\u7684 HTTP \u8bf7\u6c42\u65b9\u6cd5\u5217\u8868\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 ['*'] \u6765\u5141\u8bb8\u6240\u6709\u7684\u8bf7\u6c42\u65b9\u6cd5\u3002 CORS_ALLOW_HEADERS \u9ed8\u8ba4\u503c: () \u5728\u8de8\u57df\u8bf7\u6c42\u4e2d\u5141\u8bb8\u88ab\u4f7f\u7528\u7684 header \u5217\u8868\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 ['*'] \u6765\u5141\u8bb8\u6240\u6709\u7684 header\u3002 Accept \u3001 Accept-Language \u3001 Content-Language \u548c Content-Type \u5728\u8de8\u57df\u8bf7\u6c42\u4e2d\u662f\u9ed8\u8ba4\u5141\u8bb8\u7684\u3002 CORS_ALLOW_CREDENTIALS \u9ed8\u8ba4\u503c: False \u5141\u8bb8\u5728\u8de8\u57df\u8bf7\u6c42\u4e2d\u643a\u5e26 cookies\u3002 CORS_EXPOSE_HEADERS \u9ed8\u8ba4\u503c: () \u6307\u5b9a\u53ef\u4f9b\u6d4f\u89c8\u5668\u8bbf\u95ee\u7684\u4efb\u4f55\u54cd\u5e94\u5934\u3002 CORS_MAX_AGE \u9ed8\u8ba4\u503c: 600 \u8bbe\u7f6e\u6d4f\u89c8\u5668\u7f13\u5b58 CORS \u54cd\u5e94\u7684\u6700\u957f\u65f6\u95f4\uff08\u5355\u4f4d\uff1a\u79d2\uff09\u3002","title":"\u5217\u8868"},{"location":"config/list/#env","text":"\u9ed8\u8ba4\u503c: \"dev\" env \u662f\u4e00\u4e2a\u5341\u5206\u91cd\u8981\u7684\u914d\u7f6e\uff0c\u5b83\u5141\u8bb8 \u81ea\u52a8\u4f7f\u7528\u5bf9\u5e94\u73af\u5883\u4e0b\u7684\u914d\u7f6e \u3002 \u5b83\u5c06\u8bfb\u53d6\u73af\u5883\u53d8\u91cf\u91cc INDEX_ENV \u7684\u503c\uff0c\u53ef\u4ee5\u4f46\u4e0d\u63a8\u8350\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u3002","title":"ENV"},{"location":"config/list/#debug","text":"\u9ed8\u8ba4\u503c: False \u5728\u73af\u5883\u53d8\u91cf\u91cc INDEX_DEBUG \u4e3a \"on\" \u6216\u8005 \"True\" \u65f6\uff0c DEBUG \u4e3a\u771f\uff1b\u8be5\u503c\u540c\u6837\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u3002 \u5f53 DEBUG \u4e3a\u771f\u65f6\uff0c\u5c06\u8be6\u7ec6\u7684\u663e\u793a 500 \u9519\u8bef\u4fe1\u606f\u3002","title":"DEBUG"},{"location":"config/list/#app","text":"\u9ed8\u8ba4\u503c: indexpy:app app \u5141\u8bb8\u81ea\u5b9a\u4e49 serve / gunicorn / test \u547d\u4ee4\u4e2d\u7684\u9ed8\u8ba4 app \u3002","title":"APP"},{"location":"config/list/#log_level","text":"\u9ed8\u8ba4\u503c: \"info\" log_level \u6709\u4e94\u4e2a\u53ef\u7528\u503c, \u4e0b\u9762\u662f\u5b83\u4e0e logging \u7684\u7b49\u7ea7\u5bf9\u5e94\u8868 log_level logging \"critical\" logging.CRITICAL \"error\" logging.ERROR \"warning\" logging.WARNING \"info\" logging.INFO \"debug\" logging.DEBUG","title":"LOG_LEVEL"},{"location":"config/list/#host","text":"\u9ed8\u8ba4\u503c: \"127.0.0.1\" host \u6307\u5b9a Index \u76d1\u542c\u7684\u5730\u5740\u3002","title":"HOST"},{"location":"config/list/#port","text":"\u9ed8\u8ba4\u503c: 4190 port \u6307\u5b9a Index \u76d1\u542c\u7684\u7aef\u53e3\u3002","title":"PORT"},{"location":"config/list/#allowed_hosts","text":"\u9ed8\u8ba4\u503c: [\"*\"] allowed_hosts \u7528\u4e8e\u6307\u5b9a Index \u5141\u8bb8\u88ab\u8bbf\u95ee\u7684 HOST\u3002 \u4e00\u4e9b\u4f8b\u5b50: [\"*\"] \u5141\u8bb8\u6240\u6709\u7684 HOST \u8bbf\u95ee [\"example.com\", \"*example.com\"] \u5141\u8bb8 example.com \u4ee5\u53ca example.com \u7684\u5b50\u57df\u540d\u8bbf\u95ee\u3002 [\"example.com\", \"test.com\"] \u5141\u8bb8 example.com \u4e0e test.com \u7684\u8bbf\u95ee\u3002","title":"ALLOWED_HOSTS"},{"location":"config/list/#force_ssl","text":"\u9ed8\u8ba4\u503c: False force_ssl \u5141\u8bb8 HTTP/WS \u5f3a\u5236\u8df3\u8f6c\u5230 HTTPS/WSS\u3002","title":"FORCE_SSL"},{"location":"config/list/#autoreload","text":"\u9ed8\u8ba4\u503c: True autoreload \u4e3a\u771f\u65f6\uff0c\u4f7f\u7528 index-cli serve \u6216 index-cli gunicorn start \u65f6\uff0c\u5c06\u4f1a\u76d1\u542c\u5f53\u524d\u7684\u9879\u76ee\u4fee\u6539\uff0c\u81ea\u52a8\u91cd\u542f\u670d\u52a1\u3002","title":"AUTORELOAD"},{"location":"config/list/#allow_underline","text":"\u9ed8\u8ba4\u503c: False \u7531\u4e8e Python \u7684 module \u53ea\u5141\u8bb8\u5b57\u6bcd\u3001\u6570\u5b57\u4e0e\u4e0b\u5212\u7ebf\uff0c\u4f46 URI \u4e2d\u51fa\u73b0\u51fa\u73b0\u4e0b\u5212\u7ebf\u662f\u4e0d\u63a8\u8350\u7684\uff0c\u6240\u4ee5\u6709\u4e86\u8fd9\u4e2a\u914d\u7f6e\u9009\u9879\u3002 \u5f53 allow_underline \u4e3a\u5047\u65f6\uff0c\u5982\u679c _ \u5b58\u5728\u4e8e URI \u4e2d\uff0c\u5b83\u5c06\u4f1a\u88ab\u81ea\u52a8\u66ff\u6362\u6210 - \u5e76\u4e14 301 \u8df3\u8f6c\u8fc7\u53bb\u3002","title":"ALLOW_UNDERLINE"},{"location":"config/list/#templates","text":"\u9ed8\u8ba4\u503c: (\"templates\",) \u901a\u8fc7\u8fd9\u4e2a\u503c\uff0c\u53ef\u4ee5\u63a7\u5236 TemplateResponse \u5c06\u5728\u54ea\u4e9b\u8def\u5f84\u4e0b\u5bfb\u627e\u6a21\u677f\u3002","title":"TEMPLATES"},{"location":"config/list/#cors_allow_origins","text":"\u9ed8\u8ba4\u503c: () \u5728\u8de8\u57df\u8bf7\u6c42\u4e2d\u5141\u8bb8\u7684 ORIGIN \u5217\u8868\u3002 \u4f8b\u5982\uff1a ['https://example.org', 'https://www.example.org'] \u4f60\u53ef\u4ee5\u4f7f\u7528 ['*'] \u6765\u5141\u8bb8\u6240\u6709\u7684 ORIGIN \u503c\u3002","title":"CORS_ALLOW_ORIGINS"},{"location":"config/list/#cors_allow_origin_regex","text":"\u9ed8\u8ba4\u503c: None \u9700\u8981\u662f\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\uff0c\u5b83\u5c06\u7528\u4e8e\u5339\u914d\u5728\u8de8\u57df\u8bf7\u6c42\u4e2d\u5141\u8bb8\u7684 ORIGIN \u3002 \u4f8b\u5982\uff1a 'https://.*\\.example\\.org'","title":"CORS_ALLOW_ORIGIN_REGEX"},{"location":"config/list/#cors_allow_methods","text":"\u9ed8\u8ba4\u503c: (\"GET\",) \u5728\u8de8\u57df\u8bf7\u6c42\u4e2d\u5141\u8bb8\u7684 HTTP \u8bf7\u6c42\u65b9\u6cd5\u5217\u8868\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 ['*'] \u6765\u5141\u8bb8\u6240\u6709\u7684\u8bf7\u6c42\u65b9\u6cd5\u3002","title":"CORS_ALLOW_METHODS"},{"location":"config/list/#cors_allow_headers","text":"\u9ed8\u8ba4\u503c: () \u5728\u8de8\u57df\u8bf7\u6c42\u4e2d\u5141\u8bb8\u88ab\u4f7f\u7528\u7684 header \u5217\u8868\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 ['*'] \u6765\u5141\u8bb8\u6240\u6709\u7684 header\u3002 Accept \u3001 Accept-Language \u3001 Content-Language \u548c Content-Type \u5728\u8de8\u57df\u8bf7\u6c42\u4e2d\u662f\u9ed8\u8ba4\u5141\u8bb8\u7684\u3002","title":"CORS_ALLOW_HEADERS"},{"location":"config/list/#cors_allow_credentials","text":"\u9ed8\u8ba4\u503c: False \u5141\u8bb8\u5728\u8de8\u57df\u8bf7\u6c42\u4e2d\u643a\u5e26 cookies\u3002","title":"CORS_ALLOW_CREDENTIALS"},{"location":"config/list/#cors_expose_headers","text":"\u9ed8\u8ba4\u503c: () \u6307\u5b9a\u53ef\u4f9b\u6d4f\u89c8\u5668\u8bbf\u95ee\u7684\u4efb\u4f55\u54cd\u5e94\u5934\u3002","title":"CORS_EXPOSE_HEADERS"},{"location":"config/list/#cors_max_age","text":"\u9ed8\u8ba4\u503c: 600 \u8bbe\u7f6e\u6d4f\u89c8\u5668\u7f13\u5b58 CORS \u54cd\u5e94\u7684\u6700\u957f\u65f6\u95f4\uff08\u5355\u4f4d\uff1a\u79d2\uff09\u3002","title":"CORS_MAX_AGE"},{"location":"firststep/","text":"\u5b89\u88c5 Index.py \u8981\u6c42 Python \u7684\u7248\u672c\u81f3\u5c11\u662f 3.6\uff0c\u5bf9\u7cfb\u7edf\u65e0\u8981\u6c42\u3002\u5982\u679c\u4e0d\u80fd/\u4e0d\u613f\u5347\u7ea7 Python \u7248\u672c\uff0c\u53ef\u4ee5\u4f7f\u7528 docker \u6765\u8fd0\u884c Index.py\u3002 \u5b89\u88c5 pypi \u4e0a\u7684\u5305 pip install -U index.py \u6216\u8005\u76f4\u63a5\u4ece Github \u4e0a\u5b89\u88c5\u6700\u65b0\u7248\u672c pip install -U git+https://github.com/abersheeran/index.py@setup.py \u4f60\u597d \u7ea6\u5b9a\u4e00\u4e2a\u76ee\u5f55\u4e3a\u9879\u76ee\u7684\u6839\u76ee\u5f55\uff0c\u5728\u5176\u4e2d\u521b\u5efa views/index.py \u6587\u4ef6\uff0c\u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u5199\u5165\u8be5\u6587\u4ef6\u91cc\u3002 from indexpy.http import HTTPView class HTTP ( HTTPView ): def get ( self ): return \"\u4f60\u597d~\" \u5728\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b\uff0c\u6267\u884c\u547d\u4ee4 index-cli serve \u3002 \u8bbf\u95ee http://localhost:4190 \u5427\uff01 \u54cd\u5e94 html \u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684 templates \u6587\u4ef6\u5939\u91cc\u521b\u5efa\u4e00\u4e2a hi.html \u5e76\u5199\u5165\u4efb\u610f\u7684 html \u5185\u5bb9\u3002 \u8bbf\u95ee http://localhost:4190/hi \u5c31\u80fd\u770b\u5230\u9875\u9762\u3002 \u9759\u6001\u6587\u4ef6 \u5bf9\u4e8e Javascript\u3001CSS\u3001Image \u7b49\u9759\u6001\u6587\u4ef6\uff0c\u653e\u5230\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684 static \u91cc\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7 http://localhost:4190/static/\u6587\u4ef6\u540d \u8bbf\u95ee\u4e86\u3002 \u8fd4\u56de JSON \u6700\u5e38\u89c1\u7684\u63a5\u53e3\u8fd4\u56de\u7c7b\u578b\u5c31\u662f JSON\uff0c\u90a3\u4e48\u8ba9\u6211\u4eec\u5bf9\u4e0a\u9762\u521b\u5efa\u7684 index.py \u6587\u4ef6\u505a\u4e00\u70b9\u4fee\u6539\uff1a from indexpy.http import HTTPView class HTTP ( HTTPView ): def get ( self ): return { \"key\" : \"value\" } \u8bd5\u7740\u91cd\u65b0\u8bbf\u95ee http://localhost:4190 \uff0c\u5982\u679c\u4e0d\u51fa\u610f\u5916\uff0c\u4f60\u5c31\u80fd\u770b\u5230 {\"key\": \"value\"} \u3002","title":"\u7b2c\u4e00\u6b65"},{"location":"firststep/#_1","text":"Index.py \u8981\u6c42 Python \u7684\u7248\u672c\u81f3\u5c11\u662f 3.6\uff0c\u5bf9\u7cfb\u7edf\u65e0\u8981\u6c42\u3002\u5982\u679c\u4e0d\u80fd/\u4e0d\u613f\u5347\u7ea7 Python \u7248\u672c\uff0c\u53ef\u4ee5\u4f7f\u7528 docker \u6765\u8fd0\u884c Index.py\u3002 \u5b89\u88c5 pypi \u4e0a\u7684\u5305 pip install -U index.py \u6216\u8005\u76f4\u63a5\u4ece Github \u4e0a\u5b89\u88c5\u6700\u65b0\u7248\u672c pip install -U git+https://github.com/abersheeran/index.py@setup.py","title":"\u5b89\u88c5"},{"location":"firststep/#_2","text":"\u7ea6\u5b9a\u4e00\u4e2a\u76ee\u5f55\u4e3a\u9879\u76ee\u7684\u6839\u76ee\u5f55\uff0c\u5728\u5176\u4e2d\u521b\u5efa views/index.py \u6587\u4ef6\uff0c\u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u5199\u5165\u8be5\u6587\u4ef6\u91cc\u3002 from indexpy.http import HTTPView class HTTP ( HTTPView ): def get ( self ): return \"\u4f60\u597d~\" \u5728\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b\uff0c\u6267\u884c\u547d\u4ee4 index-cli serve \u3002 \u8bbf\u95ee http://localhost:4190 \u5427\uff01","title":"\u4f60\u597d"},{"location":"firststep/#html","text":"\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684 templates \u6587\u4ef6\u5939\u91cc\u521b\u5efa\u4e00\u4e2a hi.html \u5e76\u5199\u5165\u4efb\u610f\u7684 html \u5185\u5bb9\u3002 \u8bbf\u95ee http://localhost:4190/hi \u5c31\u80fd\u770b\u5230\u9875\u9762\u3002","title":"\u54cd\u5e94 html"},{"location":"firststep/#_3","text":"\u5bf9\u4e8e Javascript\u3001CSS\u3001Image \u7b49\u9759\u6001\u6587\u4ef6\uff0c\u653e\u5230\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684 static \u91cc\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7 http://localhost:4190/static/\u6587\u4ef6\u540d \u8bbf\u95ee\u4e86\u3002","title":"\u9759\u6001\u6587\u4ef6"},{"location":"firststep/#json","text":"\u6700\u5e38\u89c1\u7684\u63a5\u53e3\u8fd4\u56de\u7c7b\u578b\u5c31\u662f JSON\uff0c\u90a3\u4e48\u8ba9\u6211\u4eec\u5bf9\u4e0a\u9762\u521b\u5efa\u7684 index.py \u6587\u4ef6\u505a\u4e00\u70b9\u4fee\u6539\uff1a from indexpy.http import HTTPView class HTTP ( HTTPView ): def get ( self ): return { \"key\" : \"value\" } \u8bd5\u7740\u91cd\u65b0\u8bbf\u95ee http://localhost:4190 \uff0c\u5982\u679c\u4e0d\u51fa\u610f\u5916\uff0c\u4f60\u5c31\u80fd\u770b\u5230 {\"key\": \"value\"} \u3002","title":"\u8fd4\u56de JSON"},{"location":"firststep/begin/","text":"\u6309\u7167\u56fd\u9645\u60ef\u4f8b\uff0c\u4e0a\u624b\u4e00\u4e2a web \u6846\u67b6\u603b\u662f\u4ece\u535a\u5ba2\u5f00\u59cb\uff0c\u672c\u6559\u7a0b\u4e5f\u4e0d\u4f8b\u5916\u3002\u8ddf\u7740\u6559\u7a0b\u8d70\uff0c\u5c06\u80fd\u521b\u5efa\u4e00\u4e2a\u7b80\u6d01\u7684\u4f46\u529f\u80fd\u5b8c\u5584\u7684\u535a\u5ba2\u2014\u2014\u5305\u62ec\u7528\u6237\u767b\u5f55\u3001\u6ce8\u518c\u3001\u8bbf\u95ee\u6587\u7ae0\uff0c\u8bc4\u8bba\uff0c\u7ba1\u7406\u5458\u65b0\u589e/\u4fee\u6539/\u5220\u9664\u6587\u7ae0\u3001\u5ba1\u6838/\u5220\u9664\u8bc4\u8bba\uff0c\u4ee5\u53ca\u7528\u6237\u8bbf\u95ee\u901f\u5ea6\u9650\u5236\u3002 \u7ea6\u5b9a\u4e00\u4e2a\u76ee\u5f55\u4e3a\u9879\u76ee\u7684\u6839\u76ee\u5f55\uff0c\u540e\u7eed\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u5c06\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e0b\u8fdb\u884c\u3002","title":"Begin"}]}