{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u8fd9\u662f\u4e00\u4e2a\u5f02\u6b65 web \u6846\u67b6\uff0c\u8bbe\u8ba1\u76ee\u7684\u5728\u4e8e\u5feb\u901f\u7684\u6784\u5efa\u9700\u8981\u7684 web \u670d\u52a1\uff0c\u65e0\u8bba\u662f Templates \u8fd8\u662f API\u3002Index.py \u662f\u7387\u5148\u4f7f\u7528 Radix Tree \u8fdb\u884c\u8def\u7531\u67e5\u627e\u7684 Python web \u6846\u67b6\u3002\u5e76\u501f\u52a9 uvicorn \u7684\u5f3a\u529b\u9a71\u52a8\uff0c\u62e5\u6709\u6781\u9ad8\u7684\u88f8\u6027\u80fd\u3002 \u5230\u76ee\u524d\u4e3a\u6b62\uff0cIndex.py \u4e0d\u5185\u7f6e\u6570\u636e\u5e93\u3001\u7f13\u5b58\u7b49\u5176\u4ed6\u529f\u80fd\u3002\u9009\u62e9\u56f0\u96be\u8005\u8bf7\u76f4\u63a5\u4f7f\u7528 Django \u3002 \u5982\u679c\u4f60\u5bf9\u672c\u6846\u67b6\u540e\u7eed\u53d1\u5c55\u6709\u4efb\u4f55\u7684\u60f3\u6cd5\uff0c\u6b22\u8fce\u8bbf\u95ee Github \u63d0 issue\u3002 \u8bbe\u8ba1\u7075\u611f \u540d\u79f0\u6765\u6e90\u4e8e kennethreitz \u7684 \u540c\u540d\u9879\u76ee \uff0c\u4f46\u968f\u7740\u5404\u79cd\u60f3\u6cd5\u7684\u53d1\u5c55\u2026\u2026\u9010\u6e10\u504f\u79bb\u539f\u672c\u7684\u8bbe\u8ba1\u3002 \u5b89\u88c5 Index.py \u8981\u6c42 Python \u7684\u7248\u672c\u81f3\u5c11\u662f 3.6\uff0c\u5bf9\u7cfb\u7edf\u65e0\u8981\u6c42\u3002\u5982\u679c\u4e0d\u80fd/\u4e0d\u613f\u5347\u7ea7 Python \u7248\u672c\uff0c\u53ef\u4ee5\u4f7f\u7528 docker \u6765\u8fd0\u884c Index.py\u3002 \u5b89\u88c5 pypi \u4e0a\u7684\u5305 pip install -U index.py \u6216\u8005\u76f4\u63a5\u4ece Github \u4e0a\u5b89\u88c5\u6700\u65b0\u7248\u672c pip install -U git+https://github.com/abersheeran/index.py@setup.py \u4e2d\u56fd\u5927\u9646\u5185\u7684\u7528\u6237\u53ef\u4ece Coding \u4e0a\u7684\u955c\u50cf\u4ed3\u5e93\u62c9\u53d6 pip install -U git+https://e.coding.net/aber/github/index.py.git@setup.py \u5fc5\u987b\u4f9d\u8d56 Index.py \u5e76\u4e0d\u662f\u4e00\u4e2a\u5168\u7136\u4ece\u96f6\u5f00\u59cb\u7684\u6846\u67b6\uff0c\u5b83\u6709\u8bb8\u591a\u90e8\u5206\u4f9d\u8d56\u4e8e\u4f17\u591a\u4f18\u79c0\u7684\u7b2c\u4e09\u65b9\u5e93\u4e0e Python \u6807\u51c6\u5e93\u3002 Starlette \uff1a\u63d0\u4f9b\u4e86 Request\u3001Response\u3001Background Task\u3001TestClient \u7b49\u529f\u80fd\u3002 PyYAML \uff1a\u4e3a YAMLResponse \u4ee5\u53ca\u914d\u7f6e\u6587\u4ef6\u8bfb\u53d6\u63d0\u4f9b\u4e86 yaml \u7684\u8bfb\u5199\u652f\u6301\u3002 Jinja2 \uff1a\u4f7f\u7528 Jinja2 \u4f5c\u4e3a\u9ed8\u8ba4\u7684\u6a21\u677f\u5f15\u64ce\u3002 Python-multipart \uff1a\u4e3a\u6d41\u5f0f\u4e0a\u4f20\u6587\u4ef6\u63d0\u4f9b\u4e86\u652f\u6301\u3002 Pydantic \uff1a\u4e3a\u81ea\u52a8\u751f\u6210 OpenAPI \u6587\u6863\u4ee5\u53ca\u8bf7\u6c42\u53c2\u6570\u89e3\u6790\u63d0\u4f9b\u4e86\u652f\u6301\u3002 Click \uff1a\u4e3a index-cli \u547d\u4ee4\u63d0\u4f9b\u652f\u6301\u3002 \u53ef\u9009\u4f9d\u8d56 \u5982\u679c\u9700\u8981\u4f7f\u7528 index-cli serve \uff0c\u5e94\u4f7f\u7528 pip install -U uvicorn \u5b89\u88c5 Uvicorn \u3002 \u5982\u679c\u9700\u8981\u4f7f\u7528 index-cli gunicorn \uff0c\u5e94\u4f7f\u7528 pip install -U uvicorn gunicorn \u5b89\u88c5 Gunicorn \u3002 \u5982\u679c\u9700\u8981\u4f7f\u7528 starlette \u7684 TestClient \u7528\u4e8e\u6d4b\u8bd5\uff0c\u5e94\u4f7f\u7528 pip install -U index.py[test] \u5b89\u88c5\u3002 \u4f46\u5982\u679c\u4f60\u662f\u4e00\u4e2a\u521d\u5b66\u8005\uff0c\u5728\u5b66\u4e60\u9636\u6bb5\u76f4\u63a5\u4f7f\u7528 pip install -U index.py[full] \u5b89\u88c5\u6240\u6709\u7684\u4f9d\u8d56\u5305\u5373\u53ef\u3002 \u4ea4\u6d41\u5e73\u53f0 Tencent QQ\uff1a 1082721927 Gitter\uff1a https://gitter.im/Indexpy/community","title":"\u6982\u89c8"},{"location":"#_1","text":"\u8fd9\u662f\u4e00\u4e2a\u5f02\u6b65 web \u6846\u67b6\uff0c\u8bbe\u8ba1\u76ee\u7684\u5728\u4e8e\u5feb\u901f\u7684\u6784\u5efa\u9700\u8981\u7684 web \u670d\u52a1\uff0c\u65e0\u8bba\u662f Templates \u8fd8\u662f API\u3002Index.py \u662f\u7387\u5148\u4f7f\u7528 Radix Tree \u8fdb\u884c\u8def\u7531\u67e5\u627e\u7684 Python web \u6846\u67b6\u3002\u5e76\u501f\u52a9 uvicorn \u7684\u5f3a\u529b\u9a71\u52a8\uff0c\u62e5\u6709\u6781\u9ad8\u7684\u88f8\u6027\u80fd\u3002 \u5230\u76ee\u524d\u4e3a\u6b62\uff0cIndex.py \u4e0d\u5185\u7f6e\u6570\u636e\u5e93\u3001\u7f13\u5b58\u7b49\u5176\u4ed6\u529f\u80fd\u3002\u9009\u62e9\u56f0\u96be\u8005\u8bf7\u76f4\u63a5\u4f7f\u7528 Django \u3002 \u5982\u679c\u4f60\u5bf9\u672c\u6846\u67b6\u540e\u7eed\u53d1\u5c55\u6709\u4efb\u4f55\u7684\u60f3\u6cd5\uff0c\u6b22\u8fce\u8bbf\u95ee Github \u63d0 issue\u3002","title":""},{"location":"#_2","text":"\u540d\u79f0\u6765\u6e90\u4e8e kennethreitz \u7684 \u540c\u540d\u9879\u76ee \uff0c\u4f46\u968f\u7740\u5404\u79cd\u60f3\u6cd5\u7684\u53d1\u5c55\u2026\u2026\u9010\u6e10\u504f\u79bb\u539f\u672c\u7684\u8bbe\u8ba1\u3002","title":"\u8bbe\u8ba1\u7075\u611f"},{"location":"#_3","text":"Index.py \u8981\u6c42 Python \u7684\u7248\u672c\u81f3\u5c11\u662f 3.6\uff0c\u5bf9\u7cfb\u7edf\u65e0\u8981\u6c42\u3002\u5982\u679c\u4e0d\u80fd/\u4e0d\u613f\u5347\u7ea7 Python \u7248\u672c\uff0c\u53ef\u4ee5\u4f7f\u7528 docker \u6765\u8fd0\u884c Index.py\u3002 \u5b89\u88c5 pypi \u4e0a\u7684\u5305 pip install -U index.py \u6216\u8005\u76f4\u63a5\u4ece Github \u4e0a\u5b89\u88c5\u6700\u65b0\u7248\u672c pip install -U git+https://github.com/abersheeran/index.py@setup.py \u4e2d\u56fd\u5927\u9646\u5185\u7684\u7528\u6237\u53ef\u4ece Coding \u4e0a\u7684\u955c\u50cf\u4ed3\u5e93\u62c9\u53d6 pip install -U git+https://e.coding.net/aber/github/index.py.git@setup.py","title":"\u5b89\u88c5"},{"location":"#_4","text":"Index.py \u5e76\u4e0d\u662f\u4e00\u4e2a\u5168\u7136\u4ece\u96f6\u5f00\u59cb\u7684\u6846\u67b6\uff0c\u5b83\u6709\u8bb8\u591a\u90e8\u5206\u4f9d\u8d56\u4e8e\u4f17\u591a\u4f18\u79c0\u7684\u7b2c\u4e09\u65b9\u5e93\u4e0e Python \u6807\u51c6\u5e93\u3002 Starlette \uff1a\u63d0\u4f9b\u4e86 Request\u3001Response\u3001Background Task\u3001TestClient \u7b49\u529f\u80fd\u3002 PyYAML \uff1a\u4e3a YAMLResponse \u4ee5\u53ca\u914d\u7f6e\u6587\u4ef6\u8bfb\u53d6\u63d0\u4f9b\u4e86 yaml \u7684\u8bfb\u5199\u652f\u6301\u3002 Jinja2 \uff1a\u4f7f\u7528 Jinja2 \u4f5c\u4e3a\u9ed8\u8ba4\u7684\u6a21\u677f\u5f15\u64ce\u3002 Python-multipart \uff1a\u4e3a\u6d41\u5f0f\u4e0a\u4f20\u6587\u4ef6\u63d0\u4f9b\u4e86\u652f\u6301\u3002 Pydantic \uff1a\u4e3a\u81ea\u52a8\u751f\u6210 OpenAPI \u6587\u6863\u4ee5\u53ca\u8bf7\u6c42\u53c2\u6570\u89e3\u6790\u63d0\u4f9b\u4e86\u652f\u6301\u3002 Click \uff1a\u4e3a index-cli \u547d\u4ee4\u63d0\u4f9b\u652f\u6301\u3002","title":"\u5fc5\u987b\u4f9d\u8d56"},{"location":"#_5","text":"\u5982\u679c\u9700\u8981\u4f7f\u7528 index-cli serve \uff0c\u5e94\u4f7f\u7528 pip install -U uvicorn \u5b89\u88c5 Uvicorn \u3002 \u5982\u679c\u9700\u8981\u4f7f\u7528 index-cli gunicorn \uff0c\u5e94\u4f7f\u7528 pip install -U uvicorn gunicorn \u5b89\u88c5 Gunicorn \u3002 \u5982\u679c\u9700\u8981\u4f7f\u7528 starlette \u7684 TestClient \u7528\u4e8e\u6d4b\u8bd5\uff0c\u5e94\u4f7f\u7528 pip install -U index.py[test] \u5b89\u88c5\u3002 \u4f46\u5982\u679c\u4f60\u662f\u4e00\u4e2a\u521d\u5b66\u8005\uff0c\u5728\u5b66\u4e60\u9636\u6bb5\u76f4\u63a5\u4f7f\u7528 pip install -U index.py[full] \u5b89\u88c5\u6240\u6709\u7684\u4f9d\u8d56\u5305\u5373\u53ef\u3002","title":"\u53ef\u9009\u4f9d\u8d56"},{"location":"#_6","text":"Tencent QQ\uff1a 1082721927 Gitter\uff1a https://gitter.im/Indexpy/community","title":"\u4ea4\u6d41\u5e73\u53f0"},{"location":"application/","text":"Index Index \u5bf9\u8c61\u4f5c\u4e3a Index.py \u7a0b\u5e8f\u7684\u5165\u53e3\uff0c\u63a8\u8350\u6bcf\u4e2a\u9879\u76ee\u91cc\u59cb\u7ec8\u53ea\u4f7f\u7528\u4e00\u4e2a Index \u5bf9\u8c61\u3002 Tip \u901a\u8fc7 scope[\"app\"] \u3001 request[\"app\"] \u6216 websocket[\"app\"] \u53ef\u4ee5\u83b7\u53d6\u5230\u6b63\u5728\u4f7f\u7528\u7684 Index \u5bf9\u8c61\u3002 \u5b83\u6709\u8bb8\u591a\u521d\u59cb\u5316\u53c2\u6570\uff0c\u53ef\u7528\u4e8e\u63a7\u5236\u4e00\u4e9b Application \u5185\u7684\u7a0b\u5e8f\u903b\u8f91\u3002 templates = Jinja2Template(\"templates\") \uff1a\u6b64\u53c2\u6570\u7528\u4e8e\u63a7\u5236 indexpy.http.responses.TemplateResponse \u7684\u5177\u4f53\u884c\u4e3a\u3002 on_startup: typing.List[typing.Callable] = [] \uff1a\u670d\u52a1\u542f\u52a8\u540e\u81ea\u52a8\u8c03\u7528\u7684\u51fd\u6570\u5217\u8868\u3002 on_shutdown: typing.List[typing.Callable] = [] \uff1a\u670d\u52a1\u5173\u95ed\u524d\u81ea\u52a8\u8c03\u7528\u7684\u51fd\u6570\u5217\u8868\u3002 routes: typing.List[BaseRoute] = [] \uff1a\u8def\u7531\u5217\u8868\u3002 middlewares: typing.List[Middleware] = [] \uff1a\u6302\u8f7d\u4e8e Index \u5bf9\u8c61\u4e0a ASGI \u4e2d\u95f4\u4ef6\u5217\u8868\u3002 exception_handlers = {} \uff1a\u5904\u7406\u5f02\u5e38\u7684\u51fd\u6570\u5b57\u5178\u3002\u952e\u4e3a int \u6216 Exception \u5b9e\u4f8b\uff0c\u503c\u4e3a\u5bf9\u5e94\u7684\u51fd\u6570\uff08\u5b9a\u4e49\u53ef\u53c2\u8003 \u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406 \uff09\u3002 factory_class: FactoryClass \uff1a\u901a\u8fc7\u8986\u76d6\u6b64\u53c2\u6570\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6574\u4e2a Index \u4f5c\u7528\u57df\u4e2d\u4f7f\u7528\u7684 Request \u7c7b\u4e0e WebSocket \u7c7b\u3002 router \u6240\u6709\u7684\u8def\u7531\u6700\u7ec8\u90fd\u5c06\u5f52\u5165\u6b64\u8def\u7531\u5bf9\u8c61\u4e2d\uff0c\u6b64\u5bf9\u8c61\u6709\u56db\u4e2a\u65b9\u6cd5\uff1a append \uff1a\u8ffd\u52a0\u4e00\u4e2a\u65b0\u8def\u7531\u5230\u8def\u7531\u6811\u4e2d\u3002 extend \uff1a\u8ffd\u52a0\u4e00\u4e2a\u5217\u8868\u7684\u65b0\u8def\u7531\u5230\u8def\u7531\u6811\u4e2d\u3002 search \uff1a\u4e3a\u8bf7\u6c42\u5bfb\u627e\u4e00\u4e2a\u5408\u9002\u7684 endpoint \u5e76\u8fd4\u56de\u8def\u5f84\u53c2\u6570\u3002 url_for \uff1a\u901a\u8fc7\u8def\u7531\u540d\u79f0\u4e0e\u8def\u5f84\u53c2\u6570\u53cd\u5411\u6784\u5efa\u5b8c\u6574\u7684 URL path\u3002 Dispatcher Dispatcher \u53ef\u4ee5\u7528\u4e8e\u7ec4\u5408\u591a\u4e2a ASGI \u5e94\u7528\u3002\u4ee5\u4e0b\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\u7528\u4f8b\uff0c\u5f53\u4e00\u4e2a\u65b0\u7684\u8bf7\u6c42 /django/admin/ \u5230\u8fbe app \u65f6\uff0c\u6309\u7167\u987a\u5e8f\u4f9d\u6b21\u8c03\u7528 django_app \u3001 other_django_app \uff0c\u7b2c\u4e00\u4e2a\u975e 404 \u7684\u54cd\u5e94\u5c06\u4f1a\u4f5c\u4e3a\u6700\u540e\u7684\u7ed3\u679c\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002\u5982\u679c\u6240\u6709\u7684 Application \u90fd\u8fd4\u56de 404 \u54cd\u5e94\u4e14\u672a\u8bfb\u53d6\u8bf7\u6c42\u4f53\uff0c\u5219\u6700\u7ec8\u7531 application \u6765\u5904\u7406\u6b64\u6b21\u8bf7\u6c42\uff1b\u5982\u679c\u6709\u4efb\u610f\u4e00\u4e2a Application \u8bfb\u53d6\u4e86\u8bf7\u6c42\u4f53\u4e14\u8fd4\u56de 404 \u54cd\u5e94\uff0c\u5219\u4f1a\u8c03\u7528 handle404 \u8fd4\u56de\u54cd\u5e94\uff08\u9ed8\u8ba4\u662f\u4e00\u4e2a\u7a7a\u5185\u5bb9\u7684 404 \u54cd\u5e94\uff0c\u4f60\u53ef\u4ee5\u5728\u53c2\u6570\u91cc\u8986\u76d6\u5b83\uff09\u3002 from a2wsgi import WSGIMiddleware from indexpy import Index , Dispatcher from django_app_name.wsgi import application as django_app from other_django_app_name.wsgi import application as other_django_app from fastapi_app import app as fastapi_app application = Index () app = Dispatcher ( application , ( \"/django\" , WSGIMiddleware ( django_app )), ( \"/django\" , WSGIMiddleware ( other_django_app )), ( \"/some\" , fastapi_app ), ) Notice \u4f7f\u7528 pip install a2wsgi \u5b89\u88c5 a2wsgi \uff0c\u53ef\u4ee5\u4f7f\u7528 a2wsgi.WSGIMiddleware \u5c06\u4e00\u4e2a WSGI \u5e94\u7528\u8f6c\u6362\u4e3a ASGI \u5e94\u7528\u3002","title":"Application"},{"location":"application/#index","text":"Index \u5bf9\u8c61\u4f5c\u4e3a Index.py \u7a0b\u5e8f\u7684\u5165\u53e3\uff0c\u63a8\u8350\u6bcf\u4e2a\u9879\u76ee\u91cc\u59cb\u7ec8\u53ea\u4f7f\u7528\u4e00\u4e2a Index \u5bf9\u8c61\u3002 Tip \u901a\u8fc7 scope[\"app\"] \u3001 request[\"app\"] \u6216 websocket[\"app\"] \u53ef\u4ee5\u83b7\u53d6\u5230\u6b63\u5728\u4f7f\u7528\u7684 Index \u5bf9\u8c61\u3002 \u5b83\u6709\u8bb8\u591a\u521d\u59cb\u5316\u53c2\u6570\uff0c\u53ef\u7528\u4e8e\u63a7\u5236\u4e00\u4e9b Application \u5185\u7684\u7a0b\u5e8f\u903b\u8f91\u3002 templates = Jinja2Template(\"templates\") \uff1a\u6b64\u53c2\u6570\u7528\u4e8e\u63a7\u5236 indexpy.http.responses.TemplateResponse \u7684\u5177\u4f53\u884c\u4e3a\u3002 on_startup: typing.List[typing.Callable] = [] \uff1a\u670d\u52a1\u542f\u52a8\u540e\u81ea\u52a8\u8c03\u7528\u7684\u51fd\u6570\u5217\u8868\u3002 on_shutdown: typing.List[typing.Callable] = [] \uff1a\u670d\u52a1\u5173\u95ed\u524d\u81ea\u52a8\u8c03\u7528\u7684\u51fd\u6570\u5217\u8868\u3002 routes: typing.List[BaseRoute] = [] \uff1a\u8def\u7531\u5217\u8868\u3002 middlewares: typing.List[Middleware] = [] \uff1a\u6302\u8f7d\u4e8e Index \u5bf9\u8c61\u4e0a ASGI \u4e2d\u95f4\u4ef6\u5217\u8868\u3002 exception_handlers = {} \uff1a\u5904\u7406\u5f02\u5e38\u7684\u51fd\u6570\u5b57\u5178\u3002\u952e\u4e3a int \u6216 Exception \u5b9e\u4f8b\uff0c\u503c\u4e3a\u5bf9\u5e94\u7684\u51fd\u6570\uff08\u5b9a\u4e49\u53ef\u53c2\u8003 \u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406 \uff09\u3002 factory_class: FactoryClass \uff1a\u901a\u8fc7\u8986\u76d6\u6b64\u53c2\u6570\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6574\u4e2a Index \u4f5c\u7528\u57df\u4e2d\u4f7f\u7528\u7684 Request \u7c7b\u4e0e WebSocket \u7c7b\u3002","title":"Index"},{"location":"application/#router","text":"\u6240\u6709\u7684\u8def\u7531\u6700\u7ec8\u90fd\u5c06\u5f52\u5165\u6b64\u8def\u7531\u5bf9\u8c61\u4e2d\uff0c\u6b64\u5bf9\u8c61\u6709\u56db\u4e2a\u65b9\u6cd5\uff1a append \uff1a\u8ffd\u52a0\u4e00\u4e2a\u65b0\u8def\u7531\u5230\u8def\u7531\u6811\u4e2d\u3002 extend \uff1a\u8ffd\u52a0\u4e00\u4e2a\u5217\u8868\u7684\u65b0\u8def\u7531\u5230\u8def\u7531\u6811\u4e2d\u3002 search \uff1a\u4e3a\u8bf7\u6c42\u5bfb\u627e\u4e00\u4e2a\u5408\u9002\u7684 endpoint \u5e76\u8fd4\u56de\u8def\u5f84\u53c2\u6570\u3002 url_for \uff1a\u901a\u8fc7\u8def\u7531\u540d\u79f0\u4e0e\u8def\u5f84\u53c2\u6570\u53cd\u5411\u6784\u5efa\u5b8c\u6574\u7684 URL path\u3002","title":"router"},{"location":"application/#dispatcher","text":"Dispatcher \u53ef\u4ee5\u7528\u4e8e\u7ec4\u5408\u591a\u4e2a ASGI \u5e94\u7528\u3002\u4ee5\u4e0b\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\u7528\u4f8b\uff0c\u5f53\u4e00\u4e2a\u65b0\u7684\u8bf7\u6c42 /django/admin/ \u5230\u8fbe app \u65f6\uff0c\u6309\u7167\u987a\u5e8f\u4f9d\u6b21\u8c03\u7528 django_app \u3001 other_django_app \uff0c\u7b2c\u4e00\u4e2a\u975e 404 \u7684\u54cd\u5e94\u5c06\u4f1a\u4f5c\u4e3a\u6700\u540e\u7684\u7ed3\u679c\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002\u5982\u679c\u6240\u6709\u7684 Application \u90fd\u8fd4\u56de 404 \u54cd\u5e94\u4e14\u672a\u8bfb\u53d6\u8bf7\u6c42\u4f53\uff0c\u5219\u6700\u7ec8\u7531 application \u6765\u5904\u7406\u6b64\u6b21\u8bf7\u6c42\uff1b\u5982\u679c\u6709\u4efb\u610f\u4e00\u4e2a Application \u8bfb\u53d6\u4e86\u8bf7\u6c42\u4f53\u4e14\u8fd4\u56de 404 \u54cd\u5e94\uff0c\u5219\u4f1a\u8c03\u7528 handle404 \u8fd4\u56de\u54cd\u5e94\uff08\u9ed8\u8ba4\u662f\u4e00\u4e2a\u7a7a\u5185\u5bb9\u7684 404 \u54cd\u5e94\uff0c\u4f60\u53ef\u4ee5\u5728\u53c2\u6570\u91cc\u8986\u76d6\u5b83\uff09\u3002 from a2wsgi import WSGIMiddleware from indexpy import Index , Dispatcher from django_app_name.wsgi import application as django_app from other_django_app_name.wsgi import application as other_django_app from fastapi_app import app as fastapi_app application = Index () app = Dispatcher ( application , ( \"/django\" , WSGIMiddleware ( django_app )), ( \"/django\" , WSGIMiddleware ( other_django_app )), ( \"/some\" , fastapi_app ), ) Notice \u4f7f\u7528 pip install a2wsgi \u5b89\u88c5 a2wsgi \uff0c\u53ef\u4ee5\u4f7f\u7528 a2wsgi.WSGIMiddleware \u5c06\u4e00\u4e2a WSGI \u5e94\u7528\u8f6c\u6362\u4e3a ASGI \u5e94\u7528\u3002","title":"Dispatcher"},{"location":"background/","text":"\u5728\u4f20\u7edf\u7684\u591a\u7ebf\u7a0b web \u5f00\u53d1\u91cc\uff0c\u8981\u6b63\u5e38\u7684\u542f\u52a8\u4e00\u4e2a\u540e\u53f0\u4efb\u52a1\u662f\u5341\u5206\u56f0\u96be\u7684\uff0c\u60f3\u60f3\u7ebf\u7a0b\u5b89\u5168\u548c\u53d8\u91cf\u4f5c\u7528\u57df\u4e4b\u7c7b\u7684\u4e8b\u60c5\u3002\u9976\u662f\u4f60\u7ecf\u9a8c\u4e30\u5bcc\uff0c\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u4f9d\u65e7\u662f\u75db\u82e6\u7684\u3002 \u5728 Index \u4e2d\u4f60\u53ea\u9700\u8981\u4e00\u4e9b asyncio \u7684\u77e5\u8bc6\u5c31\u53ef\u4ee5\u505a\u5230\u8f7b\u677e\u7684\u542f\u52a8\u540e\u53f0\u4efb\u52a1\u3002 \u5355\u4e00\u540e\u53f0\u4efb\u52a1 \u5f88\u591a\u60c5\u51b5\u4e0b\u6211\u4eec\u9700\u8981\u8fd9\u6837\u4e00\u79cd\u540e\u53f0\u4efb\u52a1\u2014\u2014\u5728\u54cd\u5e94\u7ed3\u675f\u540e\uff0c\u6267\u884c\u67d0\u79cd\u8017\u65f6\u7684 IO \u64cd\u4f5c\u3002 indexpy.http.BackgroundTask \u662f\u4e00\u4e2a\u795e\u5947\u7684\u5305\u88c5\u7c7b\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u4f60\u628a\u51fd\u6570\u63d0\u4ea4\u5230\u6b64\u6b21 http \u54cd\u5e94\u7ed3\u675f\u540e\u6267\u884c\u2014\u2014\u5982\u679c\u54cd\u5e94\u672a\u5b8c\u6210\u5c31\u5931\u8d25\u4e86\uff0c\u540e\u53f0\u4efb\u52a1\u5c06\u4e0d\u4f1a\u6267\u884c\u3002 from indexpy import Index from indexpy.http import Background from indexpy.http.responses import JSONResponse app = Index () async def send_welcome_email ( email : str , username : str ) -> None : ... @app . router . http ( \"/signup\" , method = \"get\" ) async def signup ( request ): data = await request . json () username = data [ 'username' ] email = data [ 'email' ] task = BackgroundTask ( send_welcome_email , email = email , username = username ) return JSONResponse ({ 'status' : 'Signup successful' }, background = task ) \u591a\u540e\u53f0\u4efb\u52a1 \u5982\u679c\u9700\u8981\u987a\u5e8f\u7684\u6267\u884c\u591a\u4e2a\u540e\u53f0\u4efb\u52a1(\u6267\u884c\u987a\u5e8f\u7531\u6dfb\u52a0\u987a\u5e8f\u51b3\u5b9a\uff0c\u5148\u6dfb\u52a0\u3001\u5148\u6267\u884c)\uff0c\u9700\u8981\u4f7f\u7528 BackgroundTasks \u4ee3\u66ff BackgroundTask \uff0c\u5b83\u4eec\u7684\u5de5\u4f5c\u539f\u7406\u662f\u4e00\u6837\u7684\u3002 from indexpy import Index from indexpy.http import BackgroundTasks from indexpy.http.responses import JSONResponse app = Index () async def send_welcome_email ( to_address ): ... async def send_admin_notification ( username ): ... @app . router . http ( \"/signup\" , method = \"get\" ) data = await request . json () username = data [ 'username' ] email = data [ 'email' ] tasks = BackgroundTasks () tasks . add_task ( send_welcome_email , to_address = email ) tasks . add_task ( send_admin_notification , username = username ) return JSONResponse ({ 'status' : 'Signup successful' }, background = tasks )","title":"Background Task"},{"location":"background/#_1","text":"\u5f88\u591a\u60c5\u51b5\u4e0b\u6211\u4eec\u9700\u8981\u8fd9\u6837\u4e00\u79cd\u540e\u53f0\u4efb\u52a1\u2014\u2014\u5728\u54cd\u5e94\u7ed3\u675f\u540e\uff0c\u6267\u884c\u67d0\u79cd\u8017\u65f6\u7684 IO \u64cd\u4f5c\u3002 indexpy.http.BackgroundTask \u662f\u4e00\u4e2a\u795e\u5947\u7684\u5305\u88c5\u7c7b\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u4f60\u628a\u51fd\u6570\u63d0\u4ea4\u5230\u6b64\u6b21 http \u54cd\u5e94\u7ed3\u675f\u540e\u6267\u884c\u2014\u2014\u5982\u679c\u54cd\u5e94\u672a\u5b8c\u6210\u5c31\u5931\u8d25\u4e86\uff0c\u540e\u53f0\u4efb\u52a1\u5c06\u4e0d\u4f1a\u6267\u884c\u3002 from indexpy import Index from indexpy.http import Background from indexpy.http.responses import JSONResponse app = Index () async def send_welcome_email ( email : str , username : str ) -> None : ... @app . router . http ( \"/signup\" , method = \"get\" ) async def signup ( request ): data = await request . json () username = data [ 'username' ] email = data [ 'email' ] task = BackgroundTask ( send_welcome_email , email = email , username = username ) return JSONResponse ({ 'status' : 'Signup successful' }, background = task )","title":"\u5355\u4e00\u540e\u53f0\u4efb\u52a1"},{"location":"background/#_2","text":"\u5982\u679c\u9700\u8981\u987a\u5e8f\u7684\u6267\u884c\u591a\u4e2a\u540e\u53f0\u4efb\u52a1(\u6267\u884c\u987a\u5e8f\u7531\u6dfb\u52a0\u987a\u5e8f\u51b3\u5b9a\uff0c\u5148\u6dfb\u52a0\u3001\u5148\u6267\u884c)\uff0c\u9700\u8981\u4f7f\u7528 BackgroundTasks \u4ee3\u66ff BackgroundTask \uff0c\u5b83\u4eec\u7684\u5de5\u4f5c\u539f\u7406\u662f\u4e00\u6837\u7684\u3002 from indexpy import Index from indexpy.http import BackgroundTasks from indexpy.http.responses import JSONResponse app = Index () async def send_welcome_email ( to_address ): ... async def send_admin_notification ( username ): ... @app . router . http ( \"/signup\" , method = \"get\" ) data = await request . json () username = data [ 'username' ] email = data [ 'email' ] tasks = BackgroundTasks () tasks . add_task ( send_welcome_email , to_address = email ) tasks . add_task ( send_admin_notification , username = username ) return JSONResponse ({ 'status' : 'Signup successful' }, background = tasks )","title":"\u591a\u540e\u53f0\u4efb\u52a1"},{"location":"command/","text":"\u5185\u7f6e\u547d\u4ee4 Index \u5185\u7f6e\u4e86\u4e00\u4e9b\u547d\u4ee4\u65b9\u4fbf\u4f7f\u7528\u3002 Notice \u5b83\u4eec\u90fd\u5fc5\u987b\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u6267\u884c index-cli index-cli \u662f index \u5185\u7f6e\u7684\u6839\u547d\u4ee4\uff0c\u6240\u6709\u5176\u4f59\u547d\u4ee4\u5747\u4e3a index-cli \u7684\u5b50\u547d\u4ee4\u3002 index-cli serve \u4f7f\u7528 uvicorn \u542f\u52a8 Index\uff0c\u4f8b\u5982 index-cli serve main:app \u3002 Notice \u6b64\u547d\u4ee4\u9700\u8981\u5b89\u88c5 uvicorn \u3002 index-cli gunicorn index-cli gunicorn start \u901a\u8fc7 gunicorn \u542f\u52a8\u670d\u52a1\u3001\u7ba1\u7406\u8fdb\u7a0b\u3002\u53ef\u4ee5\u7c97\u6d45\u7684\u7406\u89e3\u4e3a\u80fd\u542f\u52a8\u591a\u4e2a\u8fdb\u7a0b\u7684 serve \u547d\u4ee4\uff0c\u53ea\u4e0d\u8fc7\u7531 gunicorn \u76d1\u89c6\u5e76\u7ba1\u7406\u5404\u4e2a worker \u8fdb\u7a0b\u7684\u8fd0\u884c\u3002\u4f8b\u5982 index-cli gunicorn start main:app \u3002 \u276f index - cli gunicorn -- help Usage : index - cli gunicorn [ OPTIONS ] [ start|stop|reload ] [ APPLICATION ] deploy by gunicorn Options : - w , -- workers INTEGER - d , -- daemon - c , -- configuration FILE --help Show this message and exit. \u4f60\u53ef\u4ee5\u901a\u8fc7 --workers \u9009\u9879\u6307\u5b9a\u542f\u52a8\u7684\u8fdb\u7a0b\u6570\u91cf\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u5b83\u9ed8\u8ba4\u662f CPU \u6838\u5fc3\u6570\u3002 \u5982\u679c\u5f00\u542f\u4e86 --daemon \u9009\u9879\uff0cIndex \u5c06\u5728\u540e\u53f0\u8fd0\u884c\uff0c\u4e3b\u8fdb\u7a0b\u53f7\u4f1a\u88ab\u5199\u5165\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684 .pid \u4e2d\uff0c\u8fd0\u884c\u65e5\u5fd7\u5219\u5199\u5165\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684 log.index \u91cc\u3002 \u5047\u5982\u4f60\u9700\u8981\u7f16\u5199\u66f4\u591a\u7684 gunicorn \u914d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u7528 -c \u6765\u6307\u5b9a\u4e00\u4e2a .py \u4f5c\u4e3a\u914d\u7f6e\u6587\u4ef6\u3002\u8be6\u89c1 gunicorn \u6587\u6863 Notice \u6b64\u547d\u4ee4\u9700\u8981\u5b89\u88c5 gunicorn \u3002 index-cli gunicorn stop \u5f53\u4f60\u4f7f\u7528 index-cli gunicorn start -d \u5728\u540e\u53f0\u542f\u52a8\u4e86 Index \u65f6\uff0c\u53ef\u4ee5\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u6267\u884c\u6b64\u547d\u4ee4\u53bb\u505c\u6b62 Index\u3002 index-cli gunicorn reload \u5f53\u4f60\u4f7f\u7528 index-cli gunicorn start -d \u5728\u540e\u53f0\u542f\u52a8\u4e86 Index \u65f6\uff0c\u53ef\u4ee5\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u6267\u884c\u6b64\u547d\u4ee4\u53bb\u91cd\u542f Index\u3002 \u81ea\u5b9a\u4e49\u547d\u4ee4 Index \u4f7f\u7528\u4e86 click \u6765\u63d0\u4f9b\u547d\u4ee4\u652f\u6301\u3002 \u6240\u4ee5\u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\u547d\u4ee4\uff0c\u4f60\u53ea\u9700\u8981\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u65b0\u5efa\u4e00\u4e2a commands.py \u6587\u4ef6\uff0c\u5728\u5176\u4e2d\u6309\u7167 click \u7684\u89c4\u5219\u7f16\u5199\u81ea\u5df1\u7684\u547d\u4ee4\u3002 \u4f8b\u5b50 \u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684 commands.py \u91cc\u5199\u5165\u4ee5\u4e0b\u5185\u5bb9 from indexpy.cli import index_cli @index_cli . command ( help = 'Custom command' ) def only_print (): print ( 'Custom command' ) \u7136\u540e\u4f7f\u7528 index-cli --help \u80fd\u770b\u5230\u547d\u4ee4\u5df2\u7ecf\u88ab\u52a0\u5165\u4e86 \u276f index - cli -- help Usage : index - cli [ OPTIONS ] COMMAND [ ARGS ] ... Options : -- help Show this message and exit . Commands : gunicorn deploy by gunicorn only - print Custom command serve use only uvicorn","title":"Command"},{"location":"command/#_1","text":"Index \u5185\u7f6e\u4e86\u4e00\u4e9b\u547d\u4ee4\u65b9\u4fbf\u4f7f\u7528\u3002 Notice \u5b83\u4eec\u90fd\u5fc5\u987b\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u6267\u884c","title":"\u5185\u7f6e\u547d\u4ee4"},{"location":"command/#index-cli","text":"index-cli \u662f index \u5185\u7f6e\u7684\u6839\u547d\u4ee4\uff0c\u6240\u6709\u5176\u4f59\u547d\u4ee4\u5747\u4e3a index-cli \u7684\u5b50\u547d\u4ee4\u3002","title":"index-cli"},{"location":"command/#index-cli-serve","text":"\u4f7f\u7528 uvicorn \u542f\u52a8 Index\uff0c\u4f8b\u5982 index-cli serve main:app \u3002 Notice \u6b64\u547d\u4ee4\u9700\u8981\u5b89\u88c5 uvicorn \u3002","title":"index-cli serve"},{"location":"command/#index-cli-gunicorn","text":"","title":"index-cli gunicorn"},{"location":"command/#index-cli-gunicorn-start","text":"\u901a\u8fc7 gunicorn \u542f\u52a8\u670d\u52a1\u3001\u7ba1\u7406\u8fdb\u7a0b\u3002\u53ef\u4ee5\u7c97\u6d45\u7684\u7406\u89e3\u4e3a\u80fd\u542f\u52a8\u591a\u4e2a\u8fdb\u7a0b\u7684 serve \u547d\u4ee4\uff0c\u53ea\u4e0d\u8fc7\u7531 gunicorn \u76d1\u89c6\u5e76\u7ba1\u7406\u5404\u4e2a worker \u8fdb\u7a0b\u7684\u8fd0\u884c\u3002\u4f8b\u5982 index-cli gunicorn start main:app \u3002 \u276f index - cli gunicorn -- help Usage : index - cli gunicorn [ OPTIONS ] [ start|stop|reload ] [ APPLICATION ] deploy by gunicorn Options : - w , -- workers INTEGER - d , -- daemon - c , -- configuration FILE --help Show this message and exit. \u4f60\u53ef\u4ee5\u901a\u8fc7 --workers \u9009\u9879\u6307\u5b9a\u542f\u52a8\u7684\u8fdb\u7a0b\u6570\u91cf\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u5b83\u9ed8\u8ba4\u662f CPU \u6838\u5fc3\u6570\u3002 \u5982\u679c\u5f00\u542f\u4e86 --daemon \u9009\u9879\uff0cIndex \u5c06\u5728\u540e\u53f0\u8fd0\u884c\uff0c\u4e3b\u8fdb\u7a0b\u53f7\u4f1a\u88ab\u5199\u5165\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684 .pid \u4e2d\uff0c\u8fd0\u884c\u65e5\u5fd7\u5219\u5199\u5165\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684 log.index \u91cc\u3002 \u5047\u5982\u4f60\u9700\u8981\u7f16\u5199\u66f4\u591a\u7684 gunicorn \u914d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u7528 -c \u6765\u6307\u5b9a\u4e00\u4e2a .py \u4f5c\u4e3a\u914d\u7f6e\u6587\u4ef6\u3002\u8be6\u89c1 gunicorn \u6587\u6863 Notice \u6b64\u547d\u4ee4\u9700\u8981\u5b89\u88c5 gunicorn \u3002","title":"index-cli gunicorn start"},{"location":"command/#index-cli-gunicorn-stop","text":"\u5f53\u4f60\u4f7f\u7528 index-cli gunicorn start -d \u5728\u540e\u53f0\u542f\u52a8\u4e86 Index \u65f6\uff0c\u53ef\u4ee5\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u6267\u884c\u6b64\u547d\u4ee4\u53bb\u505c\u6b62 Index\u3002","title":"index-cli gunicorn stop"},{"location":"command/#index-cli-gunicorn-reload","text":"\u5f53\u4f60\u4f7f\u7528 index-cli gunicorn start -d \u5728\u540e\u53f0\u542f\u52a8\u4e86 Index \u65f6\uff0c\u53ef\u4ee5\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u6267\u884c\u6b64\u547d\u4ee4\u53bb\u91cd\u542f Index\u3002","title":"index-cli gunicorn reload"},{"location":"command/#_2","text":"Index \u4f7f\u7528\u4e86 click \u6765\u63d0\u4f9b\u547d\u4ee4\u652f\u6301\u3002 \u6240\u4ee5\u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\u547d\u4ee4\uff0c\u4f60\u53ea\u9700\u8981\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u65b0\u5efa\u4e00\u4e2a commands.py \u6587\u4ef6\uff0c\u5728\u5176\u4e2d\u6309\u7167 click \u7684\u89c4\u5219\u7f16\u5199\u81ea\u5df1\u7684\u547d\u4ee4\u3002","title":"\u81ea\u5b9a\u4e49\u547d\u4ee4"},{"location":"command/#_3","text":"\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684 commands.py \u91cc\u5199\u5165\u4ee5\u4e0b\u5185\u5bb9 from indexpy.cli import index_cli @index_cli . command ( help = 'Custom command' ) def only_print (): print ( 'Custom command' ) \u7136\u540e\u4f7f\u7528 index-cli --help \u80fd\u770b\u5230\u547d\u4ee4\u5df2\u7ecf\u88ab\u52a0\u5165\u4e86 \u276f index - cli -- help Usage : index - cli [ OPTIONS ] COMMAND [ ARGS ] ... Options : -- help Show this message and exit . Commands : gunicorn deploy by gunicorn only - print Custom command serve use only uvicorn","title":"\u4f8b\u5b50"},{"location":"event/","text":"Index \u5141\u8bb8\u6ce8\u518c\u82e5\u5e72\u4e2a\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\uff0c\u4ee5\u5904\u7406\u5728\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u4e4b\u524d\u6216\u5173\u95ed\u65f6\u9700\u8981\u8fd0\u884c\u7684\u4ee3\u7801\u3002 on_startup : Index \u542f\u52a8\u4e4b\u524d\u8fd0\u884c\u7684\u51fd\u6570 on_shutdown : Index \u5173\u95ed\u4e4b\u524d\u8fd0\u884c\u7684\u51fd\u6570 \u6ce8\u518c\u4e8b\u4ef6 \u4f60\u53ef\u4ee5\u7528\u88c5\u9970\u5668\u8bed\u6cd5\u6ce8\u518c\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\uff0c\u6ce8\u518c\u666e\u901a\u51fd\u6570\u6216\u7531 async def \u5b9a\u4e49\u7684\u5f02\u6b65\u51fd\u6570\u5747\u53ef\u3002 import logging from indexpy import Index app = Index () logger = logging . getLogger ( \"example\" ) @app . on_startup def logger_on_startup (): logger . info ( \"Called on startup\" ) @app . on_shutdown def logger_on_shutdown (): logger . info ( \"Called on shutdown\" )","title":"Lifespan"},{"location":"event/#_1","text":"\u4f60\u53ef\u4ee5\u7528\u88c5\u9970\u5668\u8bed\u6cd5\u6ce8\u518c\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\uff0c\u6ce8\u518c\u666e\u901a\u51fd\u6570\u6216\u7531 async def \u5b9a\u4e49\u7684\u5f02\u6b65\u51fd\u6570\u5747\u53ef\u3002 import logging from indexpy import Index app = Index () logger = logging . getLogger ( \"example\" ) @app . on_startup def logger_on_startup (): logger . info ( \"Called on startup\" ) @app . on_shutdown def logger_on_shutdown (): logger . info ( \"Called on shutdown\" )","title":"\u6ce8\u518c\u4e8b\u4ef6"},{"location":"http/","text":"HTTP \u5904\u7406\u5668 \u5728\u4e0b\u6587\u4e2d\uff0c\u7528\u4e8e\u5904\u7406 HTTP \u8bf7\u6c42\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u88ab\u79f0\u4e3a HTTP \u5904\u7406\u5668\u3002 \u51fd\u6570\u5904\u7406\u5668 \u4f7f\u7528\u51fd\u6570\u5904\u7406\u5355\u4e00\u7c7b\u578b\u7684\u8bf7\u6c42\u662f\u5f88\u7b80\u5355\u7684\uff0c\u5b83\u4f1a\u63a5\u53d7\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570 request \uff0c\u9ed8\u8ba4\u7c7b\u578b\u4e3a indexpy.http.request.Request \u3002 from indexpy import Index app = Index () @app . router . http ( \"/hello\" , method = \"get\" ) async def hello ( request ): return \"hello\" @app.router.http \u88c5\u9970\u5668\u5c06\u8fd4\u56de\u539f\u59cb\u7684\u51fd\u6570\uff0c\u6545\u800c\u53ef\u4ee5\u5c06\u540c\u4e00\u4e2a\u51fd\u6570\u6ce8\u518c\u5230\u591a\u4e2a\u8def\u7531\u4e0b\u3002 from indexpy import Index app = Index () @app . router . http ( \"/hello\" , method = \"get\" ) @app . router . http ( \"/hello/ {name} \" , method = \"get\" ) async def hello ( request ): if request . path_params : return f \"hello { request . path_params [ 'name' ] } \" return \"hello\" Tip \u5728\u51fd\u6570\u5904\u7406\u5668\u4e2d\u4e0d\u5141\u8bb8\u81ea\u884c\u7f16\u5199\u4ee3\u7801\u5904\u7406 options \u65b9\u6cd5\uff0c\u4f46\u62e5\u6709\u4e0e\u7c7b\u5904\u7406\u5668\u76f8\u540c\u7684\u5904\u7406 options \u7684\u9ed8\u8ba4\u7a0b\u5e8f\u3002 \u7c7b\u5904\u7406\u5668 \u4f7f\u7528\u7c7b\u5904\u7406\u591a\u79cd\u8bf7\u6c42\u5341\u5206\u7b80\u5355\u3002\u53ea\u9700\u8981\u7ee7\u627f indexpy.http.HTTPView \u5e76\u7f16\u5199\u5bf9\u5e94\u7684\u65b9\u6cd5\uff0c\u652f\u6301\u7684\u65b9\u6cd5\u6709 \"get\" \uff0c \"post\" \uff0c \"put\" \uff0c \"patch\" \uff0c \"delete\" \uff0c \"head\" \uff0c \"options\" \uff0c \"trace\" \u3002 Tip \u5bf9\u4e8e\u4e00\u822c\u7684\u8de8\u57df\u9700\u6c42\uff0c options \u65b9\u6cd5\u4e0d\u9700\u8981\u81ea\u884c\u7f16\u5199\uff0c\u505a\u597d \u8de8\u57df\u914d\u7f6e \u5373\u53ef\u3002 \u901a\u8fc7 self.request \u53ef\u4ee5\u8bfb\u53d6\u6b64\u6b21\u8bf7\u6c42\u7684\u4fe1\u606f\u3002 from indexpy import Index from indexpy.http import HTTPView app = Index () @app . router . http ( \"/cat\" ) class Cat ( HTTPView ): async def get ( self ): return self . request . method async def post ( self ): return self . request . method async def put ( self ): return self . request . method async def patch ( self ): return self . request . method async def delete ( self ): return self . request . method \u83b7\u53d6\u8bf7\u6c42\u503c \u4ee5\u4e0b\u662f indexpy.http.request.Request \u5bf9\u8c61\u7684\u5e38\u7528\u5c5e\u6027\u4e0e\u65b9\u6cd5\u3002 Method \u901a\u8fc7 request.method \u53ef\u4ee5\u83b7\u53d6\u5230\u8bf7\u6c42\u65b9\u6cd5\uff0c\u4f8b\u5982 get / post \u7b49\u3002 URL \u901a\u8fc7 request.url \u53ef\u4ee5\u83b7\u53d6\u5230\u8bf7\u6c42\u8def\u5f84\u3002\u8be5\u5c5e\u6027\u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u5b57\u7b26\u4e32\u7684\u5bf9\u8c61\uff0c\u5b83\u516c\u5f00\u4e86\u53ef\u4ee5\u4eceURL\u4e2d\u89e3\u6790\u51fa\u7684\u6240\u6709\u7ec4\u4ef6\u3002 \u4f8b\u5982\uff1a request.url.path , request.url.port , request.url.scheme Path Parameters request.path_params \u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u6240\u6709\u89e3\u6790\u51fa\u7684\u8def\u5f84\u53c2\u6570\u3002 Headers request.headers \u662f\u4e00\u4e2a\u5927\u5c0f\u5199\u65e0\u5173\u7684\u591a\u503c\u5b57\u5178(multi-dict)\u3002\u4f46\u901a\u8fc7 request.headers.keys() / request.headers.items() \u53d6\u51fa\u6765\u7684 key \u5747\u4e3a\u5c0f\u5199\u3002 Query Parameters request.query_params \u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u591a\u503c\u5b57\u5178(multi-dict)\u3002 \u4f8b\u5982\uff1a request.query_params['search'] Client Address request.client \u662f\u4e00\u4e2a namedtuple \uff0c\u5b9a\u4e49\u4e3a namedtuple(\"Address\", [\"host\", \"port\"]) \u3002 \u83b7\u53d6\u5ba2\u6237\u7aef hostname \u6216 IP \u5730\u5740: request.client.host \u3002 \u83b7\u53d6\u5ba2\u6237\u7aef\u5728\u5f53\u524d\u8fde\u63a5\u4e2d\u4f7f\u7528\u7684\u7aef\u53e3: request.client.port \u3002 Notice \u5143\u7ec4\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u90fd\u53ef\u80fd\u4e3a None\u3002\u8fd9\u53d7\u9650\u4e8e ASGI \u670d\u52a1\u5668\u4f20\u9012\u7684\u503c\u3002 Cookies request.cookies \u662f\u4e00\u4e2a\u6807\u51c6\u5b57\u5178\uff0c\u5b9a\u4e49\u4e3a Dict[str, str] \u3002 \u4f8b\u5982\uff1a request.cookies.get('mycookie') Notice \u4f60\u6ca1\u529e\u6cd5\u4ece request.cookies \u91cc\u8bfb\u53d6\u5230\u65e0\u6548\u7684 cookie (RFC2109) Body \u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u8bfb\u5230\u8bf7\u6c42\u4f53\u5185\u5bb9\uff1a await request.body() \uff1a\u8fd4\u56de\u4e00\u4e2a bytes \u3002 await request.form() \uff1a\u5c06 body \u4f5c\u4e3a\u8868\u5355\u8fdb\u884c\u89e3\u6790\u5e76\u8fd4\u56de\u7ed3\u679c\uff08\u591a\u503c\u5b57\u5178\uff09\u3002 await request.json() \uff1a\u5c06 body \u4f5c\u4e3a JSON \u5b57\u7b26\u4e32\u89e3\u6790\u5e76\u8fd4\u56de\u7ed3\u679c\u3002 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 async for \u8bed\u6cd5\u5c06 body \u4f5c\u4e3a\u4e00\u4e2a bytes \u6d41\u8fdb\u884c\u8bfb\u53d6\uff1a async def post ( request ): ... body = b '' async for chunk in request . stream (): body += chunk ... \u5982\u679c\u4f60\u76f4\u63a5\u4f7f\u7528\u4e86 request.stream() \u53bb\u8bfb\u53d6\u6570\u636e\uff0c\u90a3\u4e48\u8bf7\u6c42\u4f53\u5c06\u4e0d\u4f1a\u7f13\u5b58\u5728\u5185\u5b58\u4e2d\u3002\u5176\u540e\u4efb\u4f55\u5bf9 .body() / .form() / .json() \u7684\u8c03\u7528\u90fd\u5c06\u629b\u51fa\u9519\u8bef\u3002 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f8b\u5982\u957f\u8f6e\u8be2\u6216\u6d41\u5f0f\u54cd\u5e94\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u786e\u5b9a\u5ba2\u6237\u7aef\u662f\u5426\u5df2\u65ad\u5f00\u8fde\u63a5\u3002\u53ef\u4ee5\u4f7f\u7528 disconnected = await request.is_disconnected() \u786e\u5b9a\u6b64\u72b6\u6001\u3002 Request Files \u901a\u8fc7 await request.form() \u53ef\u4ee5\u89e3\u6790\u901a\u8fc7 multipart/form-data \u683c\u5f0f\u63a5\u6536\u5230\u7684\u8868\u5355\uff0c\u5305\u62ec\u6587\u4ef6\u3002 \u6587\u4ef6\u5c06\u88ab\u5305\u88c5\u4e3a starlette.datastructures.UploadFile \u5bf9\u8c61\uff0c\u5b83\u6709\u5982\u4e0b\u5c5e\u6027\uff1a filename: str : \u88ab\u63d0\u4ea4\u7684\u539f\u59cb\u6587\u4ef6\u540d\u79f0 (\u4f8b\u5982 myimage.jpg ). content_type: str : \u6587\u4ef6\u7c7b\u578b (MIME type / media type) (\u4f8b\u5982 image/jpeg ). file: tempfile.SpooledTemporaryFile : \u5b58\u50a8\u6587\u4ef6\u5185\u5bb9\u7684\u4e34\u65f6\u6587\u4ef6\uff08\u53ef\u4ee5\u76f4\u63a5\u8bfb\u5199\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u4f46\u6700\u597d\u4e0d\u8981\uff09\u3002 UploadFile \u8fd8\u6709\u56db\u4e2a\u5f02\u6b65\u65b9\u6cd5\uff1a async write(data: Union[str, bytes]) : \u5199\u5165\u6570\u636e\u5230\u6587\u4ef6\u4e2d\u3002 async read(size: int) : \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u3002 async seek(offset: int) : \u6587\u4ef6\u6307\u9488\u8df3\u8f6c\u5230\u6307\u5b9a\u4f4d\u7f6e\u3002 async close() : \u5173\u95ed\u6587\u4ef6\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u8bfb\u53d6\u539f\u59cb\u6587\u4ef6\u540d\u79f0\u548c\u5185\u5bb9\u7684\u4f8b\u5b50\uff1a form = await request . form () filename = form [ \"upload_file\" ] . filename contents = await form [ \"upload_file\" ] . read () State \u67d0\u4e9b\u60c5\u51b5\u4e0b\u9700\u8981\u50a8\u5b58\u4e00\u4e9b\u989d\u5916\u7684\u81ea\u5b9a\u4e49\u4fe1\u606f\u5230 request \u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 request.state \u7528\u4e8e\u5b58\u50a8\u3002 request . state . user = User ( name = \"Alice\" ) # \u5199 user_name = request . state . user . name # \u8bfb del request . state . user # \u5220 \u8fd4\u56de\u54cd\u5e94\u503c \u5bf9\u4e8e\u4efb\u4f55\u6b63\u5e38\u5904\u7406\u7684 HTTP \u8bf7\u6c42\u90fd\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a indexpy.http.responses.Response \u5bf9\u8c61\u6216\u8005\u662f\u5b83\u7684\u5b50\u7c7b\u5bf9\u8c61\u3002 \u5728 index.http.repsonses \u91cc\u5185\u7f6e\u7684\u53ef\u7528\u5bf9\u8c61\u5982\u4e0b\uff1a Response \u7b7e\u540d\uff1a Response(content, status_code=200, headers=None, media_type=None, background=None) content - \u4f5c\u4e3a\u54cd\u5e94\u5185\u5bb9\u7684 str \u6216 bytes \u5bf9\u8c61\u3002 status_code - HTTP \u72b6\u6001\u7801\u3002 headers - \u5b57\u7b26\u4e32\u5b57\u5178\u3002 media_type - \u54cd\u5e94\u5185\u5bb9\u7684 MIME \u7c7b\u578b \u3002\u4f8b\u5982\uff1a \"text/html\" \u3002 Response \u5c06\u81ea\u52a8\u5305\u542b Content-Length \u6807\u5934\u3002 \u5b83\u8fd8\u5c06\u5305\u542b\u4e00\u4e2a\u57fa\u4e8e media_type \u7684 Content-Type \u6807\u5934\uff0c\u5e76\u4e3a\u6587\u672c\u7c7b\u578b\u9644\u52a0\u4e00\u4e2a\u5b57\u7b26\u96c6\u3002 \u5b9e\u4f8b\u5316 Response \u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06\u5176\u4f5c\u4e3a ASGI \u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u8fdb\u884c\u8c03\u7528\u6765\u53d1\u9001\u54cd\u5e94\u3002 from indexpy.http.responses import Response async def app ( scope , receive , send ): assert scope [ 'type' ] == 'http' response = Response ( 'Hello, world!' , media_type = 'text/plain' ) await response ( scope , receive , send ) Set Cookie Response \u63d0\u4f9b set_cookie \u65b9\u6cd5\u4ee5\u5141\u8bb8\u4f60\u8bbe\u7f6e cookies\u3002 \u7b7e\u540d\uff1a Response.set_cookie(key, value=\"\", max_age=None, expires=None, path=\"/\", domain=None, secure=False, httponly=False, samesite=\"lax\") key: str \uff0c\u5c06\u6210\u4e3a Cookie \u7684\u952e\u3002 value: str = \"\" \uff0c\u5c06\u662f Cookie \u7684\u503c\u3002 max_age: Optional[int] \uff0c\u4ee5\u79d2\u4e3a\u5355\u4f4d\u5b9a\u4e49 Cookie \u7684\u751f\u5b58\u671f\u3002\u975e\u6b63\u6574\u6570\u4f1a\u7acb\u5373\u4e22\u5f03 Cookie\u3002 expires: Optional[int] \uff0c\u5b83\u5b9a\u4e49 Cookie \u8fc7\u671f\u4e4b\u524d\u7684\u79d2\u6570\u3002 path: str = \"/\" \uff0c\u5b83\u6307\u5b9a Cookie \u5c06\u5e94\u7528\u5230\u7684\u8def\u7531\u7684\u5b50\u96c6\u3002 domain: Optional[str] \uff0c\u7528\u4e8e\u6307\u5b9a Cookie \u5bf9\u5176\u6709\u6548\u7684\u57df\u3002 secure: bool = False \uff0c\u6307\u793a\u4ec5\u5f53\u4f7f\u7528 HTTPS \u534f\u8bae\u53d1\u51fa\u8bf7\u6c42\u65f6\uff0c\u624d\u4f1a\u5c06 Cookie \u53d1\u9001\u5230\u670d\u52a1\u5668\u3002 httponly: bool = False \uff0c\u6307\u793a\u65e0\u6cd5\u901a\u8fc7 Javascript \u901a\u8fc7 Document.cookie \u5c5e\u6027\u3001 XMLHttpRequest \u6216 Request \u7b49 API \u6765\u8bbf\u95ee Cookie\u3002 samesite: str = \"lax\" \uff0c\u7528\u4e8e\u6307\u5b9a Cookie \u7684\u76f8\u540c\u7f51\u7ad9\u7b56\u7565\u3002\u6709\u6548\u503c\u4e3a \"lax\" \uff0c \"strict\" \u548c \"none\" \u3002 Delete Cookie Response \u4e5f\u63d0\u4f9b\u4e86 delete_cookie \u65b9\u6cd5\u6307\u5b9a\u5df2\u8bbe\u7f6e\u7684 Cookie \u8fc7\u671f\u3002 \u7b7e\u540d: Response.delete_cookie(key, path='/', domain=None) HTMLResponse \u63a5\u53d7 str \u6216 bytes \u5e76\u8fd4\u56de HTML \u54cd\u5e94\u3002 from indexpy.http.responses import HTMLResponse async def app ( scope , receive , send ): assert scope [ 'type' ] == 'http' response = HTMLResponse ( '<html><body><h1>Hello, world!</h1></body></html>' ) await response ( scope , receive , send ) PlainTextResponse \u63a5\u53d7 str \u6216 bytes \u5e76\u8fd4\u56de\u7eaf\u6587\u672c\u54cd\u5e94\u3002 from indexpy.http.responses import PlainTextResponse async def app ( scope , receive , send ): assert scope [ 'type' ] == 'http' response = PlainTextResponse ( 'Hello, world!' ) await response ( scope , receive , send ) JSONResponse \u63a5\u53d7\u4e00\u4e9b\u6570\u636e\u5e76\u8fd4\u56de\u4e00\u4e2a application/json \u7f16\u7801\u7684\u54cd\u5e94\u3002 from indexpy.http.responses import JSONResponse async def app ( scope , receive , send ): assert scope [ 'type' ] == 'http' response = JSONResponse ({ 'hello' : 'world' }) await response ( scope , receive , send ) \u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u65b9\u6cd5 \u5f88\u591a\u65f6\u5019\uff0cPython \u5185\u7f6e\u7684 json \u6807\u51c6\u5e93\u65e0\u6cd5\u6ee1\u8db3\u5b9e\u9645\u9879\u76ee\u7684\u5e8f\u5217\u5316\u9700\u6c42\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u81ea\u5b9a\u4e49\u4e00\u4e2a JSONResponse \u6765\u4f7f\u7528\u4e86\u3002 import json import decimal import datetime from indexpy.http.responses import JSONResponse as _JSONResponse def json_encoder ( obj ): if isinstance ( obj , datetime . datetime ): return obj . strftime ( \"%Y-%m- %d %H:%M:%S\" ) if isinstance ( obj , datetime . date ): return obj . strftime ( \"%Y-%m- %d \" ) if isinstance ( obj , decimal . Decimal ): return str ( obj ) raise TypeError ( f 'Object of type { obj . __class__ . __name__ } is not JSON serializable' ) class CustomizeJSONResponse ( _JSONResponse ): def render ( self , content ) -> bytes : return json . dumps ( content , ensure_ascii = False , allow_nan = False , indent = None , separators = ( \",\" , \":\" ), default = json_encoder , ) . encode ( \"utf-8\" ) RedirectResponse \u8fd4\u56de HTTP \u91cd\u5b9a\u5411\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528 307 \u72b6\u6001\u4ee3\u7801\u3002 from indexpy.http.responses import PlainTextResponse , RedirectResponse async def app ( scope , receive , send ): assert scope [ 'type' ] == 'http' if scope [ 'path' ] != '/' : response = RedirectResponse ( url = '/' ) else : response = PlainTextResponse ( 'Hello, world!' ) await response ( scope , receive , send ) StreamingResponse \u63a5\u53d7\u4e00\u4e2a\u5f02\u6b65\u751f\u6210\u5668\u6216\u666e\u901a\u751f\u6210\u5668/\u8fed\u4ee3\u5668\uff0c\u6d41\u5f0f\u4f20\u8f93\u54cd\u5e94\u4e3b\u4f53\u3002 import asyncio from indexpy.http.responses import StreamingResponse async def slow_numbers ( minimum , maximum ): yield ( '<html><body><ul>' ) for number in range ( minimum , maximum + 1 ): yield '<li> %d </li>' % number await asyncio . sleep ( 0.5 ) yield ( '</ul></body></html>' ) async def app ( scope , receive , send ): assert scope [ 'type' ] == 'http' generator = slow_numbers ( 1 , 10 ) response = StreamingResponse ( generator , media_type = 'text/html' ) await response ( scope , receive , send ) FileResponse \u5f02\u6b65\u4f20\u8f93\u6587\u4ef6\u4f5c\u4e3a\u54cd\u5e94\u3002 \u4e0e\u5176\u4ed6\u54cd\u5e94\u7c7b\u578b\u76f8\u6bd4\uff0c\u91c7\u7528\u4e0d\u540c\u7684\u53c2\u6570\u8fdb\u884c\u5b9e\u4f8b\u5316\uff1a path - \u8981\u6d41\u5f0f\u4f20\u8f93\u7684\u6587\u4ef6\u7684\u6587\u4ef6\u8def\u5f84\u3002 headers - \u4e0e Response \u4e2d\u7684 headers \u53c2\u6570\u7684\u4f5c\u7528\u76f8\u540c\u3002 media_type - \u6587\u4ef6\u7684 MIME \u5a92\u4f53\u7c7b\u578b\u3002\u5982\u679c\u672a\u8bbe\u7f6e\uff0c\u5219\u6587\u4ef6\u540d\u6216\u8def\u5f84\u5c06\u7528\u4e8e\u63a8\u65ad\u5a92\u4f53\u7c7b\u578b\u3002 filename - \u5982\u679c\u8bbe\u7f6e\u6b64\u53c2\u6570\uff0c\u5b83\u5c06\u5305\u542b\u5728\u54cd\u5e94\u7684 Content-Disposition \u4e2d\u3002 FileResponse \u5c06\u81ea\u52a8\u8bbe\u7f6e\u9002\u5f53\u7684 Content-Length \u3001 Last-Modified \u548c ETag \u6807\u5934\u3002 TemplateResponse Index \u63d0\u4f9b\u4e86\u4fbf\u6377\u7684\u4f7f\u7528\u6a21\u677f\u7684\u65b9\u6cd5\u3002\u5982\u4e0b\u4ee3\u7801\u5c06\u4f1a\u81ea\u52a8\u5728\u9879\u76ee\u4e0b\u5bfb\u627e\u5bf9\u5e94\u7684\u6a21\u677f\u8fdb\u884c\u6e32\u67d3\u3002\uff08\u5177\u4f53\u884c\u4e3a\u7531 Index \u7684 templates \u53c2\u6570\u8fdb\u884c\u63a7\u5236\uff09 from indexpy.http import HTTPView from indexpy.http.responses import TemplateResponse class HTTP ( HTTPView ): def get ( self ): return TemplateResponse ( \"chat.html\" , { \"request\" : self . request }) YAMLResponse YAMLResponse \u4e0e JSONResponse \u7684\u4f7f\u7528\u65b9\u6cd5\u76f8\u540c\u3002 \u552f\u4e00\u4e0d\u540c\u7684\u662f\uff0c\u4e00\u4e2a\u8fd4\u56de YAML \u683c\u5f0f\uff0c\u4e00\u4e2a\u8fd4\u56de JSON \u683c\u5f0f\u3002 ServerSendEventResponse \u901a\u8fc7 ServerSendEventResponse \u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a Server Sent Events \u54cd\u5e94\uff0c\u8fd9\u662f\u4e00\u79cd HTTP \u957f\u8fde\u63a5\u54cd\u5e94\uff0c\u53ef\u5e94\u7528\u4e8e\u670d\u52a1\u5668\u5b9e\u65f6\u63a8\u9001\u6570\u636e\u5230\u5ba2\u6237\u7aef\u7b49\u573a\u666f\u3002 ServerSendEventResponse \u9664\u4e86\u53ef\u4ee5\u63a5\u53d7\u8bf8\u5982 status_code \u3001 headers \u7b49\u5e38\u89c4\u53c2\u6570\u5916\uff0c\u8fd8\u9700\u8981\u81ea\u884c\u4f20\u5165\u4e00\u4e2a\u7528\u4e8e\u751f\u6210\u6d88\u606f\u7684\u5f02\u6b65\u751f\u6210\u5668\u3002\u4f20\u5165\u7684\u5f02\u6b65\u751f\u6210\u5668 yield \u7684\u6bcf\u4e00\u6761\u6d88\u606f\u90fd\u9700\u8981\u4e3a\u5408\u89c4\u7684 Server-Sent Event \u6d88\u606f\uff08 str \u7c7b\u578b\uff09\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u4e0d\u53ef\u9884\u6599\u7684\u9519\u8bef\u3002 \u5982\u4e0b\u662f\u4e00\u4e2a\u6bcf\u9694\u4e00\u79d2\u53d1\u9001\u4e00\u6761 hello \u6d88\u606f\u3001\u4e00\u5171\u53d1\u9001\u4e00\u767e\u96f6\u4e00\u6761\u6d88\u606f\u7684\u6837\u4f8b\u3002 import asyncio from indexpy import Index from indexpy.http.responses import EventResponse app = Index () @app . router . http ( \"/message\" , method = \"get\" ) async def message ( request ): async def message_gen (): for _ in range ( 101 ): await asyncio . sleep ( 1 ) yield \"event: message \\r\\n data: {'name': 'Aber', 'body': 'hello'}\" return EventResponse ( message_gen ()) \u54cd\u5e94\u7684\u7b80\u5316\u5199\u6cd5 \u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528\uff0cIndex \u5141\u8bb8\u81ea\u5b9a\u4e49\u4e00\u4e9b\u51fd\u6570\u6765\u5904\u7406 HTTP \u5185\u8fd4\u56de\u7684\u975e Response \u5bf9\u8c61\u3002\u5b83\u7684\u539f\u7406\u662f\u62e6\u622a\u54cd\u5e94\uff0c\u901a\u8fc7\u54cd\u5e94\u503c\u7684\u7c7b\u578b\u6765\u81ea\u52a8\u9009\u62e9\u5904\u7406\u51fd\u6570\uff0c\u628a\u975e Response \u5bf9\u8c61\u8f6c\u6362\u4e3a Response \u5bf9\u8c61\u3002 Tip \u5982\u679c\u9700\u8981\u624b\u52a8\u628a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u8f6c\u6362\u4e3a Response \u5bf9\u8c61\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 indexpy.http.responses.convert \u3002 Index \u5185\u7f6e\u4e86\u4e09\u4e2a\u5904\u7406\u51fd\u6570\u7528\u4e8e\u5904\u7406\u516d\u79cd\u7c7b\u578b\uff1a @automatic . register ( type ( None )) def _none ( ret : typing . Type [ None ]) -> typing . NoReturn : raise TypeError ( \"Get 'None'. Maybe you need to add a return statement to the function.\" ) @automatic . register ( tuple ) @automatic . register ( list ) @automatic . register ( dict ) def _json ( body : typing . Tuple [ tuple , list , dict ], status : int = 200 , headers : dict = None ) -> Response : return JSONResponse ( body , status , headers ) @automatic . register ( str ) @automatic . register ( bytes ) def _plain_text ( body : typing . Union [ str , bytes ], status : int = 200 , headers : dict = None ) -> Response : return PlainTextResponse ( body , status , headers ) \u6b63\u662f\u6709\u4e86\u8fd9\u4e9b\u5185\u7f6e\u5904\u7406\u51fd\u6570\uff0c\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u5c06\u88ab\u6b63\u786e\u89e3\u6790\u4e3a\u4e00\u4e2a JSON \u54cd\u5e94\u3002 from indexpy.http import HTTPView class HTTP ( HTTPView ): def get ( self ): return { \"key\" : \"value\" } \u540c\u6837\u7684\uff0c\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u54cd\u5e94\u503c\u7684\u7b80\u5316\u5199\u6cd5\u4ee5\u7edf\u4e00\u9879\u76ee\u7684\u54cd\u5e94\u89c4\u8303\uff08\u54ea\u6015\u6709 TypedDict \uff0cPython \u7684 Dict \u7ea6\u675f\u4f9d\u65e7\u5f88\u5f31\uff0c\u4f46 dataclass \u5219\u6709\u6548\u5f97\u591a\uff09\uff0c\u4f8b\u5982\uff1a from dataclasses import dataclass , asdict from indexpy.http.responses import automatic , Response , JSONResponse @dataclass class Error : code : int = 0 title : str = \"\" message : str = \"\" @automatic . register ( Error ) def _error_json ( error : Error , status : int = 400 ) -> Response : return JSONResponse ( asdict ( error ), status ) \u6216\u8005\u4f60\u60f3\u8986\u76d6\u9ed8\u8ba4\u7684 tuple / list / dict \u6240\u5bf9\u5e94\u7684 JSONResponse \uff08\u4ee5\u4e0a\u6587\u4e2d\u81ea\u5b9a\u4e49 JSON \u5e8f\u5217\u5316\u4e3a\u4f8b\uff09\uff1a from indexpy.http.responses import automatic , Response ... @automatic . register ( tuple ) @automatic . register ( list ) @automatic . register ( dict ) def _more_json ( body : dict , status : int = 200 , headers : dict = None ) -> Response : return CustomizeJSONResponse ( body , status , headers ) \u9ed8\u8ba4\u54cd\u5e94 \u5f53\u4f60\u9700\u8981\u8fd4\u56de\u4e00\u4e2a HTTP \u72b6\u6001\u7801\u4ee5\u53ca\u5176\u9ed8\u8ba4\u7684\u63cf\u8ff0\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 raise indexpy . http . HTTPException ( CODE ) \u5176\u597d\u5904\u5728\u4e8e\u4f60\u53ef\u4ee5\u901a\u8fc7 \u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406 \u6765\u6355\u6349\u5e76\u81ea\u5b9a\u4e49\u5b83\u4eec\u3002 \u4f8b\u5982\uff1a\u7f51\u7ad9\u9700\u8981\u6709\u7edf\u4e00\u7684 404 \u9875\u9762\u3002 \u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406 \u5bf9\u4e8e\u4e00\u4e9b\u6545\u610f\u629b\u51fa\u7684\u5f02\u5e38\uff0cIndex \u63d0\u4f9b\u4e86\u65b9\u6cd5\u8fdb\u884c\u7edf\u4e00\u5904\u7406\u3002 \u4ee5\u4e0b\u4e3a\u6837\u4f8b\uff1a from indexpy import Index from indexpy.http import HTTPException , Request from indexpy.http.responses import Response , PlainTextResponse app = Index () @app . exception_handler ( 404 ) def not_found ( request : Request , exc : HTTPException ) -> Response : return PlainTextResponse ( \"what do you want to do?\" , status_code = 404 ) @app . exception_handler ( ValueError ) def value_error ( request : Request , exc : ValueError ) -> Response : return PlainTextResponse ( \"Something went wrong with the server.\" , status_code = 500 )","title":"HTTP"},{"location":"http/#http","text":"\u5728\u4e0b\u6587\u4e2d\uff0c\u7528\u4e8e\u5904\u7406 HTTP \u8bf7\u6c42\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u88ab\u79f0\u4e3a HTTP \u5904\u7406\u5668\u3002","title":"HTTP \u5904\u7406\u5668"},{"location":"http/#_1","text":"\u4f7f\u7528\u51fd\u6570\u5904\u7406\u5355\u4e00\u7c7b\u578b\u7684\u8bf7\u6c42\u662f\u5f88\u7b80\u5355\u7684\uff0c\u5b83\u4f1a\u63a5\u53d7\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570 request \uff0c\u9ed8\u8ba4\u7c7b\u578b\u4e3a indexpy.http.request.Request \u3002 from indexpy import Index app = Index () @app . router . http ( \"/hello\" , method = \"get\" ) async def hello ( request ): return \"hello\" @app.router.http \u88c5\u9970\u5668\u5c06\u8fd4\u56de\u539f\u59cb\u7684\u51fd\u6570\uff0c\u6545\u800c\u53ef\u4ee5\u5c06\u540c\u4e00\u4e2a\u51fd\u6570\u6ce8\u518c\u5230\u591a\u4e2a\u8def\u7531\u4e0b\u3002 from indexpy import Index app = Index () @app . router . http ( \"/hello\" , method = \"get\" ) @app . router . http ( \"/hello/ {name} \" , method = \"get\" ) async def hello ( request ): if request . path_params : return f \"hello { request . path_params [ 'name' ] } \" return \"hello\" Tip \u5728\u51fd\u6570\u5904\u7406\u5668\u4e2d\u4e0d\u5141\u8bb8\u81ea\u884c\u7f16\u5199\u4ee3\u7801\u5904\u7406 options \u65b9\u6cd5\uff0c\u4f46\u62e5\u6709\u4e0e\u7c7b\u5904\u7406\u5668\u76f8\u540c\u7684\u5904\u7406 options \u7684\u9ed8\u8ba4\u7a0b\u5e8f\u3002","title":"\u51fd\u6570\u5904\u7406\u5668"},{"location":"http/#_2","text":"\u4f7f\u7528\u7c7b\u5904\u7406\u591a\u79cd\u8bf7\u6c42\u5341\u5206\u7b80\u5355\u3002\u53ea\u9700\u8981\u7ee7\u627f indexpy.http.HTTPView \u5e76\u7f16\u5199\u5bf9\u5e94\u7684\u65b9\u6cd5\uff0c\u652f\u6301\u7684\u65b9\u6cd5\u6709 \"get\" \uff0c \"post\" \uff0c \"put\" \uff0c \"patch\" \uff0c \"delete\" \uff0c \"head\" \uff0c \"options\" \uff0c \"trace\" \u3002 Tip \u5bf9\u4e8e\u4e00\u822c\u7684\u8de8\u57df\u9700\u6c42\uff0c options \u65b9\u6cd5\u4e0d\u9700\u8981\u81ea\u884c\u7f16\u5199\uff0c\u505a\u597d \u8de8\u57df\u914d\u7f6e \u5373\u53ef\u3002 \u901a\u8fc7 self.request \u53ef\u4ee5\u8bfb\u53d6\u6b64\u6b21\u8bf7\u6c42\u7684\u4fe1\u606f\u3002 from indexpy import Index from indexpy.http import HTTPView app = Index () @app . router . http ( \"/cat\" ) class Cat ( HTTPView ): async def get ( self ): return self . request . method async def post ( self ): return self . request . method async def put ( self ): return self . request . method async def patch ( self ): return self . request . method async def delete ( self ): return self . request . method","title":"\u7c7b\u5904\u7406\u5668"},{"location":"http/#_3","text":"\u4ee5\u4e0b\u662f indexpy.http.request.Request \u5bf9\u8c61\u7684\u5e38\u7528\u5c5e\u6027\u4e0e\u65b9\u6cd5\u3002","title":"\u83b7\u53d6\u8bf7\u6c42\u503c"},{"location":"http/#method","text":"\u901a\u8fc7 request.method \u53ef\u4ee5\u83b7\u53d6\u5230\u8bf7\u6c42\u65b9\u6cd5\uff0c\u4f8b\u5982 get / post \u7b49\u3002","title":"Method"},{"location":"http/#url","text":"\u901a\u8fc7 request.url \u53ef\u4ee5\u83b7\u53d6\u5230\u8bf7\u6c42\u8def\u5f84\u3002\u8be5\u5c5e\u6027\u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u5b57\u7b26\u4e32\u7684\u5bf9\u8c61\uff0c\u5b83\u516c\u5f00\u4e86\u53ef\u4ee5\u4eceURL\u4e2d\u89e3\u6790\u51fa\u7684\u6240\u6709\u7ec4\u4ef6\u3002 \u4f8b\u5982\uff1a request.url.path , request.url.port , request.url.scheme","title":"URL"},{"location":"http/#path-parameters","text":"request.path_params \u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u6240\u6709\u89e3\u6790\u51fa\u7684\u8def\u5f84\u53c2\u6570\u3002","title":"Path Parameters"},{"location":"http/#headers","text":"request.headers \u662f\u4e00\u4e2a\u5927\u5c0f\u5199\u65e0\u5173\u7684\u591a\u503c\u5b57\u5178(multi-dict)\u3002\u4f46\u901a\u8fc7 request.headers.keys() / request.headers.items() \u53d6\u51fa\u6765\u7684 key \u5747\u4e3a\u5c0f\u5199\u3002","title":"Headers"},{"location":"http/#query-parameters","text":"request.query_params \u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u591a\u503c\u5b57\u5178(multi-dict)\u3002 \u4f8b\u5982\uff1a request.query_params['search']","title":"Query Parameters"},{"location":"http/#client-address","text":"request.client \u662f\u4e00\u4e2a namedtuple \uff0c\u5b9a\u4e49\u4e3a namedtuple(\"Address\", [\"host\", \"port\"]) \u3002 \u83b7\u53d6\u5ba2\u6237\u7aef hostname \u6216 IP \u5730\u5740: request.client.host \u3002 \u83b7\u53d6\u5ba2\u6237\u7aef\u5728\u5f53\u524d\u8fde\u63a5\u4e2d\u4f7f\u7528\u7684\u7aef\u53e3: request.client.port \u3002 Notice \u5143\u7ec4\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u90fd\u53ef\u80fd\u4e3a None\u3002\u8fd9\u53d7\u9650\u4e8e ASGI \u670d\u52a1\u5668\u4f20\u9012\u7684\u503c\u3002","title":"Client Address"},{"location":"http/#cookies","text":"request.cookies \u662f\u4e00\u4e2a\u6807\u51c6\u5b57\u5178\uff0c\u5b9a\u4e49\u4e3a Dict[str, str] \u3002 \u4f8b\u5982\uff1a request.cookies.get('mycookie') Notice \u4f60\u6ca1\u529e\u6cd5\u4ece request.cookies \u91cc\u8bfb\u53d6\u5230\u65e0\u6548\u7684 cookie (RFC2109)","title":"Cookies"},{"location":"http/#body","text":"\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u8bfb\u5230\u8bf7\u6c42\u4f53\u5185\u5bb9\uff1a await request.body() \uff1a\u8fd4\u56de\u4e00\u4e2a bytes \u3002 await request.form() \uff1a\u5c06 body \u4f5c\u4e3a\u8868\u5355\u8fdb\u884c\u89e3\u6790\u5e76\u8fd4\u56de\u7ed3\u679c\uff08\u591a\u503c\u5b57\u5178\uff09\u3002 await request.json() \uff1a\u5c06 body \u4f5c\u4e3a JSON \u5b57\u7b26\u4e32\u89e3\u6790\u5e76\u8fd4\u56de\u7ed3\u679c\u3002 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 async for \u8bed\u6cd5\u5c06 body \u4f5c\u4e3a\u4e00\u4e2a bytes \u6d41\u8fdb\u884c\u8bfb\u53d6\uff1a async def post ( request ): ... body = b '' async for chunk in request . stream (): body += chunk ... \u5982\u679c\u4f60\u76f4\u63a5\u4f7f\u7528\u4e86 request.stream() \u53bb\u8bfb\u53d6\u6570\u636e\uff0c\u90a3\u4e48\u8bf7\u6c42\u4f53\u5c06\u4e0d\u4f1a\u7f13\u5b58\u5728\u5185\u5b58\u4e2d\u3002\u5176\u540e\u4efb\u4f55\u5bf9 .body() / .form() / .json() \u7684\u8c03\u7528\u90fd\u5c06\u629b\u51fa\u9519\u8bef\u3002 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f8b\u5982\u957f\u8f6e\u8be2\u6216\u6d41\u5f0f\u54cd\u5e94\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u786e\u5b9a\u5ba2\u6237\u7aef\u662f\u5426\u5df2\u65ad\u5f00\u8fde\u63a5\u3002\u53ef\u4ee5\u4f7f\u7528 disconnected = await request.is_disconnected() \u786e\u5b9a\u6b64\u72b6\u6001\u3002","title":"Body"},{"location":"http/#request-files","text":"\u901a\u8fc7 await request.form() \u53ef\u4ee5\u89e3\u6790\u901a\u8fc7 multipart/form-data \u683c\u5f0f\u63a5\u6536\u5230\u7684\u8868\u5355\uff0c\u5305\u62ec\u6587\u4ef6\u3002 \u6587\u4ef6\u5c06\u88ab\u5305\u88c5\u4e3a starlette.datastructures.UploadFile \u5bf9\u8c61\uff0c\u5b83\u6709\u5982\u4e0b\u5c5e\u6027\uff1a filename: str : \u88ab\u63d0\u4ea4\u7684\u539f\u59cb\u6587\u4ef6\u540d\u79f0 (\u4f8b\u5982 myimage.jpg ). content_type: str : \u6587\u4ef6\u7c7b\u578b (MIME type / media type) (\u4f8b\u5982 image/jpeg ). file: tempfile.SpooledTemporaryFile : \u5b58\u50a8\u6587\u4ef6\u5185\u5bb9\u7684\u4e34\u65f6\u6587\u4ef6\uff08\u53ef\u4ee5\u76f4\u63a5\u8bfb\u5199\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u4f46\u6700\u597d\u4e0d\u8981\uff09\u3002 UploadFile \u8fd8\u6709\u56db\u4e2a\u5f02\u6b65\u65b9\u6cd5\uff1a async write(data: Union[str, bytes]) : \u5199\u5165\u6570\u636e\u5230\u6587\u4ef6\u4e2d\u3002 async read(size: int) : \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u3002 async seek(offset: int) : \u6587\u4ef6\u6307\u9488\u8df3\u8f6c\u5230\u6307\u5b9a\u4f4d\u7f6e\u3002 async close() : \u5173\u95ed\u6587\u4ef6\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u8bfb\u53d6\u539f\u59cb\u6587\u4ef6\u540d\u79f0\u548c\u5185\u5bb9\u7684\u4f8b\u5b50\uff1a form = await request . form () filename = form [ \"upload_file\" ] . filename contents = await form [ \"upload_file\" ] . read ()","title":"Request Files"},{"location":"http/#state","text":"\u67d0\u4e9b\u60c5\u51b5\u4e0b\u9700\u8981\u50a8\u5b58\u4e00\u4e9b\u989d\u5916\u7684\u81ea\u5b9a\u4e49\u4fe1\u606f\u5230 request \u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 request.state \u7528\u4e8e\u5b58\u50a8\u3002 request . state . user = User ( name = \"Alice\" ) # \u5199 user_name = request . state . user . name # \u8bfb del request . state . user # \u5220","title":"State"},{"location":"http/#_4","text":"\u5bf9\u4e8e\u4efb\u4f55\u6b63\u5e38\u5904\u7406\u7684 HTTP \u8bf7\u6c42\u90fd\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a indexpy.http.responses.Response \u5bf9\u8c61\u6216\u8005\u662f\u5b83\u7684\u5b50\u7c7b\u5bf9\u8c61\u3002 \u5728 index.http.repsonses \u91cc\u5185\u7f6e\u7684\u53ef\u7528\u5bf9\u8c61\u5982\u4e0b\uff1a","title":"\u8fd4\u56de\u54cd\u5e94\u503c"},{"location":"http/#response","text":"\u7b7e\u540d\uff1a Response(content, status_code=200, headers=None, media_type=None, background=None) content - \u4f5c\u4e3a\u54cd\u5e94\u5185\u5bb9\u7684 str \u6216 bytes \u5bf9\u8c61\u3002 status_code - HTTP \u72b6\u6001\u7801\u3002 headers - \u5b57\u7b26\u4e32\u5b57\u5178\u3002 media_type - \u54cd\u5e94\u5185\u5bb9\u7684 MIME \u7c7b\u578b \u3002\u4f8b\u5982\uff1a \"text/html\" \u3002 Response \u5c06\u81ea\u52a8\u5305\u542b Content-Length \u6807\u5934\u3002 \u5b83\u8fd8\u5c06\u5305\u542b\u4e00\u4e2a\u57fa\u4e8e media_type \u7684 Content-Type \u6807\u5934\uff0c\u5e76\u4e3a\u6587\u672c\u7c7b\u578b\u9644\u52a0\u4e00\u4e2a\u5b57\u7b26\u96c6\u3002 \u5b9e\u4f8b\u5316 Response \u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06\u5176\u4f5c\u4e3a ASGI \u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u8fdb\u884c\u8c03\u7528\u6765\u53d1\u9001\u54cd\u5e94\u3002 from indexpy.http.responses import Response async def app ( scope , receive , send ): assert scope [ 'type' ] == 'http' response = Response ( 'Hello, world!' , media_type = 'text/plain' ) await response ( scope , receive , send )","title":"Response"},{"location":"http/#set-cookie","text":"Response \u63d0\u4f9b set_cookie \u65b9\u6cd5\u4ee5\u5141\u8bb8\u4f60\u8bbe\u7f6e cookies\u3002 \u7b7e\u540d\uff1a Response.set_cookie(key, value=\"\", max_age=None, expires=None, path=\"/\", domain=None, secure=False, httponly=False, samesite=\"lax\") key: str \uff0c\u5c06\u6210\u4e3a Cookie \u7684\u952e\u3002 value: str = \"\" \uff0c\u5c06\u662f Cookie \u7684\u503c\u3002 max_age: Optional[int] \uff0c\u4ee5\u79d2\u4e3a\u5355\u4f4d\u5b9a\u4e49 Cookie \u7684\u751f\u5b58\u671f\u3002\u975e\u6b63\u6574\u6570\u4f1a\u7acb\u5373\u4e22\u5f03 Cookie\u3002 expires: Optional[int] \uff0c\u5b83\u5b9a\u4e49 Cookie \u8fc7\u671f\u4e4b\u524d\u7684\u79d2\u6570\u3002 path: str = \"/\" \uff0c\u5b83\u6307\u5b9a Cookie \u5c06\u5e94\u7528\u5230\u7684\u8def\u7531\u7684\u5b50\u96c6\u3002 domain: Optional[str] \uff0c\u7528\u4e8e\u6307\u5b9a Cookie \u5bf9\u5176\u6709\u6548\u7684\u57df\u3002 secure: bool = False \uff0c\u6307\u793a\u4ec5\u5f53\u4f7f\u7528 HTTPS \u534f\u8bae\u53d1\u51fa\u8bf7\u6c42\u65f6\uff0c\u624d\u4f1a\u5c06 Cookie \u53d1\u9001\u5230\u670d\u52a1\u5668\u3002 httponly: bool = False \uff0c\u6307\u793a\u65e0\u6cd5\u901a\u8fc7 Javascript \u901a\u8fc7 Document.cookie \u5c5e\u6027\u3001 XMLHttpRequest \u6216 Request \u7b49 API \u6765\u8bbf\u95ee Cookie\u3002 samesite: str = \"lax\" \uff0c\u7528\u4e8e\u6307\u5b9a Cookie \u7684\u76f8\u540c\u7f51\u7ad9\u7b56\u7565\u3002\u6709\u6548\u503c\u4e3a \"lax\" \uff0c \"strict\" \u548c \"none\" \u3002","title":"Set Cookie"},{"location":"http/#delete-cookie","text":"Response \u4e5f\u63d0\u4f9b\u4e86 delete_cookie \u65b9\u6cd5\u6307\u5b9a\u5df2\u8bbe\u7f6e\u7684 Cookie \u8fc7\u671f\u3002 \u7b7e\u540d: Response.delete_cookie(key, path='/', domain=None)","title":"Delete Cookie"},{"location":"http/#htmlresponse","text":"\u63a5\u53d7 str \u6216 bytes \u5e76\u8fd4\u56de HTML \u54cd\u5e94\u3002 from indexpy.http.responses import HTMLResponse async def app ( scope , receive , send ): assert scope [ 'type' ] == 'http' response = HTMLResponse ( '<html><body><h1>Hello, world!</h1></body></html>' ) await response ( scope , receive , send )","title":"HTMLResponse"},{"location":"http/#plaintextresponse","text":"\u63a5\u53d7 str \u6216 bytes \u5e76\u8fd4\u56de\u7eaf\u6587\u672c\u54cd\u5e94\u3002 from indexpy.http.responses import PlainTextResponse async def app ( scope , receive , send ): assert scope [ 'type' ] == 'http' response = PlainTextResponse ( 'Hello, world!' ) await response ( scope , receive , send )","title":"PlainTextResponse"},{"location":"http/#jsonresponse","text":"\u63a5\u53d7\u4e00\u4e9b\u6570\u636e\u5e76\u8fd4\u56de\u4e00\u4e2a application/json \u7f16\u7801\u7684\u54cd\u5e94\u3002 from indexpy.http.responses import JSONResponse async def app ( scope , receive , send ): assert scope [ 'type' ] == 'http' response = JSONResponse ({ 'hello' : 'world' }) await response ( scope , receive , send )","title":"JSONResponse"},{"location":"http/#_5","text":"\u5f88\u591a\u65f6\u5019\uff0cPython \u5185\u7f6e\u7684 json \u6807\u51c6\u5e93\u65e0\u6cd5\u6ee1\u8db3\u5b9e\u9645\u9879\u76ee\u7684\u5e8f\u5217\u5316\u9700\u6c42\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u81ea\u5b9a\u4e49\u4e00\u4e2a JSONResponse \u6765\u4f7f\u7528\u4e86\u3002 import json import decimal import datetime from indexpy.http.responses import JSONResponse as _JSONResponse def json_encoder ( obj ): if isinstance ( obj , datetime . datetime ): return obj . strftime ( \"%Y-%m- %d %H:%M:%S\" ) if isinstance ( obj , datetime . date ): return obj . strftime ( \"%Y-%m- %d \" ) if isinstance ( obj , decimal . Decimal ): return str ( obj ) raise TypeError ( f 'Object of type { obj . __class__ . __name__ } is not JSON serializable' ) class CustomizeJSONResponse ( _JSONResponse ): def render ( self , content ) -> bytes : return json . dumps ( content , ensure_ascii = False , allow_nan = False , indent = None , separators = ( \",\" , \":\" ), default = json_encoder , ) . encode ( \"utf-8\" )","title":"\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u65b9\u6cd5"},{"location":"http/#redirectresponse","text":"\u8fd4\u56de HTTP \u91cd\u5b9a\u5411\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528 307 \u72b6\u6001\u4ee3\u7801\u3002 from indexpy.http.responses import PlainTextResponse , RedirectResponse async def app ( scope , receive , send ): assert scope [ 'type' ] == 'http' if scope [ 'path' ] != '/' : response = RedirectResponse ( url = '/' ) else : response = PlainTextResponse ( 'Hello, world!' ) await response ( scope , receive , send )","title":"RedirectResponse"},{"location":"http/#streamingresponse","text":"\u63a5\u53d7\u4e00\u4e2a\u5f02\u6b65\u751f\u6210\u5668\u6216\u666e\u901a\u751f\u6210\u5668/\u8fed\u4ee3\u5668\uff0c\u6d41\u5f0f\u4f20\u8f93\u54cd\u5e94\u4e3b\u4f53\u3002 import asyncio from indexpy.http.responses import StreamingResponse async def slow_numbers ( minimum , maximum ): yield ( '<html><body><ul>' ) for number in range ( minimum , maximum + 1 ): yield '<li> %d </li>' % number await asyncio . sleep ( 0.5 ) yield ( '</ul></body></html>' ) async def app ( scope , receive , send ): assert scope [ 'type' ] == 'http' generator = slow_numbers ( 1 , 10 ) response = StreamingResponse ( generator , media_type = 'text/html' ) await response ( scope , receive , send )","title":"StreamingResponse"},{"location":"http/#fileresponse","text":"\u5f02\u6b65\u4f20\u8f93\u6587\u4ef6\u4f5c\u4e3a\u54cd\u5e94\u3002 \u4e0e\u5176\u4ed6\u54cd\u5e94\u7c7b\u578b\u76f8\u6bd4\uff0c\u91c7\u7528\u4e0d\u540c\u7684\u53c2\u6570\u8fdb\u884c\u5b9e\u4f8b\u5316\uff1a path - \u8981\u6d41\u5f0f\u4f20\u8f93\u7684\u6587\u4ef6\u7684\u6587\u4ef6\u8def\u5f84\u3002 headers - \u4e0e Response \u4e2d\u7684 headers \u53c2\u6570\u7684\u4f5c\u7528\u76f8\u540c\u3002 media_type - \u6587\u4ef6\u7684 MIME \u5a92\u4f53\u7c7b\u578b\u3002\u5982\u679c\u672a\u8bbe\u7f6e\uff0c\u5219\u6587\u4ef6\u540d\u6216\u8def\u5f84\u5c06\u7528\u4e8e\u63a8\u65ad\u5a92\u4f53\u7c7b\u578b\u3002 filename - \u5982\u679c\u8bbe\u7f6e\u6b64\u53c2\u6570\uff0c\u5b83\u5c06\u5305\u542b\u5728\u54cd\u5e94\u7684 Content-Disposition \u4e2d\u3002 FileResponse \u5c06\u81ea\u52a8\u8bbe\u7f6e\u9002\u5f53\u7684 Content-Length \u3001 Last-Modified \u548c ETag \u6807\u5934\u3002","title":"FileResponse"},{"location":"http/#templateresponse","text":"Index \u63d0\u4f9b\u4e86\u4fbf\u6377\u7684\u4f7f\u7528\u6a21\u677f\u7684\u65b9\u6cd5\u3002\u5982\u4e0b\u4ee3\u7801\u5c06\u4f1a\u81ea\u52a8\u5728\u9879\u76ee\u4e0b\u5bfb\u627e\u5bf9\u5e94\u7684\u6a21\u677f\u8fdb\u884c\u6e32\u67d3\u3002\uff08\u5177\u4f53\u884c\u4e3a\u7531 Index \u7684 templates \u53c2\u6570\u8fdb\u884c\u63a7\u5236\uff09 from indexpy.http import HTTPView from indexpy.http.responses import TemplateResponse class HTTP ( HTTPView ): def get ( self ): return TemplateResponse ( \"chat.html\" , { \"request\" : self . request })","title":"TemplateResponse"},{"location":"http/#yamlresponse","text":"YAMLResponse \u4e0e JSONResponse \u7684\u4f7f\u7528\u65b9\u6cd5\u76f8\u540c\u3002 \u552f\u4e00\u4e0d\u540c\u7684\u662f\uff0c\u4e00\u4e2a\u8fd4\u56de YAML \u683c\u5f0f\uff0c\u4e00\u4e2a\u8fd4\u56de JSON \u683c\u5f0f\u3002","title":"YAMLResponse"},{"location":"http/#serversendeventresponse","text":"\u901a\u8fc7 ServerSendEventResponse \u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a Server Sent Events \u54cd\u5e94\uff0c\u8fd9\u662f\u4e00\u79cd HTTP \u957f\u8fde\u63a5\u54cd\u5e94\uff0c\u53ef\u5e94\u7528\u4e8e\u670d\u52a1\u5668\u5b9e\u65f6\u63a8\u9001\u6570\u636e\u5230\u5ba2\u6237\u7aef\u7b49\u573a\u666f\u3002 ServerSendEventResponse \u9664\u4e86\u53ef\u4ee5\u63a5\u53d7\u8bf8\u5982 status_code \u3001 headers \u7b49\u5e38\u89c4\u53c2\u6570\u5916\uff0c\u8fd8\u9700\u8981\u81ea\u884c\u4f20\u5165\u4e00\u4e2a\u7528\u4e8e\u751f\u6210\u6d88\u606f\u7684\u5f02\u6b65\u751f\u6210\u5668\u3002\u4f20\u5165\u7684\u5f02\u6b65\u751f\u6210\u5668 yield \u7684\u6bcf\u4e00\u6761\u6d88\u606f\u90fd\u9700\u8981\u4e3a\u5408\u89c4\u7684 Server-Sent Event \u6d88\u606f\uff08 str \u7c7b\u578b\uff09\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u4e0d\u53ef\u9884\u6599\u7684\u9519\u8bef\u3002 \u5982\u4e0b\u662f\u4e00\u4e2a\u6bcf\u9694\u4e00\u79d2\u53d1\u9001\u4e00\u6761 hello \u6d88\u606f\u3001\u4e00\u5171\u53d1\u9001\u4e00\u767e\u96f6\u4e00\u6761\u6d88\u606f\u7684\u6837\u4f8b\u3002 import asyncio from indexpy import Index from indexpy.http.responses import EventResponse app = Index () @app . router . http ( \"/message\" , method = \"get\" ) async def message ( request ): async def message_gen (): for _ in range ( 101 ): await asyncio . sleep ( 1 ) yield \"event: message \\r\\n data: {'name': 'Aber', 'body': 'hello'}\" return EventResponse ( message_gen ())","title":"ServerSendEventResponse"},{"location":"http/#_6","text":"\u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528\uff0cIndex \u5141\u8bb8\u81ea\u5b9a\u4e49\u4e00\u4e9b\u51fd\u6570\u6765\u5904\u7406 HTTP \u5185\u8fd4\u56de\u7684\u975e Response \u5bf9\u8c61\u3002\u5b83\u7684\u539f\u7406\u662f\u62e6\u622a\u54cd\u5e94\uff0c\u901a\u8fc7\u54cd\u5e94\u503c\u7684\u7c7b\u578b\u6765\u81ea\u52a8\u9009\u62e9\u5904\u7406\u51fd\u6570\uff0c\u628a\u975e Response \u5bf9\u8c61\u8f6c\u6362\u4e3a Response \u5bf9\u8c61\u3002 Tip \u5982\u679c\u9700\u8981\u624b\u52a8\u628a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u8f6c\u6362\u4e3a Response \u5bf9\u8c61\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 indexpy.http.responses.convert \u3002 Index \u5185\u7f6e\u4e86\u4e09\u4e2a\u5904\u7406\u51fd\u6570\u7528\u4e8e\u5904\u7406\u516d\u79cd\u7c7b\u578b\uff1a @automatic . register ( type ( None )) def _none ( ret : typing . Type [ None ]) -> typing . NoReturn : raise TypeError ( \"Get 'None'. Maybe you need to add a return statement to the function.\" ) @automatic . register ( tuple ) @automatic . register ( list ) @automatic . register ( dict ) def _json ( body : typing . Tuple [ tuple , list , dict ], status : int = 200 , headers : dict = None ) -> Response : return JSONResponse ( body , status , headers ) @automatic . register ( str ) @automatic . register ( bytes ) def _plain_text ( body : typing . Union [ str , bytes ], status : int = 200 , headers : dict = None ) -> Response : return PlainTextResponse ( body , status , headers ) \u6b63\u662f\u6709\u4e86\u8fd9\u4e9b\u5185\u7f6e\u5904\u7406\u51fd\u6570\uff0c\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u5c06\u88ab\u6b63\u786e\u89e3\u6790\u4e3a\u4e00\u4e2a JSON \u54cd\u5e94\u3002 from indexpy.http import HTTPView class HTTP ( HTTPView ): def get ( self ): return { \"key\" : \"value\" } \u540c\u6837\u7684\uff0c\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u54cd\u5e94\u503c\u7684\u7b80\u5316\u5199\u6cd5\u4ee5\u7edf\u4e00\u9879\u76ee\u7684\u54cd\u5e94\u89c4\u8303\uff08\u54ea\u6015\u6709 TypedDict \uff0cPython \u7684 Dict \u7ea6\u675f\u4f9d\u65e7\u5f88\u5f31\uff0c\u4f46 dataclass \u5219\u6709\u6548\u5f97\u591a\uff09\uff0c\u4f8b\u5982\uff1a from dataclasses import dataclass , asdict from indexpy.http.responses import automatic , Response , JSONResponse @dataclass class Error : code : int = 0 title : str = \"\" message : str = \"\" @automatic . register ( Error ) def _error_json ( error : Error , status : int = 400 ) -> Response : return JSONResponse ( asdict ( error ), status ) \u6216\u8005\u4f60\u60f3\u8986\u76d6\u9ed8\u8ba4\u7684 tuple / list / dict \u6240\u5bf9\u5e94\u7684 JSONResponse \uff08\u4ee5\u4e0a\u6587\u4e2d\u81ea\u5b9a\u4e49 JSON \u5e8f\u5217\u5316\u4e3a\u4f8b\uff09\uff1a from indexpy.http.responses import automatic , Response ... @automatic . register ( tuple ) @automatic . register ( list ) @automatic . register ( dict ) def _more_json ( body : dict , status : int = 200 , headers : dict = None ) -> Response : return CustomizeJSONResponse ( body , status , headers )","title":"\u54cd\u5e94\u7684\u7b80\u5316\u5199\u6cd5"},{"location":"http/#_7","text":"\u5f53\u4f60\u9700\u8981\u8fd4\u56de\u4e00\u4e2a HTTP \u72b6\u6001\u7801\u4ee5\u53ca\u5176\u9ed8\u8ba4\u7684\u63cf\u8ff0\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 raise indexpy . http . HTTPException ( CODE ) \u5176\u597d\u5904\u5728\u4e8e\u4f60\u53ef\u4ee5\u901a\u8fc7 \u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406 \u6765\u6355\u6349\u5e76\u81ea\u5b9a\u4e49\u5b83\u4eec\u3002 \u4f8b\u5982\uff1a\u7f51\u7ad9\u9700\u8981\u6709\u7edf\u4e00\u7684 404 \u9875\u9762\u3002","title":"\u9ed8\u8ba4\u54cd\u5e94"},{"location":"http/#_8","text":"\u5bf9\u4e8e\u4e00\u4e9b\u6545\u610f\u629b\u51fa\u7684\u5f02\u5e38\uff0cIndex \u63d0\u4f9b\u4e86\u65b9\u6cd5\u8fdb\u884c\u7edf\u4e00\u5904\u7406\u3002 \u4ee5\u4e0b\u4e3a\u6837\u4f8b\uff1a from indexpy import Index from indexpy.http import HTTPException , Request from indexpy.http.responses import Response , PlainTextResponse app = Index () @app . exception_handler ( 404 ) def not_found ( request : Request , exc : HTTPException ) -> Response : return PlainTextResponse ( \"what do you want to do?\" , status_code = 404 ) @app . exception_handler ( ValueError ) def value_error ( request : Request , exc : ValueError ) -> Response : return PlainTextResponse ( \"Something went wrong with the server.\" , status_code = 500 )","title":"\u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406"},{"location":"middleware/","text":"\u5728\u4e86\u89e3 Index \u7684\u4e2d\u95f4\u4ef6\u6ce8\u518c\u65b9\u5f0f\u4e4b\u524d\uff0c\u5148\u770b\u770b\u672c\u6846\u67b6\u7684\u4e2d\u95f4\u4ef6\u8bbe\u8ba1\u601d\u8def\u2014\u2014\u6bcf\u4e2a\u4e2d\u95f4\u4ef6\u90fd\u662f\u7ed9 endpoint \u7684\u88c5\u9970\u5668\u3002\u4e8b\u5b9e\u4e0a\uff0cIndex \u7684\u4e2d\u95f4\u90fd\u4f1a\u5728\u8def\u7531\u5c55\u5f00\u65f6\u4ee5\u88c5\u9970\u5668\u76f8\u540c\u7684\u65b9\u5f0f\u5c42\u5c42\u5305\u88f9\u6700\u7ec8\u7684 endpoint \u3002\u5982\u679c\u4f60\u613f\u610f\u624b\u52a8\u4e3a\u6bcf\u4e2a endpoint \u52a0\u4e0a\u88c5\u9970\u5668\uff0c\u90a3\u4e48\u4f60\u4e5f\u53ef\u4ee5\u4e0d\u9700\u8981\u4f7f\u7528 Index \u4e2d\u95f4\u4ef6\u3002 HTTP \u4e2d\u95f4\u4ef6 \u57fa\u4e8e\u51fd\u6570\u7684\u4e2d\u95f4\u4ef6 \u7f16\u5199\u4e00\u4e2a HTTP \u4e2d\u95f4\u4ef6\u5341\u5206\u7b80\u5355\uff0c\u5c31\u50cf\u7f16\u5199\u4e00\u4e2a\u88c5\u9970\u5668\u51fd\u6570\u4e00\u6837\u3002 \u7b2c\u4e00\u5c42\u51fd\u6570\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u5c31\u662f\u88ab\u5305\u88f9\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u3002\u7b2c\u4e8c\u5c42\u51fd\u6570\u4ec5\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570 requesst \uff0c\u51fd\u6570\u8fd4\u56de\u503c\u5c06\u4f5c\u4e3a\u6b64\u6b21\u8bf7\u6c42\u7684\u54cd\u5e94\u7ed3\u679c\u3002 def middleware ( endpoint ): async def wrapper ( request ): ... response = await endpoint ( request ) ... return response return wrapper Tip endpoint \u662f\u5b9e\u9645\u5904\u7406 HTTP \u8bf7\u6c42\u7684\u53ef\u8c03\u7528\u5bf9\u8c61 \u57fa\u4e8e\u7c7b\u7684\u4e2d\u95f4\u4ef6 \u57fa\u4e8e\u7c7b\u7684\u4e2d\u95f4\u4ef6\u53ef\u4ee5\u7ee7\u627f indexpy.http.MiddlewareMixin \uff0c\u6709\u4ee5\u4e0b\u4e09\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u91cd\u5199\u3002 process_request(request: Request) \u6b64\u65b9\u6cd5\u5728\u8bf7\u6c42\u88ab\u5c42\u5c42\u4f20\u9012\u65f6\u8c03\u7528\uff0c\u53ef\u7528\u4e8e\u4fee\u6539 request \u5bf9\u8c61\u4ee5\u4f9b\u540e\u7eed\u5904\u7406\u4f7f\u7528\u3002\u5fc5\u987b\u8fd4\u56de None \uff0c\u5426\u5219\u8fd4\u56de\u503c\u5c06\u4f5c\u4e3a\u6700\u7ec8\u7ed3\u679c\u5e76\u76f4\u63a5\u7ec8\u6b62\u6b64\u6b21\u8bf7\u6c42\u3002 process_response(request: Request, response: Response) \u6b64\u65b9\u6cd5\u5728\u8bf7\u6c42\u88ab\u6b63\u5e38\u5904\u7406\u3001\u5df2\u7ecf\u8fd4\u56de\u54cd\u5e94\u5bf9\u8c61\u540e\u8c03\u7528\uff0c\u5b83\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u53ef\u7528\u7684\u54cd\u5e94\u5bf9\u8c61\uff08\u4e00\u822c\u6765\u8bf4\u76f4\u63a5\u8fd4\u56de response \u5373\u53ef\uff09\u3002 process_exception(request: Request, exception: Exception) \u6b64\u65b9\u6cd5\u5728\u4e2d\u95f4\u4ef6\u4e4b\u540e\u7684\u8c03\u7528\u94fe\u8def\u4e0a\u51fa\u73b0\u5f02\u5e38\u65f6\u88ab\u8c03\u7528\u3002\u5f53\u5176\u8fd4\u56de\u503c\u4e3a None \u65f6\uff0c\u5f02\u5e38\u4f1a\u88ab\u539f\u6837\u629b\u51fa\uff0c\u5426\u5219\u5176\u8fd4\u56de\u503c\u5c06\u4f5c\u4e3a\u6b64\u6b21\u8bf7\u6c42\u7684\u54cd\u5e94\u503c\u88ab\u8fd4\u56de\u3002 Notice \u4ee5\u4e0a\u51fd\u6570\u65e0\u8bba\u4f60\u4ee5\u4f55\u79cd\u65b9\u5f0f\u5b9a\u4e49\uff0c\u90fd\u4f1a\u5728\u52a0\u8f7d\u65f6\u88ab\u6539\u9020\u6210\u5f02\u6b65\u51fd\u6570\uff0c\u4f46\u4e3a\u4e86\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u635f\u8017\uff0c\u5c3d\u91cf\u4f7f\u7528 async def \u53bb\u5b9a\u4e49\u5b83\u4eec\u2014\u2014\u9664\u975e\u5728\u5176\u4e2d\u4f7f\u7528\u4e86\u542b\u6709\u963b\u585e IO \u7684\u5176\u4ed6\u51fd\u6570\uff0c\u4f8b\u5982 Django ORM, PonyORM \u7b49\u3002 \u901a\u8fc7\u6307\u5b9a Middleware \u4e2d\u7684 mounts \u5c5e\u6027\uff0c\u53ef\u4ee5\u4e3a\u4e2d\u95f4\u4ef6\u6307\u5b9a\u5b50\u4e2d\u95f4\u4ef6\u3002\u6267\u884c\u65f6\u4f1a\u5148\u6267\u884c\u7236\u4e2d\u95f4\u4ef6\uff0c\u518d\u6267\u884c\u5b50\u4e2d\u95f4\u4ef6\u3002 Notice \u5b50\u4e2d\u95f4\u4ef6\u7684\u6267\u884c\u987a\u5e8f\u662f\u4ece\u5de6\u5230\u53f3\u3002 from indexpy.http import MiddlewareMixin class ExampleChildMiddleware ( MiddlewareMixin ): async def process_request ( self , request ): print ( \"enter first process request\" ) async def process_response ( self , request , response ): print ( \"enter last process response\" ) return response class Middleware ( MiddlewareMixin ): mounts = ( ExampleChildMiddleware ,) async def process_request ( self , request ): print ( \"example base middleware request\" ) async def process_response ( self , request , response ): print ( \"example base middleware response\" ) return response WebSocket \u4e2d\u95f4\u4ef6 \u57fa\u4e8e\u51fd\u6570\u7684\u4e2d\u95f4\u4ef6 \u7f16\u5199\u4e00\u4e2a WebSocket \u4e2d\u95f4\u4ef6\u4e0e\u7f16\u5199\u4e00\u4e2a HTTP \u4e2d\u95f4\u4ef6\u5f88\u76f8\u4f3c\uff0c\u4e0d\u540c\u7684\u662f websocket \u5bf9\u5e94\u7684 endpoint \u5bf9\u8c61\u4e0d\u4f1a\u6709\u8fd4\u56de\u503c\u3002\u4e2d\u95f4\u4ef6\u7684\u7b2c\u4e8c\u5c42\u51fd\u6570\u4e5f\u4e0d\u9700\u8981\u8fd4\u56de\u7ed3\u679c\uff0c\u4efb\u4f55\u8fd4\u56de\u7ed3\u679c\u90fd\u662f\u65e0\u6548\u7684\u3002 def middleware ( endpoint ): async def wrapper ( websocket ): ... await endpoint ( websocket ) ... return wrapper Tip endpoint \u662f\u5b9e\u9645\u5904\u7406 WebSocket \u8bf7\u6c42\u7684\u53ef\u8c03\u7528\u5bf9\u8c61 \u57fa\u4e8e\u7c7b\u7684\u4e2d\u95f4\u4ef6 \u57fa\u4e8e\u7c7b\u7684\u4e2d\u95f4\u4ef6\u53ef\u4ee5\u7ee7\u627f indexpy.websocket.MiddlewareMixin \uff0c\u6709\u4ee5\u4e0b\u4e24\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u91cd\u5199\u3002 before_accept(websocket: WebSocket) -> None \u6b64\u65b9\u6cd5\u5728 websocket \u8fde\u63a5\u88ab\u63a5\u53d7\u524d\u8c03\u7528\u3002 after_close(websocket: WebSocket) -> None \u6b64\u65b9\u6cd5\u5728 websocket \u8fde\u63a5\u88ab\u5173\u95ed\u540e\u8c03\u7528\u3002 \u540c\u6837\u7684\uff0c indexpy.websocket.MiddlewareMixin \u4e5f\u6709 mounts \u5c5e\u6027\u7528\u4e8e\u6302\u5728\u5b50\u4e2d\u95f4\u4ef6\u3002 ASGI \u4e2d\u95f4\u4ef6 \u5728 Index \u4e2d\uff0c\u5b9a\u4e49\u5e76\u4f7f\u7528 ASGI \u4e2d\u95f4\u4ef6\u7684\u65b9\u5f0f\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u4e0e Starlette \u76f8\u540c\u7684\u6ce8\u518c\u65b9\u5f0f\uff0c\u5c06 ASGI \u4e2d\u95f4\u4ef6\u6ce8\u518c\u7ed9 Index \u5bf9\u8c61\uff1b\u53e6\u4e00\u79cd\u662f\u5c06 ASGI \u4e2d\u95f4\u4ef6\u6ce8\u518c\u7ed9\u6307\u5b9a\u7684 ASGIRoute \u3002\u8fd9\u4e24\u79cd ASGI \u4e2d\u95f4\u4ef6\u7684\u5b9a\u4e49\u65b9\u6cd5\u4e0d\u540c\uff0c\u4f7f\u7528\u65b9\u6cd5\u4e0d\u540c\uff0c\u4f5c\u7528\u8303\u56f4\u4e5f\u4e0d\u540c\u3002 \u9644\u52a0\u7ed9 Index \u5bf9\u8c61\u7684 ASGI \u4e2d\u95f4\u4ef6 \u5c31\u50cf Starlette \u6587\u6863 \u91cc\u7684\u4e2d\u95f4\u4ef6\u4e00\u6837\uff0c\u8fd9\u4e00\u7c7b\u7684\u4e2d\u95f4\u4ef6\u5b9a\u4e49\uff0c\u5b83\u7684 __init__ \u7b7e\u540d\u5fc5\u987b\u4e3a (self, app: ASGIApp, *args: Any, **kwargs: Any) \uff0c __call__ \u5fc5\u987b\u662f\u4e00\u4e2a\u6807\u51c6\u7684 ASGI \u63a5\u53e3\u3002\u6ce8\u518c\u65b9\u5f0f\u7c7b\u4f3c\u4e8e\u5982\u4e0b\u4ee3\u7801\uff1a from indexpy import Index from starlette.middleware.gzip import GZipMiddleware app = Index () app . add_middleware ( GZipMiddleware , minimum_size = 1000 ) \u9644\u52a0\u5230\u8def\u7531\u7684 ASGI \u4e2d\u95f4\u4ef6 \u8fd9\u79cd\u65b9\u5f0f\u5c31\u5982\u540c\u6700\u4e0a\u9762\u6240\u8bb2\u7684\uff0c\u4f7f\u7528\u88c5\u9970\u5668\u76f8\u540c\u7684\u7f16\u5199\u65b9\u5f0f\u3002\u4ee5\u4e0b\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\u5b9a\u4e49\u6837\u4f8b\uff0c\u6ce8\u518c\u65b9\u5f0f\u8bf7\u53c2\u8003 Routes \u7ae0\u8282 \u3002 from indexpy.types import ASGIApp def middleware ( app : ASGIApp ): async def wrapper ( scope , receive , send ): ... await app ( scope , receive , send ) ... return wrapper","title":"Middleware"},{"location":"middleware/#http","text":"","title":"HTTP \u4e2d\u95f4\u4ef6"},{"location":"middleware/#_1","text":"\u7f16\u5199\u4e00\u4e2a HTTP \u4e2d\u95f4\u4ef6\u5341\u5206\u7b80\u5355\uff0c\u5c31\u50cf\u7f16\u5199\u4e00\u4e2a\u88c5\u9970\u5668\u51fd\u6570\u4e00\u6837\u3002 \u7b2c\u4e00\u5c42\u51fd\u6570\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u5c31\u662f\u88ab\u5305\u88f9\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u3002\u7b2c\u4e8c\u5c42\u51fd\u6570\u4ec5\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570 requesst \uff0c\u51fd\u6570\u8fd4\u56de\u503c\u5c06\u4f5c\u4e3a\u6b64\u6b21\u8bf7\u6c42\u7684\u54cd\u5e94\u7ed3\u679c\u3002 def middleware ( endpoint ): async def wrapper ( request ): ... response = await endpoint ( request ) ... return response return wrapper Tip endpoint \u662f\u5b9e\u9645\u5904\u7406 HTTP \u8bf7\u6c42\u7684\u53ef\u8c03\u7528\u5bf9\u8c61","title":"\u57fa\u4e8e\u51fd\u6570\u7684\u4e2d\u95f4\u4ef6"},{"location":"middleware/#_2","text":"\u57fa\u4e8e\u7c7b\u7684\u4e2d\u95f4\u4ef6\u53ef\u4ee5\u7ee7\u627f indexpy.http.MiddlewareMixin \uff0c\u6709\u4ee5\u4e0b\u4e09\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u91cd\u5199\u3002 process_request(request: Request) \u6b64\u65b9\u6cd5\u5728\u8bf7\u6c42\u88ab\u5c42\u5c42\u4f20\u9012\u65f6\u8c03\u7528\uff0c\u53ef\u7528\u4e8e\u4fee\u6539 request \u5bf9\u8c61\u4ee5\u4f9b\u540e\u7eed\u5904\u7406\u4f7f\u7528\u3002\u5fc5\u987b\u8fd4\u56de None \uff0c\u5426\u5219\u8fd4\u56de\u503c\u5c06\u4f5c\u4e3a\u6700\u7ec8\u7ed3\u679c\u5e76\u76f4\u63a5\u7ec8\u6b62\u6b64\u6b21\u8bf7\u6c42\u3002 process_response(request: Request, response: Response) \u6b64\u65b9\u6cd5\u5728\u8bf7\u6c42\u88ab\u6b63\u5e38\u5904\u7406\u3001\u5df2\u7ecf\u8fd4\u56de\u54cd\u5e94\u5bf9\u8c61\u540e\u8c03\u7528\uff0c\u5b83\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u53ef\u7528\u7684\u54cd\u5e94\u5bf9\u8c61\uff08\u4e00\u822c\u6765\u8bf4\u76f4\u63a5\u8fd4\u56de response \u5373\u53ef\uff09\u3002 process_exception(request: Request, exception: Exception) \u6b64\u65b9\u6cd5\u5728\u4e2d\u95f4\u4ef6\u4e4b\u540e\u7684\u8c03\u7528\u94fe\u8def\u4e0a\u51fa\u73b0\u5f02\u5e38\u65f6\u88ab\u8c03\u7528\u3002\u5f53\u5176\u8fd4\u56de\u503c\u4e3a None \u65f6\uff0c\u5f02\u5e38\u4f1a\u88ab\u539f\u6837\u629b\u51fa\uff0c\u5426\u5219\u5176\u8fd4\u56de\u503c\u5c06\u4f5c\u4e3a\u6b64\u6b21\u8bf7\u6c42\u7684\u54cd\u5e94\u503c\u88ab\u8fd4\u56de\u3002 Notice \u4ee5\u4e0a\u51fd\u6570\u65e0\u8bba\u4f60\u4ee5\u4f55\u79cd\u65b9\u5f0f\u5b9a\u4e49\uff0c\u90fd\u4f1a\u5728\u52a0\u8f7d\u65f6\u88ab\u6539\u9020\u6210\u5f02\u6b65\u51fd\u6570\uff0c\u4f46\u4e3a\u4e86\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u635f\u8017\uff0c\u5c3d\u91cf\u4f7f\u7528 async def \u53bb\u5b9a\u4e49\u5b83\u4eec\u2014\u2014\u9664\u975e\u5728\u5176\u4e2d\u4f7f\u7528\u4e86\u542b\u6709\u963b\u585e IO \u7684\u5176\u4ed6\u51fd\u6570\uff0c\u4f8b\u5982 Django ORM, PonyORM \u7b49\u3002 \u901a\u8fc7\u6307\u5b9a Middleware \u4e2d\u7684 mounts \u5c5e\u6027\uff0c\u53ef\u4ee5\u4e3a\u4e2d\u95f4\u4ef6\u6307\u5b9a\u5b50\u4e2d\u95f4\u4ef6\u3002\u6267\u884c\u65f6\u4f1a\u5148\u6267\u884c\u7236\u4e2d\u95f4\u4ef6\uff0c\u518d\u6267\u884c\u5b50\u4e2d\u95f4\u4ef6\u3002 Notice \u5b50\u4e2d\u95f4\u4ef6\u7684\u6267\u884c\u987a\u5e8f\u662f\u4ece\u5de6\u5230\u53f3\u3002 from indexpy.http import MiddlewareMixin class ExampleChildMiddleware ( MiddlewareMixin ): async def process_request ( self , request ): print ( \"enter first process request\" ) async def process_response ( self , request , response ): print ( \"enter last process response\" ) return response class Middleware ( MiddlewareMixin ): mounts = ( ExampleChildMiddleware ,) async def process_request ( self , request ): print ( \"example base middleware request\" ) async def process_response ( self , request , response ): print ( \"example base middleware response\" ) return response","title":"\u57fa\u4e8e\u7c7b\u7684\u4e2d\u95f4\u4ef6"},{"location":"middleware/#websocket","text":"","title":"WebSocket \u4e2d\u95f4\u4ef6"},{"location":"middleware/#_3","text":"\u7f16\u5199\u4e00\u4e2a WebSocket \u4e2d\u95f4\u4ef6\u4e0e\u7f16\u5199\u4e00\u4e2a HTTP \u4e2d\u95f4\u4ef6\u5f88\u76f8\u4f3c\uff0c\u4e0d\u540c\u7684\u662f websocket \u5bf9\u5e94\u7684 endpoint \u5bf9\u8c61\u4e0d\u4f1a\u6709\u8fd4\u56de\u503c\u3002\u4e2d\u95f4\u4ef6\u7684\u7b2c\u4e8c\u5c42\u51fd\u6570\u4e5f\u4e0d\u9700\u8981\u8fd4\u56de\u7ed3\u679c\uff0c\u4efb\u4f55\u8fd4\u56de\u7ed3\u679c\u90fd\u662f\u65e0\u6548\u7684\u3002 def middleware ( endpoint ): async def wrapper ( websocket ): ... await endpoint ( websocket ) ... return wrapper Tip endpoint \u662f\u5b9e\u9645\u5904\u7406 WebSocket \u8bf7\u6c42\u7684\u53ef\u8c03\u7528\u5bf9\u8c61","title":"\u57fa\u4e8e\u51fd\u6570\u7684\u4e2d\u95f4\u4ef6"},{"location":"middleware/#_4","text":"\u57fa\u4e8e\u7c7b\u7684\u4e2d\u95f4\u4ef6\u53ef\u4ee5\u7ee7\u627f indexpy.websocket.MiddlewareMixin \uff0c\u6709\u4ee5\u4e0b\u4e24\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u91cd\u5199\u3002 before_accept(websocket: WebSocket) -> None \u6b64\u65b9\u6cd5\u5728 websocket \u8fde\u63a5\u88ab\u63a5\u53d7\u524d\u8c03\u7528\u3002 after_close(websocket: WebSocket) -> None \u6b64\u65b9\u6cd5\u5728 websocket \u8fde\u63a5\u88ab\u5173\u95ed\u540e\u8c03\u7528\u3002 \u540c\u6837\u7684\uff0c indexpy.websocket.MiddlewareMixin \u4e5f\u6709 mounts \u5c5e\u6027\u7528\u4e8e\u6302\u5728\u5b50\u4e2d\u95f4\u4ef6\u3002","title":"\u57fa\u4e8e\u7c7b\u7684\u4e2d\u95f4\u4ef6"},{"location":"middleware/#asgi","text":"\u5728 Index \u4e2d\uff0c\u5b9a\u4e49\u5e76\u4f7f\u7528 ASGI \u4e2d\u95f4\u4ef6\u7684\u65b9\u5f0f\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u4e0e Starlette \u76f8\u540c\u7684\u6ce8\u518c\u65b9\u5f0f\uff0c\u5c06 ASGI \u4e2d\u95f4\u4ef6\u6ce8\u518c\u7ed9 Index \u5bf9\u8c61\uff1b\u53e6\u4e00\u79cd\u662f\u5c06 ASGI \u4e2d\u95f4\u4ef6\u6ce8\u518c\u7ed9\u6307\u5b9a\u7684 ASGIRoute \u3002\u8fd9\u4e24\u79cd ASGI \u4e2d\u95f4\u4ef6\u7684\u5b9a\u4e49\u65b9\u6cd5\u4e0d\u540c\uff0c\u4f7f\u7528\u65b9\u6cd5\u4e0d\u540c\uff0c\u4f5c\u7528\u8303\u56f4\u4e5f\u4e0d\u540c\u3002","title":"ASGI \u4e2d\u95f4\u4ef6"},{"location":"middleware/#index-asgi","text":"\u5c31\u50cf Starlette \u6587\u6863 \u91cc\u7684\u4e2d\u95f4\u4ef6\u4e00\u6837\uff0c\u8fd9\u4e00\u7c7b\u7684\u4e2d\u95f4\u4ef6\u5b9a\u4e49\uff0c\u5b83\u7684 __init__ \u7b7e\u540d\u5fc5\u987b\u4e3a (self, app: ASGIApp, *args: Any, **kwargs: Any) \uff0c __call__ \u5fc5\u987b\u662f\u4e00\u4e2a\u6807\u51c6\u7684 ASGI \u63a5\u53e3\u3002\u6ce8\u518c\u65b9\u5f0f\u7c7b\u4f3c\u4e8e\u5982\u4e0b\u4ee3\u7801\uff1a from indexpy import Index from starlette.middleware.gzip import GZipMiddleware app = Index () app . add_middleware ( GZipMiddleware , minimum_size = 1000 )","title":"\u9644\u52a0\u7ed9 Index \u5bf9\u8c61\u7684 ASGI \u4e2d\u95f4\u4ef6"},{"location":"middleware/#asgi_1","text":"\u8fd9\u79cd\u65b9\u5f0f\u5c31\u5982\u540c\u6700\u4e0a\u9762\u6240\u8bb2\u7684\uff0c\u4f7f\u7528\u88c5\u9970\u5668\u76f8\u540c\u7684\u7f16\u5199\u65b9\u5f0f\u3002\u4ee5\u4e0b\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\u5b9a\u4e49\u6837\u4f8b\uff0c\u6ce8\u518c\u65b9\u5f0f\u8bf7\u53c2\u8003 Routes \u7ae0\u8282 \u3002 from indexpy.types import ASGIApp def middleware ( app : ASGIApp ): async def wrapper ( scope , receive , send ): ... await app ( scope , receive , send ) ... return wrapper","title":"\u9644\u52a0\u5230\u8def\u7531\u7684 ASGI \u4e2d\u95f4\u4ef6"},{"location":"openapi/","text":"Index \u4f7f\u7528 pydantic \u7528\u4e8e\u66f4\u8f7b\u677e\u7684\u89e3\u6790 HTTP \u8bf7\u6c42\u4fe1\u606f\uff0c\u5e76\u4e3a\u4e4b\u7ed1\u5b9a\u4e86\u4e00\u5957\u751f\u6210 OpenAPI \u6587\u6863\u7684\u7a0b\u5e8f\u3002 \u663e\u793a OpenAPI \u6587\u6863 \u5c06 indexpy.openapi.application.OpenAPI \u6302\u8f7d\u8fdb index \u4e2d\u3002\u542f\u52a8 index\uff0c\u8bbf\u95ee\u4f60\u670d\u52a1\u4e0a /openapi/ \u5373\u53ef\u770b\u5230\u751f\u6210\u7684\u6587\u6863\u3002 from indexpy import Index from indexpy.routing import SubRoutes from indexpy.openapi import OpenAPI app = Index () app . router . extend ( SubRoutes ( \"/openapi\" , OpenAPI ( \"Title\" , \"description\" , \"1.0\" ) . routes , namespace = \"openapi\" , ) ) \u9ed8\u8ba4\u7684\u6587\u6863\u6a21\u677f\u4f7f\u7528 swagger \uff0c\u5982\u679c\u4f60\u66f4\u559c\u6b22 redoc \u7684\u6837\u5f0f\uff0c\u53ef\u4ee5\u901a\u8fc7\u66f4\u6539 template_name \u6765\u8fbe\u5230\u76ee\u7684\uff0c\u4f8b\u5982\uff1a OpenAPI(..., template_name=\"redoc\") \u3002 \u4e0d\u4ec5\u5982\u6b64\uff0c\u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 template \u53c2\u6570\u6765\u63a7\u5236\u663e\u793a\u81ea\u5df1\u7684\u559c\u6b22\u7684\u4efb\u4f55\u6a21\u677f\uff0c\u53ea\u9700\u8981\u628a\u6a21\u677f\u7684\u5b8c\u6574\u5185\u5bb9\u4f5c\u4e3a\u5b57\u7b26\u4e32\u4f20\u7ed9 template \u53c2\u6570\u5373\u53ef\u3002 \u63a5\u53e3\u63cf\u8ff0 \u5bf9\u4e8e\u6240\u6709\u53ef\u5904\u7406 HTTP \u8bf7\u6c42\u7684\u65b9\u6cd5\uff0c\u5b83\u4eec\u7684 __doc__ \u90fd\u4f1a\u7528\u4e8e\u751f\u6210 OpenAPI \u6587\u6863\u3002 \u7b2c\u4e00\u884c\u5c06\u88ab\u5f53\u4f5c\u6982\u8981\u63cf\u8ff0\uff0c\u6240\u4ee5\u5c3d\u91cf\u7b80\u660e\u627c\u8981\uff0c\u4e0d\u8981\u592a\u957f\u3002 \u7a7a\u4e00\u884c\u4e4b\u540e\uff0c\u540e\u7eed\u7684\u6587\u5b57\u90fd\u4f1a\u88ab\u5f53\u4f5c\u8be6\u7ec6\u4ecb\u7ecd\uff0c\u88ab\u5b89\u7f6e\u5728 OpenAPI \u6587\u6863\u4e2d\u3002 \u4f8b\u5982\uff1a async def handler ( request ): \"\"\" api summary api description.......................... ......................................... ......................................... \"\"\" \u63cf\u8ff0\u8bf7\u6c42\u53c2\u6570 \u5bf9\u4e8e\u6240\u6709\u53ef\u5904\u7406 HTTP \u8bf7\u6c42\u7684\u65b9\u6cd5\uff0c\u5747\u53ef\u4ee5\u63a5\u53d7\u4e94\u79cd\u53c2\u6570\uff1a path \u3001 body \u3001 query \u3001 header \u3001 cookie \u3002\u4f7f\u7528\u7ee7\u627f\u81ea pydantic.BaseModel \u7684\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3\u5373\u53ef\u505a\u5230\u81ea\u52a8\u53c2\u6570\u6821\u9a8c\u4ee5\u53ca\u751f\u6210\u8bf7\u6c42\u683c\u5f0f\u6587\u6863\u3002\u4f8b\u5982\uff1a from pydantic import BaseModel class PageQuery ( BaseModel ): page_num : int page_size : int async def getlist ( request , query : PageQuery ): ... \u63cf\u8ff0\u54cd\u5e94\u7ed3\u679c \u4e3a\u4e86\u63cf\u8ff0\u4e0d\u540c\u72b6\u6001\u7801\u7684\u54cd\u5e94\u7ed3\u679c\uff0cIndex \u4f7f\u7528\u88c5\u9970\u5668\u63cf\u8ff0\uff0c\u800c\u4e0d\u662f\u7c7b\u578b\u6ce8\u89e3\u3002 describe_response \u63a5\u53d7\u4e94\u4e2a\u53c2\u6570\uff0c\u5176\u4e2d status \u4e3a\u5fc5\u9700\u9879\uff0c description \u3001 content \u3001 headers \u548c links \u4e3a\u53ef\u9009\u9879\uff0c\u5bf9\u5e94 OpenAPI Specification \u91cc\u7684\u540c\u540d\u5b57\u6bb5\u3002 \u5176\u4e2d\uff0c content \u65e2\u53ef\u4ee5\u4f7f\u7528 pydantic.BaseModel \u63cf\u8ff0\u54cd\u5e94(\u4ec5\u652f\u6301 application/json)\uff0c\u4ea6\u53ef\u4ee5\u76f4\u63a5\u4f20\u9012\u7b26\u5408 OpenAPI \u6587\u6863\u7684 Dict\uff08\u5f53\u4f60\u63cf\u8ff0\u8fd4\u56de\u4e00\u4e2a\u975e application/json \u7c7b\u578b\u7684\u54cd\u5e94\u65f6\u8fd9\u5f88\u6709\u7528\uff09\u3002 Notice \u5982\u679c description \u7684\u503c\u4e3a\u9ed8\u8ba4\u7684 \"\" \uff0c\u5219\u4f1a\u4f7f\u7528 http \u6807\u51c6\u5e93\u4e2d\u7684 HTTPStatus(status).description \u4f5c\u4e3a\u63cf\u8ff0\u3002 from http import HTTPStatus from indexpy.openapi import describe_response @describe_response ( HTTPStatus . NO_CONTENT ) def handler ( request ): \"\"\" ................. \"\"\" \u9664\u4e86 describe_response \u63cf\u8ff0\u5355\u4e2a\u54cd\u5e94\u72b6\u6001\u7801\u4ee5\u5916\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 describe_responses \u5bf9\u72b6\u6001\u7801\u6279\u91cf\u7684\u63cf\u8ff0\u3002\u5b57\u5178\u4ee5 status \u4e3a\u952e\uff0c\u4ee5 OpenAPI Response Object \u7684\u56db\u4e2a\u5c5e\u6027\u4f5c\u4e3a\u53ef\u9009\u7684\u503c\uff08\u5176\u4e2d description \u4e3a\u5fc5\u9009\uff09\u3002 from indexpy.openapi import describe_responses RESPONSES = { 404 : { \"description\" : \"Item not found\" }, 403 : { \"description\" : \"Not enough privileges\" }, 302 : { \"description\" : \"The item was moved\" }, } @describe_responses ( RESPONSES ) @describe_response ( 204 , \"No Content\" ) def handler ( request ): \"\"\" ................. \"\"\" Notice \u6b64\u529f\u80fd\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u9664\u751f\u6210OpenAPI\u6587\u6863\u7684\u4f5c\u7528\u5916\uff0c\u65e0\u5176\u4ed6\u4f5c\u7528\u3002 \u672a\u6765\u6216\u8bb8\u4f1a\u589e\u52a0 mock \u529f\u80fd\u3002 \u63cf\u8ff0\u989d\u5916\u7684 OpenAPI \u6587\u6863 \u4f5c\u4e3a\u4e00\u4e2a Web \u9879\u76ee\uff0c\u5728\u4e2d\u95f4\u4ef6\u4e2d\u8bfb\u53d6\u8bf7\u6c42\u4fe1\u606f\u5e76\u4f5c\u9650\u5236\u662f\u5f88\u5e38\u89c1\u7684\uff0c\u4f8b\u5982\u8bfb\u53d6 JWT \u7528\u4f5c\u9274\u6743\u3002\u5728\u6bcf\u4e2a\u89c6\u56fe\u90fd\u589e\u52a0 header \u53c2\u6570\u662f\u4e0d\u73b0\u5b9e\u7684\uff0c\u8fd9\u65f6\u5019 describe_extra_docs \u5c31\u6d3e\u4e0a\u7528\u573a\u4e86\u3002 Tip describe_extra_docs \u589e\u52a0\u7684\u5185\u5bb9\uff0c\u4e0d\u4ec5\u9650\u4e8e parameters \uff0c\u4efb\u4f55\u63cf\u8ff0\u90fd\u4f1a\u88ab\u5408\u5e76\u8fdb\u539f\u672c\u7684\u6587\u6863\u91cc\u3002\u5177\u4f53\u7684\u5b57\u6bb5\u53ef\u53c2\u8003 OpenAPI Specification \u3002 def judge_jwt ( endpoint ): describe_extra_docs ( endpoint , { \"parameters\" : [ { \"name\" : \"Authorization\" , \"in\" : \"header\" , \"description\" : \"JWT Token\" , \"required\" : True , \"schema\" : { \"type\" : \"string\" }, } ] }, ) async def judge ( request ): ... return judge Tags OpenAPI \u7684 Tags \u662f\u4e00\u4e2a\u6709\u7528\u7684\u529f\u80fd\uff0c\u5728 Index \u91cc\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u6765\u6307\u5b9a URL \u7684\u5206\u7c7b\u6807\u7b7e\u3002 tags \u53c2\u6570\u5fc5\u987b\u662f\u4e00\u4e2a dict \u7c7b\u578b\uff0c\u952e\u4e3a\u6807\u7b7e\u540d\u3002\u503c\u9700\u8981\u5305\u542b description \uff0c\u7528\u4e8e\u63cf\u8ff0\u6b64\u6807\u7b7e\uff1b paths \u662f URL \u5217\u8868\uff0c\u5982\u679c URL \u5305\u542b\u8def\u5f84\u53c2\u6570\uff0c\u76f4\u63a5\u4f7f\u7528\u4e0d\u5e26 :type \u7684\u5b57\u7b26\u4e32\u5373\u53ef\u3002 OpenAPI ( \"index.py example\" , \"just a example, power by index.py\" , \"v1\" , tags = { \"something\" : { \"description\" : \"test over two tags in one path\" , \"paths\" : [ \"/about/\" , \"/file\" , \"/\" ], }, \"about\" : { \"description\" : \"about page\" , \"paths\" : [ \"/about/\" , \"/about/me\" ], }, \"file\" : { \"description\" : \"get/upload file api\" , \"paths\" : [ \"/file\" ], }, }, )","title":"OpenAPI"},{"location":"openapi/#openapi","text":"\u5c06 indexpy.openapi.application.OpenAPI \u6302\u8f7d\u8fdb index \u4e2d\u3002\u542f\u52a8 index\uff0c\u8bbf\u95ee\u4f60\u670d\u52a1\u4e0a /openapi/ \u5373\u53ef\u770b\u5230\u751f\u6210\u7684\u6587\u6863\u3002 from indexpy import Index from indexpy.routing import SubRoutes from indexpy.openapi import OpenAPI app = Index () app . router . extend ( SubRoutes ( \"/openapi\" , OpenAPI ( \"Title\" , \"description\" , \"1.0\" ) . routes , namespace = \"openapi\" , ) ) \u9ed8\u8ba4\u7684\u6587\u6863\u6a21\u677f\u4f7f\u7528 swagger \uff0c\u5982\u679c\u4f60\u66f4\u559c\u6b22 redoc \u7684\u6837\u5f0f\uff0c\u53ef\u4ee5\u901a\u8fc7\u66f4\u6539 template_name \u6765\u8fbe\u5230\u76ee\u7684\uff0c\u4f8b\u5982\uff1a OpenAPI(..., template_name=\"redoc\") \u3002 \u4e0d\u4ec5\u5982\u6b64\uff0c\u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 template \u53c2\u6570\u6765\u63a7\u5236\u663e\u793a\u81ea\u5df1\u7684\u559c\u6b22\u7684\u4efb\u4f55\u6a21\u677f\uff0c\u53ea\u9700\u8981\u628a\u6a21\u677f\u7684\u5b8c\u6574\u5185\u5bb9\u4f5c\u4e3a\u5b57\u7b26\u4e32\u4f20\u7ed9 template \u53c2\u6570\u5373\u53ef\u3002","title":"\u663e\u793a OpenAPI \u6587\u6863"},{"location":"openapi/#_1","text":"\u5bf9\u4e8e\u6240\u6709\u53ef\u5904\u7406 HTTP \u8bf7\u6c42\u7684\u65b9\u6cd5\uff0c\u5b83\u4eec\u7684 __doc__ \u90fd\u4f1a\u7528\u4e8e\u751f\u6210 OpenAPI \u6587\u6863\u3002 \u7b2c\u4e00\u884c\u5c06\u88ab\u5f53\u4f5c\u6982\u8981\u63cf\u8ff0\uff0c\u6240\u4ee5\u5c3d\u91cf\u7b80\u660e\u627c\u8981\uff0c\u4e0d\u8981\u592a\u957f\u3002 \u7a7a\u4e00\u884c\u4e4b\u540e\uff0c\u540e\u7eed\u7684\u6587\u5b57\u90fd\u4f1a\u88ab\u5f53\u4f5c\u8be6\u7ec6\u4ecb\u7ecd\uff0c\u88ab\u5b89\u7f6e\u5728 OpenAPI \u6587\u6863\u4e2d\u3002 \u4f8b\u5982\uff1a async def handler ( request ): \"\"\" api summary api description.......................... ......................................... ......................................... \"\"\"","title":"\u63a5\u53e3\u63cf\u8ff0"},{"location":"openapi/#_2","text":"\u5bf9\u4e8e\u6240\u6709\u53ef\u5904\u7406 HTTP \u8bf7\u6c42\u7684\u65b9\u6cd5\uff0c\u5747\u53ef\u4ee5\u63a5\u53d7\u4e94\u79cd\u53c2\u6570\uff1a path \u3001 body \u3001 query \u3001 header \u3001 cookie \u3002\u4f7f\u7528\u7ee7\u627f\u81ea pydantic.BaseModel \u7684\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u6ce8\u89e3\u5373\u53ef\u505a\u5230\u81ea\u52a8\u53c2\u6570\u6821\u9a8c\u4ee5\u53ca\u751f\u6210\u8bf7\u6c42\u683c\u5f0f\u6587\u6863\u3002\u4f8b\u5982\uff1a from pydantic import BaseModel class PageQuery ( BaseModel ): page_num : int page_size : int async def getlist ( request , query : PageQuery ): ...","title":"\u63cf\u8ff0\u8bf7\u6c42\u53c2\u6570"},{"location":"openapi/#_3","text":"\u4e3a\u4e86\u63cf\u8ff0\u4e0d\u540c\u72b6\u6001\u7801\u7684\u54cd\u5e94\u7ed3\u679c\uff0cIndex \u4f7f\u7528\u88c5\u9970\u5668\u63cf\u8ff0\uff0c\u800c\u4e0d\u662f\u7c7b\u578b\u6ce8\u89e3\u3002 describe_response \u63a5\u53d7\u4e94\u4e2a\u53c2\u6570\uff0c\u5176\u4e2d status \u4e3a\u5fc5\u9700\u9879\uff0c description \u3001 content \u3001 headers \u548c links \u4e3a\u53ef\u9009\u9879\uff0c\u5bf9\u5e94 OpenAPI Specification \u91cc\u7684\u540c\u540d\u5b57\u6bb5\u3002 \u5176\u4e2d\uff0c content \u65e2\u53ef\u4ee5\u4f7f\u7528 pydantic.BaseModel \u63cf\u8ff0\u54cd\u5e94(\u4ec5\u652f\u6301 application/json)\uff0c\u4ea6\u53ef\u4ee5\u76f4\u63a5\u4f20\u9012\u7b26\u5408 OpenAPI \u6587\u6863\u7684 Dict\uff08\u5f53\u4f60\u63cf\u8ff0\u8fd4\u56de\u4e00\u4e2a\u975e application/json \u7c7b\u578b\u7684\u54cd\u5e94\u65f6\u8fd9\u5f88\u6709\u7528\uff09\u3002 Notice \u5982\u679c description \u7684\u503c\u4e3a\u9ed8\u8ba4\u7684 \"\" \uff0c\u5219\u4f1a\u4f7f\u7528 http \u6807\u51c6\u5e93\u4e2d\u7684 HTTPStatus(status).description \u4f5c\u4e3a\u63cf\u8ff0\u3002 from http import HTTPStatus from indexpy.openapi import describe_response @describe_response ( HTTPStatus . NO_CONTENT ) def handler ( request ): \"\"\" ................. \"\"\" \u9664\u4e86 describe_response \u63cf\u8ff0\u5355\u4e2a\u54cd\u5e94\u72b6\u6001\u7801\u4ee5\u5916\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 describe_responses \u5bf9\u72b6\u6001\u7801\u6279\u91cf\u7684\u63cf\u8ff0\u3002\u5b57\u5178\u4ee5 status \u4e3a\u952e\uff0c\u4ee5 OpenAPI Response Object \u7684\u56db\u4e2a\u5c5e\u6027\u4f5c\u4e3a\u53ef\u9009\u7684\u503c\uff08\u5176\u4e2d description \u4e3a\u5fc5\u9009\uff09\u3002 from indexpy.openapi import describe_responses RESPONSES = { 404 : { \"description\" : \"Item not found\" }, 403 : { \"description\" : \"Not enough privileges\" }, 302 : { \"description\" : \"The item was moved\" }, } @describe_responses ( RESPONSES ) @describe_response ( 204 , \"No Content\" ) def handler ( request ): \"\"\" ................. \"\"\" Notice \u6b64\u529f\u80fd\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u9664\u751f\u6210OpenAPI\u6587\u6863\u7684\u4f5c\u7528\u5916\uff0c\u65e0\u5176\u4ed6\u4f5c\u7528\u3002 \u672a\u6765\u6216\u8bb8\u4f1a\u589e\u52a0 mock \u529f\u80fd\u3002","title":"\u63cf\u8ff0\u54cd\u5e94\u7ed3\u679c"},{"location":"openapi/#openapi_1","text":"\u4f5c\u4e3a\u4e00\u4e2a Web \u9879\u76ee\uff0c\u5728\u4e2d\u95f4\u4ef6\u4e2d\u8bfb\u53d6\u8bf7\u6c42\u4fe1\u606f\u5e76\u4f5c\u9650\u5236\u662f\u5f88\u5e38\u89c1\u7684\uff0c\u4f8b\u5982\u8bfb\u53d6 JWT \u7528\u4f5c\u9274\u6743\u3002\u5728\u6bcf\u4e2a\u89c6\u56fe\u90fd\u589e\u52a0 header \u53c2\u6570\u662f\u4e0d\u73b0\u5b9e\u7684\uff0c\u8fd9\u65f6\u5019 describe_extra_docs \u5c31\u6d3e\u4e0a\u7528\u573a\u4e86\u3002 Tip describe_extra_docs \u589e\u52a0\u7684\u5185\u5bb9\uff0c\u4e0d\u4ec5\u9650\u4e8e parameters \uff0c\u4efb\u4f55\u63cf\u8ff0\u90fd\u4f1a\u88ab\u5408\u5e76\u8fdb\u539f\u672c\u7684\u6587\u6863\u91cc\u3002\u5177\u4f53\u7684\u5b57\u6bb5\u53ef\u53c2\u8003 OpenAPI Specification \u3002 def judge_jwt ( endpoint ): describe_extra_docs ( endpoint , { \"parameters\" : [ { \"name\" : \"Authorization\" , \"in\" : \"header\" , \"description\" : \"JWT Token\" , \"required\" : True , \"schema\" : { \"type\" : \"string\" }, } ] }, ) async def judge ( request ): ... return judge","title":"\u63cf\u8ff0\u989d\u5916\u7684 OpenAPI \u6587\u6863"},{"location":"openapi/#tags","text":"OpenAPI \u7684 Tags \u662f\u4e00\u4e2a\u6709\u7528\u7684\u529f\u80fd\uff0c\u5728 Index \u91cc\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u6765\u6307\u5b9a URL \u7684\u5206\u7c7b\u6807\u7b7e\u3002 tags \u53c2\u6570\u5fc5\u987b\u662f\u4e00\u4e2a dict \u7c7b\u578b\uff0c\u952e\u4e3a\u6807\u7b7e\u540d\u3002\u503c\u9700\u8981\u5305\u542b description \uff0c\u7528\u4e8e\u63cf\u8ff0\u6b64\u6807\u7b7e\uff1b paths \u662f URL \u5217\u8868\uff0c\u5982\u679c URL \u5305\u542b\u8def\u5f84\u53c2\u6570\uff0c\u76f4\u63a5\u4f7f\u7528\u4e0d\u5e26 :type \u7684\u5b57\u7b26\u4e32\u5373\u53ef\u3002 OpenAPI ( \"index.py example\" , \"just a example, power by index.py\" , \"v1\" , tags = { \"something\" : { \"description\" : \"test over two tags in one path\" , \"paths\" : [ \"/about/\" , \"/file\" , \"/\" ], }, \"about\" : { \"description\" : \"about page\" , \"paths\" : [ \"/about/\" , \"/about/me\" ], }, \"file\" : { \"description\" : \"get/upload file api\" , \"paths\" : [ \"/file\" ], }, }, )","title":"Tags"},{"location":"route/","text":"Index \u7684\u8def\u7531\u4e0e Python \u4f20\u7edf\u7684 web \u6846\u67b6\u4e0d\u540c\uff0c\u4f20\u7edf\u6846\u67b6\u7684\u8def\u7531\u5bfb\u627e\u65b9\u5f0f\u5927\u591a\u4e3a\u7a77\u4e3e\u904d\u5386\uff0c\u867d\u7136\u5b9e\u73b0\u7b80\u5355\uff0c\u4f46\u6548\u7387\u8f83\u4f4e\u3002\u800c Index \u57fa\u4e8e Radix Tree \uff0c\u5373\u7075\u6d3b\u53c8\u9ad8\u6548\u3002 \u57fa\u672c\u7528\u6cd5 \u88c5\u9970\u5668\u6ce8\u518c \u4e0e bottle/flask \u4e4b\u7c7b\u7684\u6846\u67b6\u4e00\u6837\uff0cIndex \u652f\u6301\u4f7f\u7528\u88c5\u9970\u5668\u6ce8\u518c\u8def\u7531\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u91cc\uff0c name \u662f\u8def\u7531\u540d\u79f0\uff0c\u8fd9\u5728\u53cd\u5411\u67e5\u627e\u8def\u7531\u65f6\u4f1a\u8d77\u5230\u4f5c\u7528\u3002 from indexpy import Index app = Index () @app . router . http ( \"/hello\" , name = \"hello\" , method = \"get\" ) async def hello ( request ): return \"hello world\" @app . router . websocket ( \"/hello\" , name = \"hello_ws\" ) async def hello_ws ( websocket ): ... @app . router . asgi ( \"/static{filepath:path}\" , name = \"static\" , type = ( \"http\" ,), root_path = \"/static\" ) async def static ( scope , receive , send ): ... Tip \u5982\u679c name \u6ca1\u6709\u88ab\u6307\u5b9a\uff0c\u5219\u4f1a\u9ed8\u8ba4\u4f7f\u7528\u88ab\u6ce8\u518c\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u7684 __name__ \u5c5e\u6027\u3002 Notice \u5982\u679c\u6307\u5b9a\u8def\u7531\u7684 name \u4e3a None \uff0c\u5219\u65e0\u6cd5\u901a\u8fc7 name \u67e5\u627e\u5230\u8be5\u8def\u7531\u3002 \u8def\u7531\u5bf9\u8c61 \u4e8b\u5b9e\u4e0a\uff0c\u88c5\u9970\u5668\u8def\u7531\u7533\u660e\u65b9\u5f0f\u662f\u5982\u4e0b\u65b9\u6cd5\u7684\u5feb\u6377\u65b9\u5f0f from indexpy import Index from indexpy.routing import HttpRoute , SocketRoute , ASGIRoute app = Index () async def hello ( request ): return \"hello world\" async def hello_ws ( websocket ): ... async def static ( scope , receive , send ): ... app . router . append ( HttpRoute ( \"/hello\" , hello , name = \"hello\" , method = \"get\" )) app . router . append ( SocketRoute ( \"/hello\" , hello_ws , name = \"hello_ws\" )) app . router . append ( ASGIRoute ( \"/static{filepath:path}\" , static , name = \"static\" , type = ( \"http\" ,), root_path = \"/static\" , ) ) HttpRoute HttpRoute ( path : str , endpoint : Any , name : Optional [ str ] = \"\" , method : str = \"\" ) name \u7528\u4e8e\u4e3a\u8def\u7531\u6307\u5b9a\u540d\u79f0\uff0c name \u4e3a None \u65f6\uff0c\u6b64\u8def\u7531\u5c06\u6ca1\u6709\u540d\u79f0\uff1b name \u4e3a \"\" \u65f6\uff0c\u5c06\u81ea\u52a8\u8bfb\u53d6 endpoint.__name__ \u4f5c\u4e3a\u8def\u7531\u540d\u79f0\u3002 method \u7528\u4e8e\u4e3a endpoint \u6307\u5b9a\u4e00\u4e2a\u5141\u8bb8\u7684 HTTP Method\uff0c\u5fc5\u987b\u662f\u5c0f\u5199\u7684\u6709\u6548\u7684 HTTP Method \u540d\u79f0\u3002\u4f46\u4ec5\u5728 endpoint \u662f\u51fd\u6570\u65f6\u9700\u8981\u6307\u5b9a\u6b64\u53c2\u6570\u3002 SocketRoute SocketRoute ( path : str , endpoint : Any , name : Optional [ str ] = \"\" ) \u6240\u6709\u53c2\u6570\u7684\u4f5c\u7528\u4e0e HttpRoute \u76f8\u540c\u3002 ASGIRoute ASGIRoute ( path : str , endpoint : Any , name : Optional [ str ] = \"\" , type : typing . Container [ Literal [ \"http\" , \"websocket\" ]] = ( \"http\" , \"websocket\" ), root_path : str = \"\" ) type \u7528\u4e8e\u4e3a\u6b64\u8def\u7531\u6307\u5b9a\u5141\u8bb8\u63a5\u53d7\u7684\u8bf7\u6c42\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3a http \u3001 websocket \u4e24\u79cd\u3002 root_path \u7528\u4e8e\u6302\u8f7d\u6b64\u8def\u7531\u7684\u5e94\u7528\u5230\u6307\u5b9a\u7684 root_path \u4e0b\u3002 \u5217\u8868\u5f0f\u6ce8\u518c Index \u540c\u6837\u652f\u6301\u7c7b\u4f3c\u4e8e Django \u7684\u5217\u8868\u5f0f\u5199\u6cd5\uff1a from indexpy import Index from indexpy.routing import HttpRoute , SocketRoute app = Index () async def hello ( request ): return \"hello world\" async def hello_ws ( websocket ): ... app . router . extend ([ HttpRoute ( \"/hello\" , hello , name = \"hello\" , method = \"get\" ), SocketRoute ( \"/hello\" , hello_ws , name = \"hello_ws\" ), ]) \u8def\u5f84\u53c2\u6570 \u4f7f\u7528 {name:type} \u53ef\u4ee5\u6807\u6ce8\u8def\u5f84\u53c2\u6570\uff0c\u76ee\u524d\u652f\u6301\u7684\u7c7b\u578b\u6709 str \u3001 int \u3001 decimal \u3001 uuid \u548c path \u3002 Tip \u5982\u679c\u8def\u5f84\u53c2\u6570\u7684\u7c7b\u578b\u4e3a str \uff0c\u53ef\u4ee5\u5ffd\u7565\u6389 :str \uff0c\u76f4\u63a5\u4f7f\u7528 {name} \u3002 Notice path \u662f\u6781\u4e3a\u7279\u6b8a\u7684\u53c2\u6570\u7c7b\u578b\uff0c\u5b83\u53ea\u80fd\u51fa\u73b0\u5728\u8def\u5f84\u7684\u6700\u540e\uff0c\u5e76\u4e14\u80fd\u5339\u914d\u5230\u6240\u6709\u7684\u5b57\u7b26\u3002 from indexpy import Index from indexpy.routing import HttpRoute , SocketRoute app = Index () @app . router . http ( \"/{username:str}\" , method = \"get\" ) async def what_is_your_name ( request ): return request . path_params [ \"username\" ] \u6ce8\u518c\u591a\u8bf7\u6c42\u65b9\u6cd5 \u6ce8\u518c\u5904\u7406 HTTP \u8bf7\u6c42\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u4e3a\u51fd\u6570\u65f6\uff0c\u5fc5\u987b\u6807\u6ce8\u5141\u8bb8\u5904\u7406\u7684 HTTP \u65b9\u6cd5\uff0c\u4e14\u53ea\u5141\u8bb8\u4e00\u79cd\u3002\u9700\u8981\u4e3a\u540c\u4e00\u4e2a\u8def\u7531\u6ce8\u518c\u5904\u7406\u4e0d\u540c HTTP \u65b9\u6cd5\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u5e94\u4f7f\u7528\u7c7b\uff0c\u5e76\u7ee7\u627f\u81ea HTTPView \u3002\u4ee5\u4e0b\u4e3a\u793a\u4f8b\u4ee3\u7801\uff0c\u9700\u8981\u66f4\u8be6\u7ec6\u7684\u63cf\u8ff0\uff0c\u5e94\u67e5\u770b HTTP \u7ae0\u8282\u3002 from indexpy import Index from indexpy.http import HTTPView app = Index () @app . router . http ( \"/cat\" ) class Cat ( HTTPView ): async def get ( self ): return self . request . method async def post ( self ): return self . request . method async def put ( self ): return self . request . method async def patch ( self ): return self . request . method async def delete ( self ): return self . request . method \u53cd\u5411\u67e5\u627e \u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u7531\u8def\u7531\u540d\u79f0\u53cd\u5411\u751f\u6210\u5bf9\u5e94\u7684 URL \u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 app.router.url_for \u3002 from indexpy import Index app = Index () @app . router . http ( \"/hello\" , name = \"hello\" , method = \"get\" ) @app . router . http ( \"/hello/ {name} \" , name = \"hello-name\" , method = \"get\" ) async def hello ( request ): return f \"hello { request . path_params . get ( 'name' ) } \" assert app . router . url_for ( \"hello\" ) == \"/hello\" assert app . router . url_for ( \"hello-name\" , { \"name\" : \"Aber\" }) == \"/hello/Aber\" Tip \u53cd\u5411\u67e5\u627e\u4e2d\uff0c websocket \u4e0e http \u662f\u4e92\u76f8\u72ec\u7acb\u7684\u3002\u901a\u8fc7 protocol \u53c2\u6570\u53ef\u4ee5\u9009\u62e9\u67e5\u627e\u7684\u8def\u7531\uff0c\u9ed8\u8ba4\u4e3a http \u3002 \u8def\u7531\u5217\u8868 Routes \u5f53\u9700\u8981\u628a\u67d0\u4e00\u4e9b\u8def\u7531\u5f52\u4e3a\u4e00\u7ec4\u65f6\uff0c\u53ef\u4f7f\u7528 Routes \u5bf9\u8c61\u3002 Routes \u5bf9\u8c61\u4e5f\u62e5\u6709 .http \u3001 .websocket \u548c .asgi \u65b9\u6cd5\uff0c\u4f7f\u7528\u65b9\u6cd5\u4e0e app.router \u76f8\u540c\u3002 Routes \u7ee7\u627f\u81ea typing.List \uff0c\u6240\u4ee5\u5b83\u5141\u8bb8\u4f60\u4f7f\u7528\u7c7b\u4f3c\u4e8e Django \u4e00\u6837\u7684\u8def\u7531\u7533\u660e\u65b9\u5f0f\uff0c\u793a\u4f8b\u5982\u4e0b\u3002 from indexpy import Index from indexpy.routing import Routes , HttpRoute app = Index () async def hello ( request ): return \"hello world\" routes = Routes ( HttpRoute ( \"/hello\" , hello , method = \"get\" ), ) app . router . extend ( routes ) Notice \u4e0d\u8981\u5fd8\u8bb0 \u4f7f\u7528 app.router.extend(routes) \u5c06 Routes \u5bf9\u8c61\u6ce8\u518c\u8fdb app.router \u4e2d\u3002 \u540d\u79f0\u7a7a\u95f4 \u4f60\u53ef\u4ee5\u4e3a Routes \u8bbe\u7f6e namespace \u53c2\u6570\uff0c\u8fd9\u5c06\u5728 Routes \u5bf9\u8c61\u4e2d\u5305\u542b\u7684\u6bcf\u4e2a\u8def\u7531\u540d\u79f0\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u524d\u52a0\u4e0a namespace: \uff0c\u4ee5\u6b64\u6765\u907f\u514d\u4e0d\u540c\u540d\u79f0\u7a7a\u95f4\u5185\u7684\u8def\u7531\u540d\u79f0\u51b2\u7a81\u3002 \u6ce8\u518c\u4e2d\u95f4\u4ef6 \u901a\u8fc7 Routes \u4f60\u53ef\u4ee5\u4e3a\u6574\u7ec4\u8def\u7531\u6ce8\u518c\u4e00\u4e2a\u6216\u591a\u4e2a\u4e2d\u95f4\u4ef6\u3002\u4ee5\u4e0b\u4e3a\u7b80\u5355\u7684\u6837\u4f8b\uff0c\u4ec5\u7528\u4e8e\u8868\u793a\u5982\u4f55\u6ce8\u518c\u4e2d\u95f4\u4ef6\uff0c\u5173\u4e8e\u4e2d\u95f4\u4ef6\u5b9a\u4e49\u66f4\u8be6\u7ec6\u7684\u63cf\u8ff0\u8bf7\u67e5\u770b \u4e2d\u95f4\u4ef6\u7ae0\u8282 \u3002 def one_http_middleware ( endpoint ): ... def one_socket_middleware ( endpoint ): ... def one_asgi_middleware ( endpoint ): ... routes = Routes ( ... , http_middlewares = [ one_http_middleware ], socket_middlewares = [ one_socket_middleware ], asgi_middlewares = [ one_asgi_middleware ] ) \u5f53\u7136\uff0c\u4f60\u540c\u6837\u53ef\u4ee5\u4f7f\u7528\u88c5\u9970\u5668\u6765\u6ce8\u518c\u4e2d\u95f4\u4ef6\uff0c\u4e0e\u4e0a\u4f8b\u7684\u7ed3\u679c\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\u3002 routes = Routes ( ... ) @routes . http_middleware def one_http_middleware ( endpoint ): ... @routes . socket_middleware def one_socket_middleware ( endpoint ): ... @routes . asgi_middleware def one_asgi_middleware ( endpoint ): ... SubRoutes SubRoutes \u662f Routes \u7684\u5b50\u7c7b\uff0c\u5b83\u5141\u8bb8\u4f60\u66f4\u7b80\u5355\u7684\u5b9a\u4e49\u5b50\u8def\u7531\uff0c\u800c\u4e0d\u662f\u5728\u6bcf\u4e2a\u8def\u7531\u4e0a\u589e\u52a0\u4e00\u4e2a\u524d\u7f00\u3002\u5b83\u540c\u6837\u62e5\u6709 Routes \u4e00\u6837\u7684\u8def\u7531\u6ce8\u518c\u65b9\u5f0f\u4e0e\u4e2d\u95f4\u4ef6\u6ce8\u518c\u65b9\u5f0f\u3002 subroutes = SubRoutes ( \"/hello\" , [ HttpRoute ( \"/world\" , ... ), SocketRoute ( \"/socket_world\" , ... ), ], ), FileRoutes FileRoutes \u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u8def\u7531\u5217\u8868\uff0c\u5b83\u5141\u8bb8\u4f60\u5c06\u67d0\u4e00\u4e2a module \u4e0b\u6240\u6709\u7684 .py \u6587\u4ef6\u4e00\u4e00\u5bf9\u5e94\u5230\u5176\u76f8\u5bf9\u8def\u5f84\u76f8\u540c\u7684\u8def\u7531\u3002 __init__.py \u4e2d\u540d\u4e3a HTTPMiddleware \u7684\u5bf9\u8c61\u5c06\u88ab\u5c55\u5f00\u4e3a HTTP \u4e2d\u95f4\u4ef6\uff0c SocketMiddleware \u5c06\u88ab\u5c55\u5f00\u4e3a WebSocket \u4e2d\u95f4\u4ef6\u3002\u9664\u4e86 __init__.py \u6587\u4ef6\u4ee5\u5916\u7684 .py \u6587\u4ef6\u4e2d \u540d\u4e3a HTTP \u7684\u5bf9\u8c61\u5c06\u88ab\u89c6\u4e3a HTTP \u5904\u7406\u5668\uff0c Socket \u5bf9\u8c61\u5c06\u88ab\u89c6\u4e3a WebSocket \u5904\u7406\u5668\uff0c\u540d\u79f0\u4e3a name \u7684\u5b57\u7b26\u4e32\u5c06\u4f5c\u4e3a\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684\u8def\u7531\u540d\u79f0\u3002 \u6587\u4ef6\u6620\u5c04\u6709\u4e00\u4e2a\u7279\u6b8a\u89c4\u5219\uff1a module/**/index.py \u5c06\u8d1f\u8d23\u5904\u7406 /**/ \u8def\u5f84\u7684\u5185\u5bb9\u3002 \u4f60\u53ef\u4ee5\u5c06\u6587\u4ef6\u540d\u6216\u6587\u4ef6\u5939\u540d\u4fee\u6539\u4e3a module/{name}.py \u4ee5\u6b64\u63a5\u53d7\u8def\u5f84\u53c2\u6570\uff1b\u53ef\u4ee5\u4e3a FileRoutes \u8bbe\u7f6e suffix \u53c2\u6570\uff0c\u7ed9\u6bcf\u4e2a\u8def\u7531\u52a0\u4e0a\u540e\u7f00\uff0c\u8b6c\u5982 suffix=\".php\" \u8fd9\u5c06\u4f7f\u8def\u5f84\u770b\u8d77\u6765\u5f88\u50cf PHP\uff1b FileRoutes \u540c\u6837\u62e5\u6709 namespace \u53c2\u6570\uff0c\u5e76\u4e14\u62e5\u6709\u540c\u6837\u7684\u4f5c\u7528\u3002 \u8def\u7531\u7ec4\u5408 \u901a\u8fc7\u4f7f\u7528 Routes \u5bf9\u8c61\u4e0e SubRoutes \u5bf9\u8c61\uff0c\u4f60\u53ef\u4ee5\u4efb\u610f\u7684\u6784\u5efa\u8def\u7531\uff0c\u5374\u4e0d\u4f1a\u6709\u4efb\u4f55\u8fd0\u884c\u65f6\u7684\u635f\u8017\u2014\u2014\u4e00\u5207\u5d4c\u5957\u8def\u7531\u90fd\u4f1a\u5728\u4ee3\u7801\u52a0\u8f7d\u65f6\u88ab\u5c55\u5f00\u3002 Routes ( HttpRoute ( \"/sayhi/ {name} \" , ... ), SubRoutes ( \"/hello\" , Routes ( HttpRoute ( \"/world\" , ... ), SocketRoute ( \"/socket_world\" , ... ), ), ), ) \u8def\u7531\u51b2\u7a81 \u5f53\u591a\u4e2a\u8def\u7531\u5339\u914d\u53ef\u4ee5\u5339\u914d\u5230\u540c\u4e00\u4e2a url path \u65f6\uff0c\u79f0\u4e3a\u8def\u7531\u51b2\u7a81\u3002 Index \u505a\u4e86\u5927\u91cf\u7684\u8def\u7531\u6784\u9020\u65f6\u68c0\u67e5\uff0c\u907f\u514d\u4e86\u5f88\u591a\u6ca1\u5fc5\u8981\u7684\u8def\u7531\u9519\u8bef\u4e0e\u51b2\u7a81\uff0c\u4f46\u4ecd\u7136\u6709\u4e00\u4e9b\u8def\u7531\u51b2\u7a81\u662f\u4e00\u5b9a\u4f1a\u5b58\u5728\u7684\u3002Index \u7684\u8def\u7531\u6784\u9020\u4f7f\u7528 Radix Tree\uff0c\u800c\u904d\u5386 Radix Tree \u65b9\u5f0f\u4e3a\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u3002\u4f46\u5bf9\u4e8e\u540c\u4e00\u5c42\u7ea7\u7684\u8282\u70b9\u6765\u8bf4\uff0c\u5339\u914d\u987a\u5e8f\u7531\u63d2\u5165\u987a\u5e8f\u51b3\u5b9a\u3002 app . router . extend ([ HttpRoute ( \"/static/verify.txt\" , ... ), HttpRoute ( \"/static/{filepath:path}\" , ... ), ]) \u5728\u4e0a\u4f8b\u4e2d\uff0c\u4e24\u4e2a\u8def\u7531\u540c\u4e3a /static/ \u8282\u70b9\u4e0b\u7684\u5b50\u8282\u70b9\uff0c\u6545\u800c\u5728\u5339\u914d url \u4e3a /static/verify.txt \u7684\u8bf7\u6c42\u65f6\uff0c\u6309\u7167\u6ce8\u518c\u987a\u5e8f\uff0c\u4f1a\u5339\u914d\u5230\u7b2c\u4e00\u6761\u3002 \u5728\u4e0b\u4f8b\u4e2d\uff0c /static/verify/google.txt \u80fd\u5339\u914d\u5230\u7684\u662f\u7b2c\u4e09\u6761\u8def\u7531\u800c\u4e0d\u662f\u7b2c\u4e8c\u6761\u2014\u2014\u56e0\u4e3a\u7b2c\u4e09\u6761\u8def\u7531\u4e0e\u7b2c\u4e00\u6761\u8def\u7531\u540c\u4e3a /static/verify/ \u8282\u70b9\u4e0b\u7684\u5b50\u8282\u70b9\uff0c\u7b2c\u4e8c\u6761\u8def\u7531\u5c5e\u4e8e /static/ \u8282\u70b9\u4e0b\uff0c /static/ \u7684\u5b50\u8282\u70b9\u91cc\u4f18\u5148\u5339\u914d\u5230 verify \u8282\u70b9\u4e0e\u5176\u5b50\u8282\u70b9\uff0c\u540e\u5339\u914d {filepath:path} \u8282\u70b9\u3002\u6545\u800c\u5339\u914d\u5230\u7b2c\u4e09\u6761\u8def\u7531\uff0c\u800c\u4e0d\u662f\u7b2c\u4e8c\u6761\u3002 app . router . extend ([ HttpRoute ( \"/static/verify/bing.txt\" , ... ), HttpRoute ( \"/static/{filepath:path}\" , ... ), HttpRoute ( \"/static/verify/google.txt\" , ... ), ]) \u4f46\u5982\u679c\u6ce8\u518c\u987a\u5e8f\u5982\u4e0b\u4f8b\uff0c\u5219 /static/verify/google.txt \u5339\u914d\u5230\u7684\u8def\u7531\u4e3a\u7b2c\u4e00\u6761\uff0c app . router . extend ([ HttpRoute ( \"/static/{filepath:path}\" , ... ), HttpRoute ( \"/static/verify/bing.txt\" , ... ), HttpRoute ( \"/static/verify/google.txt\" , ... ), ])","title":"Route"},{"location":"route/#_1","text":"","title":"\u57fa\u672c\u7528\u6cd5"},{"location":"route/#_2","text":"\u4e0e bottle/flask \u4e4b\u7c7b\u7684\u6846\u67b6\u4e00\u6837\uff0cIndex \u652f\u6301\u4f7f\u7528\u88c5\u9970\u5668\u6ce8\u518c\u8def\u7531\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u91cc\uff0c name \u662f\u8def\u7531\u540d\u79f0\uff0c\u8fd9\u5728\u53cd\u5411\u67e5\u627e\u8def\u7531\u65f6\u4f1a\u8d77\u5230\u4f5c\u7528\u3002 from indexpy import Index app = Index () @app . router . http ( \"/hello\" , name = \"hello\" , method = \"get\" ) async def hello ( request ): return \"hello world\" @app . router . websocket ( \"/hello\" , name = \"hello_ws\" ) async def hello_ws ( websocket ): ... @app . router . asgi ( \"/static{filepath:path}\" , name = \"static\" , type = ( \"http\" ,), root_path = \"/static\" ) async def static ( scope , receive , send ): ... Tip \u5982\u679c name \u6ca1\u6709\u88ab\u6307\u5b9a\uff0c\u5219\u4f1a\u9ed8\u8ba4\u4f7f\u7528\u88ab\u6ce8\u518c\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u7684 __name__ \u5c5e\u6027\u3002 Notice \u5982\u679c\u6307\u5b9a\u8def\u7531\u7684 name \u4e3a None \uff0c\u5219\u65e0\u6cd5\u901a\u8fc7 name \u67e5\u627e\u5230\u8be5\u8def\u7531\u3002","title":"\u88c5\u9970\u5668\u6ce8\u518c"},{"location":"route/#_3","text":"\u4e8b\u5b9e\u4e0a\uff0c\u88c5\u9970\u5668\u8def\u7531\u7533\u660e\u65b9\u5f0f\u662f\u5982\u4e0b\u65b9\u6cd5\u7684\u5feb\u6377\u65b9\u5f0f from indexpy import Index from indexpy.routing import HttpRoute , SocketRoute , ASGIRoute app = Index () async def hello ( request ): return \"hello world\" async def hello_ws ( websocket ): ... async def static ( scope , receive , send ): ... app . router . append ( HttpRoute ( \"/hello\" , hello , name = \"hello\" , method = \"get\" )) app . router . append ( SocketRoute ( \"/hello\" , hello_ws , name = \"hello_ws\" )) app . router . append ( ASGIRoute ( \"/static{filepath:path}\" , static , name = \"static\" , type = ( \"http\" ,), root_path = \"/static\" , ) )","title":"\u8def\u7531\u5bf9\u8c61"},{"location":"route/#httproute","text":"HttpRoute ( path : str , endpoint : Any , name : Optional [ str ] = \"\" , method : str = \"\" ) name \u7528\u4e8e\u4e3a\u8def\u7531\u6307\u5b9a\u540d\u79f0\uff0c name \u4e3a None \u65f6\uff0c\u6b64\u8def\u7531\u5c06\u6ca1\u6709\u540d\u79f0\uff1b name \u4e3a \"\" \u65f6\uff0c\u5c06\u81ea\u52a8\u8bfb\u53d6 endpoint.__name__ \u4f5c\u4e3a\u8def\u7531\u540d\u79f0\u3002 method \u7528\u4e8e\u4e3a endpoint \u6307\u5b9a\u4e00\u4e2a\u5141\u8bb8\u7684 HTTP Method\uff0c\u5fc5\u987b\u662f\u5c0f\u5199\u7684\u6709\u6548\u7684 HTTP Method \u540d\u79f0\u3002\u4f46\u4ec5\u5728 endpoint \u662f\u51fd\u6570\u65f6\u9700\u8981\u6307\u5b9a\u6b64\u53c2\u6570\u3002","title":"HttpRoute"},{"location":"route/#socketroute","text":"SocketRoute ( path : str , endpoint : Any , name : Optional [ str ] = \"\" ) \u6240\u6709\u53c2\u6570\u7684\u4f5c\u7528\u4e0e HttpRoute \u76f8\u540c\u3002","title":"SocketRoute"},{"location":"route/#asgiroute","text":"ASGIRoute ( path : str , endpoint : Any , name : Optional [ str ] = \"\" , type : typing . Container [ Literal [ \"http\" , \"websocket\" ]] = ( \"http\" , \"websocket\" ), root_path : str = \"\" ) type \u7528\u4e8e\u4e3a\u6b64\u8def\u7531\u6307\u5b9a\u5141\u8bb8\u63a5\u53d7\u7684\u8bf7\u6c42\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3a http \u3001 websocket \u4e24\u79cd\u3002 root_path \u7528\u4e8e\u6302\u8f7d\u6b64\u8def\u7531\u7684\u5e94\u7528\u5230\u6307\u5b9a\u7684 root_path \u4e0b\u3002","title":"ASGIRoute"},{"location":"route/#_4","text":"Index \u540c\u6837\u652f\u6301\u7c7b\u4f3c\u4e8e Django \u7684\u5217\u8868\u5f0f\u5199\u6cd5\uff1a from indexpy import Index from indexpy.routing import HttpRoute , SocketRoute app = Index () async def hello ( request ): return \"hello world\" async def hello_ws ( websocket ): ... app . router . extend ([ HttpRoute ( \"/hello\" , hello , name = \"hello\" , method = \"get\" ), SocketRoute ( \"/hello\" , hello_ws , name = \"hello_ws\" ), ])","title":"\u5217\u8868\u5f0f\u6ce8\u518c"},{"location":"route/#_5","text":"\u4f7f\u7528 {name:type} \u53ef\u4ee5\u6807\u6ce8\u8def\u5f84\u53c2\u6570\uff0c\u76ee\u524d\u652f\u6301\u7684\u7c7b\u578b\u6709 str \u3001 int \u3001 decimal \u3001 uuid \u548c path \u3002 Tip \u5982\u679c\u8def\u5f84\u53c2\u6570\u7684\u7c7b\u578b\u4e3a str \uff0c\u53ef\u4ee5\u5ffd\u7565\u6389 :str \uff0c\u76f4\u63a5\u4f7f\u7528 {name} \u3002 Notice path \u662f\u6781\u4e3a\u7279\u6b8a\u7684\u53c2\u6570\u7c7b\u578b\uff0c\u5b83\u53ea\u80fd\u51fa\u73b0\u5728\u8def\u5f84\u7684\u6700\u540e\uff0c\u5e76\u4e14\u80fd\u5339\u914d\u5230\u6240\u6709\u7684\u5b57\u7b26\u3002 from indexpy import Index from indexpy.routing import HttpRoute , SocketRoute app = Index () @app . router . http ( \"/{username:str}\" , method = \"get\" ) async def what_is_your_name ( request ): return request . path_params [ \"username\" ]","title":"\u8def\u5f84\u53c2\u6570"},{"location":"route/#_6","text":"\u6ce8\u518c\u5904\u7406 HTTP \u8bf7\u6c42\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u4e3a\u51fd\u6570\u65f6\uff0c\u5fc5\u987b\u6807\u6ce8\u5141\u8bb8\u5904\u7406\u7684 HTTP \u65b9\u6cd5\uff0c\u4e14\u53ea\u5141\u8bb8\u4e00\u79cd\u3002\u9700\u8981\u4e3a\u540c\u4e00\u4e2a\u8def\u7531\u6ce8\u518c\u5904\u7406\u4e0d\u540c HTTP \u65b9\u6cd5\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u5e94\u4f7f\u7528\u7c7b\uff0c\u5e76\u7ee7\u627f\u81ea HTTPView \u3002\u4ee5\u4e0b\u4e3a\u793a\u4f8b\u4ee3\u7801\uff0c\u9700\u8981\u66f4\u8be6\u7ec6\u7684\u63cf\u8ff0\uff0c\u5e94\u67e5\u770b HTTP \u7ae0\u8282\u3002 from indexpy import Index from indexpy.http import HTTPView app = Index () @app . router . http ( \"/cat\" ) class Cat ( HTTPView ): async def get ( self ): return self . request . method async def post ( self ): return self . request . method async def put ( self ): return self . request . method async def patch ( self ): return self . request . method async def delete ( self ): return self . request . method","title":"\u6ce8\u518c\u591a\u8bf7\u6c42\u65b9\u6cd5"},{"location":"route/#_7","text":"\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u7531\u8def\u7531\u540d\u79f0\u53cd\u5411\u751f\u6210\u5bf9\u5e94\u7684 URL \u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 app.router.url_for \u3002 from indexpy import Index app = Index () @app . router . http ( \"/hello\" , name = \"hello\" , method = \"get\" ) @app . router . http ( \"/hello/ {name} \" , name = \"hello-name\" , method = \"get\" ) async def hello ( request ): return f \"hello { request . path_params . get ( 'name' ) } \" assert app . router . url_for ( \"hello\" ) == \"/hello\" assert app . router . url_for ( \"hello-name\" , { \"name\" : \"Aber\" }) == \"/hello/Aber\" Tip \u53cd\u5411\u67e5\u627e\u4e2d\uff0c websocket \u4e0e http \u662f\u4e92\u76f8\u72ec\u7acb\u7684\u3002\u901a\u8fc7 protocol \u53c2\u6570\u53ef\u4ee5\u9009\u62e9\u67e5\u627e\u7684\u8def\u7531\uff0c\u9ed8\u8ba4\u4e3a http \u3002","title":"\u53cd\u5411\u67e5\u627e"},{"location":"route/#_8","text":"","title":"\u8def\u7531\u5217\u8868"},{"location":"route/#routes","text":"\u5f53\u9700\u8981\u628a\u67d0\u4e00\u4e9b\u8def\u7531\u5f52\u4e3a\u4e00\u7ec4\u65f6\uff0c\u53ef\u4f7f\u7528 Routes \u5bf9\u8c61\u3002 Routes \u5bf9\u8c61\u4e5f\u62e5\u6709 .http \u3001 .websocket \u548c .asgi \u65b9\u6cd5\uff0c\u4f7f\u7528\u65b9\u6cd5\u4e0e app.router \u76f8\u540c\u3002 Routes \u7ee7\u627f\u81ea typing.List \uff0c\u6240\u4ee5\u5b83\u5141\u8bb8\u4f60\u4f7f\u7528\u7c7b\u4f3c\u4e8e Django \u4e00\u6837\u7684\u8def\u7531\u7533\u660e\u65b9\u5f0f\uff0c\u793a\u4f8b\u5982\u4e0b\u3002 from indexpy import Index from indexpy.routing import Routes , HttpRoute app = Index () async def hello ( request ): return \"hello world\" routes = Routes ( HttpRoute ( \"/hello\" , hello , method = \"get\" ), ) app . router . extend ( routes ) Notice \u4e0d\u8981\u5fd8\u8bb0 \u4f7f\u7528 app.router.extend(routes) \u5c06 Routes \u5bf9\u8c61\u6ce8\u518c\u8fdb app.router \u4e2d\u3002","title":"Routes"},{"location":"route/#_9","text":"\u4f60\u53ef\u4ee5\u4e3a Routes \u8bbe\u7f6e namespace \u53c2\u6570\uff0c\u8fd9\u5c06\u5728 Routes \u5bf9\u8c61\u4e2d\u5305\u542b\u7684\u6bcf\u4e2a\u8def\u7531\u540d\u79f0\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u524d\u52a0\u4e0a namespace: \uff0c\u4ee5\u6b64\u6765\u907f\u514d\u4e0d\u540c\u540d\u79f0\u7a7a\u95f4\u5185\u7684\u8def\u7531\u540d\u79f0\u51b2\u7a81\u3002","title":"\u540d\u79f0\u7a7a\u95f4"},{"location":"route/#_10","text":"\u901a\u8fc7 Routes \u4f60\u53ef\u4ee5\u4e3a\u6574\u7ec4\u8def\u7531\u6ce8\u518c\u4e00\u4e2a\u6216\u591a\u4e2a\u4e2d\u95f4\u4ef6\u3002\u4ee5\u4e0b\u4e3a\u7b80\u5355\u7684\u6837\u4f8b\uff0c\u4ec5\u7528\u4e8e\u8868\u793a\u5982\u4f55\u6ce8\u518c\u4e2d\u95f4\u4ef6\uff0c\u5173\u4e8e\u4e2d\u95f4\u4ef6\u5b9a\u4e49\u66f4\u8be6\u7ec6\u7684\u63cf\u8ff0\u8bf7\u67e5\u770b \u4e2d\u95f4\u4ef6\u7ae0\u8282 \u3002 def one_http_middleware ( endpoint ): ... def one_socket_middleware ( endpoint ): ... def one_asgi_middleware ( endpoint ): ... routes = Routes ( ... , http_middlewares = [ one_http_middleware ], socket_middlewares = [ one_socket_middleware ], asgi_middlewares = [ one_asgi_middleware ] ) \u5f53\u7136\uff0c\u4f60\u540c\u6837\u53ef\u4ee5\u4f7f\u7528\u88c5\u9970\u5668\u6765\u6ce8\u518c\u4e2d\u95f4\u4ef6\uff0c\u4e0e\u4e0a\u4f8b\u7684\u7ed3\u679c\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\u3002 routes = Routes ( ... ) @routes . http_middleware def one_http_middleware ( endpoint ): ... @routes . socket_middleware def one_socket_middleware ( endpoint ): ... @routes . asgi_middleware def one_asgi_middleware ( endpoint ): ...","title":"\u6ce8\u518c\u4e2d\u95f4\u4ef6"},{"location":"route/#subroutes","text":"SubRoutes \u662f Routes \u7684\u5b50\u7c7b\uff0c\u5b83\u5141\u8bb8\u4f60\u66f4\u7b80\u5355\u7684\u5b9a\u4e49\u5b50\u8def\u7531\uff0c\u800c\u4e0d\u662f\u5728\u6bcf\u4e2a\u8def\u7531\u4e0a\u589e\u52a0\u4e00\u4e2a\u524d\u7f00\u3002\u5b83\u540c\u6837\u62e5\u6709 Routes \u4e00\u6837\u7684\u8def\u7531\u6ce8\u518c\u65b9\u5f0f\u4e0e\u4e2d\u95f4\u4ef6\u6ce8\u518c\u65b9\u5f0f\u3002 subroutes = SubRoutes ( \"/hello\" , [ HttpRoute ( \"/world\" , ... ), SocketRoute ( \"/socket_world\" , ... ), ], ),","title":"SubRoutes"},{"location":"route/#fileroutes","text":"FileRoutes \u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u8def\u7531\u5217\u8868\uff0c\u5b83\u5141\u8bb8\u4f60\u5c06\u67d0\u4e00\u4e2a module \u4e0b\u6240\u6709\u7684 .py \u6587\u4ef6\u4e00\u4e00\u5bf9\u5e94\u5230\u5176\u76f8\u5bf9\u8def\u5f84\u76f8\u540c\u7684\u8def\u7531\u3002 __init__.py \u4e2d\u540d\u4e3a HTTPMiddleware \u7684\u5bf9\u8c61\u5c06\u88ab\u5c55\u5f00\u4e3a HTTP \u4e2d\u95f4\u4ef6\uff0c SocketMiddleware \u5c06\u88ab\u5c55\u5f00\u4e3a WebSocket \u4e2d\u95f4\u4ef6\u3002\u9664\u4e86 __init__.py \u6587\u4ef6\u4ee5\u5916\u7684 .py \u6587\u4ef6\u4e2d \u540d\u4e3a HTTP \u7684\u5bf9\u8c61\u5c06\u88ab\u89c6\u4e3a HTTP \u5904\u7406\u5668\uff0c Socket \u5bf9\u8c61\u5c06\u88ab\u89c6\u4e3a WebSocket \u5904\u7406\u5668\uff0c\u540d\u79f0\u4e3a name \u7684\u5b57\u7b26\u4e32\u5c06\u4f5c\u4e3a\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684\u8def\u7531\u540d\u79f0\u3002 \u6587\u4ef6\u6620\u5c04\u6709\u4e00\u4e2a\u7279\u6b8a\u89c4\u5219\uff1a module/**/index.py \u5c06\u8d1f\u8d23\u5904\u7406 /**/ \u8def\u5f84\u7684\u5185\u5bb9\u3002 \u4f60\u53ef\u4ee5\u5c06\u6587\u4ef6\u540d\u6216\u6587\u4ef6\u5939\u540d\u4fee\u6539\u4e3a module/{name}.py \u4ee5\u6b64\u63a5\u53d7\u8def\u5f84\u53c2\u6570\uff1b\u53ef\u4ee5\u4e3a FileRoutes \u8bbe\u7f6e suffix \u53c2\u6570\uff0c\u7ed9\u6bcf\u4e2a\u8def\u7531\u52a0\u4e0a\u540e\u7f00\uff0c\u8b6c\u5982 suffix=\".php\" \u8fd9\u5c06\u4f7f\u8def\u5f84\u770b\u8d77\u6765\u5f88\u50cf PHP\uff1b FileRoutes \u540c\u6837\u62e5\u6709 namespace \u53c2\u6570\uff0c\u5e76\u4e14\u62e5\u6709\u540c\u6837\u7684\u4f5c\u7528\u3002","title":"FileRoutes"},{"location":"route/#_11","text":"\u901a\u8fc7\u4f7f\u7528 Routes \u5bf9\u8c61\u4e0e SubRoutes \u5bf9\u8c61\uff0c\u4f60\u53ef\u4ee5\u4efb\u610f\u7684\u6784\u5efa\u8def\u7531\uff0c\u5374\u4e0d\u4f1a\u6709\u4efb\u4f55\u8fd0\u884c\u65f6\u7684\u635f\u8017\u2014\u2014\u4e00\u5207\u5d4c\u5957\u8def\u7531\u90fd\u4f1a\u5728\u4ee3\u7801\u52a0\u8f7d\u65f6\u88ab\u5c55\u5f00\u3002 Routes ( HttpRoute ( \"/sayhi/ {name} \" , ... ), SubRoutes ( \"/hello\" , Routes ( HttpRoute ( \"/world\" , ... ), SocketRoute ( \"/socket_world\" , ... ), ), ), )","title":"\u8def\u7531\u7ec4\u5408"},{"location":"route/#_12","text":"\u5f53\u591a\u4e2a\u8def\u7531\u5339\u914d\u53ef\u4ee5\u5339\u914d\u5230\u540c\u4e00\u4e2a url path \u65f6\uff0c\u79f0\u4e3a\u8def\u7531\u51b2\u7a81\u3002 Index \u505a\u4e86\u5927\u91cf\u7684\u8def\u7531\u6784\u9020\u65f6\u68c0\u67e5\uff0c\u907f\u514d\u4e86\u5f88\u591a\u6ca1\u5fc5\u8981\u7684\u8def\u7531\u9519\u8bef\u4e0e\u51b2\u7a81\uff0c\u4f46\u4ecd\u7136\u6709\u4e00\u4e9b\u8def\u7531\u51b2\u7a81\u662f\u4e00\u5b9a\u4f1a\u5b58\u5728\u7684\u3002Index \u7684\u8def\u7531\u6784\u9020\u4f7f\u7528 Radix Tree\uff0c\u800c\u904d\u5386 Radix Tree \u65b9\u5f0f\u4e3a\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u3002\u4f46\u5bf9\u4e8e\u540c\u4e00\u5c42\u7ea7\u7684\u8282\u70b9\u6765\u8bf4\uff0c\u5339\u914d\u987a\u5e8f\u7531\u63d2\u5165\u987a\u5e8f\u51b3\u5b9a\u3002 app . router . extend ([ HttpRoute ( \"/static/verify.txt\" , ... ), HttpRoute ( \"/static/{filepath:path}\" , ... ), ]) \u5728\u4e0a\u4f8b\u4e2d\uff0c\u4e24\u4e2a\u8def\u7531\u540c\u4e3a /static/ \u8282\u70b9\u4e0b\u7684\u5b50\u8282\u70b9\uff0c\u6545\u800c\u5728\u5339\u914d url \u4e3a /static/verify.txt \u7684\u8bf7\u6c42\u65f6\uff0c\u6309\u7167\u6ce8\u518c\u987a\u5e8f\uff0c\u4f1a\u5339\u914d\u5230\u7b2c\u4e00\u6761\u3002 \u5728\u4e0b\u4f8b\u4e2d\uff0c /static/verify/google.txt \u80fd\u5339\u914d\u5230\u7684\u662f\u7b2c\u4e09\u6761\u8def\u7531\u800c\u4e0d\u662f\u7b2c\u4e8c\u6761\u2014\u2014\u56e0\u4e3a\u7b2c\u4e09\u6761\u8def\u7531\u4e0e\u7b2c\u4e00\u6761\u8def\u7531\u540c\u4e3a /static/verify/ \u8282\u70b9\u4e0b\u7684\u5b50\u8282\u70b9\uff0c\u7b2c\u4e8c\u6761\u8def\u7531\u5c5e\u4e8e /static/ \u8282\u70b9\u4e0b\uff0c /static/ \u7684\u5b50\u8282\u70b9\u91cc\u4f18\u5148\u5339\u914d\u5230 verify \u8282\u70b9\u4e0e\u5176\u5b50\u8282\u70b9\uff0c\u540e\u5339\u914d {filepath:path} \u8282\u70b9\u3002\u6545\u800c\u5339\u914d\u5230\u7b2c\u4e09\u6761\u8def\u7531\uff0c\u800c\u4e0d\u662f\u7b2c\u4e8c\u6761\u3002 app . router . extend ([ HttpRoute ( \"/static/verify/bing.txt\" , ... ), HttpRoute ( \"/static/{filepath:path}\" , ... ), HttpRoute ( \"/static/verify/google.txt\" , ... ), ]) \u4f46\u5982\u679c\u6ce8\u518c\u987a\u5e8f\u5982\u4e0b\u4f8b\uff0c\u5219 /static/verify/google.txt \u5339\u914d\u5230\u7684\u8def\u7531\u4e3a\u7b2c\u4e00\u6761\uff0c app . router . extend ([ HttpRoute ( \"/static/{filepath:path}\" , ... ), HttpRoute ( \"/static/verify/bing.txt\" , ... ), HttpRoute ( \"/static/verify/google.txt\" , ... ), ])","title":"\u8def\u7531\u51b2\u7a81"},{"location":"websocket/","text":"WebSocket \u5904\u7406\u5668 \u5728\u4e0b\u6587\u4e2d\uff0c\u7528\u4e8e\u5904\u7406 WebSocket \u8bf7\u6c42\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u88ab\u79f0\u4e3a WebSocket \u5904\u7406\u5668\u3002 \u51fd\u6570\u5904\u7406\u5668 \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570 websocket \uff0c\u5b83\u662f\u4e00\u4e2a indexpy.websocket.request.WebSocket \u5bf9\u8c61\u3002\u5728\u51fd\u6570\u7684\u5f00\u59cb\uff0c\u5fc5\u987b\u8c03\u7528 await websocket.accept() \uff0c\u5728\u51fd\u6570\u7ed3\u675f\u5fc5\u987b\u8c03\u7528 await websocket.close(CLOSE_CODE) \u3002 async def simple_echo ( websocket ): try : await websocket . accept () while True : message = await websocket . receive_json () await websocket . send_json ( message ) finally : await websocket . close ( 1000 ) \u7c7b\u5904\u7406\u5668 \u4e0e HTTP \u7c7b\u5904\u7406\u5668\u7c7b\u4f3c\uff0cWebSocket \u7c7b\u5904\u7406\u5668\u9700\u8981\u4ece indexpy.websocket.SocketView \u7ee7\u627f\u800c\u6765\u3002 \u5b83\u6709\u4e00\u4e2a\u7c7b\u5c5e\u6027\uff1a encoding \uff0c\u6b64\u5c5e\u6027\u6709\u4e09\u4e2a\u53ef\u7528\u503c\u2014\u2014 \"text\" \u3001 \"bytes\" \u3001 \"json\" \uff0c\u5c06\u51b3\u5b9a\u63a5\u6536\u5230\u7684 WebSocket \u6570\u636e\u4ee5\u4f55\u79cd\u7f16\u7801\u88ab\u89e3\u6790\u3002\u9ed8\u8ba4\u4e3a json \u3002 \u5b83\u6709\u4e09\u4e2a\u65b9\u6cd5\u53ef\u7528\u4e8e\u5e38\u89c4\u4f7f\u7528\uff0c\u5206\u522b\u5bf9\u5e94\u4e00\u4e2a WebSocket \u8fde\u63a5\u7684\u4e0d\u540c\u72b6\u6001\uff1a on_connect() \u6b64\u51fd\u6570\u5728\u4e00\u4e2a websocket \u8fde\u63a5\u88ab\u5efa\u7acb\u540e\u8c03\u7528\u3002 \u5982\u679c\u8986\u76d6\u4e86\u6b64\u51fd\u6570\uff0c\u5219\u5fc5\u987b\u5728\u5176\u4e2d\u663e\u5f0f\u7684\u8c03\u7528 await self.websocket.accept() \u6765\u63a5\u53d7\u8fde\u63a5\u7684\u5efa\u7acb\u3002 on_receive(data: typing.Any) \u6b64\u51fd\u6570\u5728\u63a5\u53d7\u4e00\u6761\u5b8c\u6574\u7684\u6570\u636e\u65f6\u88ab\u8c03\u7528\uff0c data \u7684\u7c7b\u578b\u7531\u7c7b\u5c5e\u6027 encoding \u63a7\u5236\u3002 on_disconnect(close_code: int) \u6b64\u51fd\u6570\u5728\u4e00\u4e2a websocket \u5373\u5c06\u88ab\u5173\u95ed\u65f6\u8c03\u7528\u3002 \u5982\u679c\u8986\u76d6\u4e86\u6b64\u51fd\u6570\uff0c\u4f60\u5fc5\u987b\u5728\u5176\u4e2d\u663e\u5f0f\u7684\u8c03\u7528 await self.websocket.close(code=close_code) \u7528\u4ee5\u5173\u95ed\u8fde\u63a5\u3002 Notice \u8fd9\u4e09\u4e2a\u51fd\u6570\u5fc5\u987b\u90fd\u4ee5 async def \u7684\u65b9\u5f0f\u88ab\u5b9a\u4e49\u4e3a\u5f02\u6b65\u51fd\u6570 WebSocket \u5bf9\u8c61 \u6bcf\u4e2a WebSocket \u8fde\u63a5\u90fd\u4f1a\u5bf9\u5e94\u4e00\u4e2a indexpy.websocket.request.WebSocket \u5bf9\u8c61\uff0c\u5b83\u62e5\u6709\u4e00\u5bf9 receive / send \u51fd\u6570\u3002\u4f46\u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u5c01\u88c5\u4e86\u4e09\u5bf9 recv/send \u51fd\u6570\u3002 receive_bytes / send_bytes : \u63a5\u6536/\u53d1\u9001 bytes \u7c7b\u578b\u7684\u6570\u636e receive_text / send_text : \u63a5\u6536/\u53d1\u9001 text \u7c7b\u578b\u7684\u6570\u636e receive_json / send_json : \u63a5\u6536/\u53d1\u9001 bytes / text \u7c7b\u578b\u7684\u6570\u636e\uff0c\u4f46\u4ee5 JSON \u683c\u5f0f\u4f5c\u4e3a\u4e2d\u8f6c\u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u76f4\u63a5\u53d1\u9001/\u63a5\u6536\u4efb\u4f55\u80fd\u88ab json.dumps / json.loads \u89e3\u6790\u7684\u5bf9\u8c61\u3002 \u9664\u6b64\u4e4b\u5916\uff0cWebSocket \u5bf9\u8c61\u8fd8\u62e5\u6709 Request \u5bf9\u8c61\u76f8\u540c\u7684\u90e8\u5206\u5c5e\u6027\u3002 URL \u901a\u8fc7 websocket.url \u53ef\u4ee5\u83b7\u53d6\u5230\u8bf7\u6c42\u8def\u5f84\u3002\u8be5\u5c5e\u6027\u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u5b57\u7b26\u4e32\u7684\u5bf9\u8c61\uff0c\u5b83\u516c\u5f00\u4e86\u53ef\u4ee5\u4eceURL\u4e2d\u89e3\u6790\u51fa\u7684\u6240\u6709\u7ec4\u4ef6\u3002 \u4f8b\u5982\uff1a websocket.url.path , websocket.url.port , websocket.url.scheme Path Parameters websocket.path_params \u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u6240\u6709\u89e3\u6790\u51fa\u7684\u8def\u5f84\u53c2\u6570\u3002 Headers websocket.headers \u662f\u4e00\u4e2a\u5927\u5c0f\u5199\u65e0\u5173\u7684\u591a\u503c\u5b57\u5178(multi-dict)\u3002\u4f46\u901a\u8fc7 websocket.headers.keys() / websocket.headers.items() \u53d6\u51fa\u6765\u7684 key \u5747\u4e3a\u5c0f\u5199\u3002 Query Parameters websocket.query_params \u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u591a\u503c\u5b57\u5178(multi-dict)\u3002 \u4f8b\u5982\uff1a websocket.query_params['search'] Client Address websocket.client \u662f\u4e00\u4e2a namedtuple \uff0c\u5b9a\u4e49\u4e3a namedtuple(\"Address\", [\"host\", \"port\"]) \u3002 \u83b7\u53d6\u5ba2\u6237\u7aef hostname \u6216 IP \u5730\u5740: websocket.client.host \u3002 \u83b7\u53d6\u5ba2\u6237\u7aef\u5728\u5f53\u524d\u8fde\u63a5\u4e2d\u4f7f\u7528\u7684\u7aef\u53e3: websocket.client.port \u3002 Notice \u5143\u7ec4\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u90fd\u53ef\u80fd\u4e3a None\u3002\u8fd9\u53d7\u9650\u4e8e ASGI \u670d\u52a1\u5668\u4f20\u9012\u7684\u503c\u3002 Cookies websocket.cookies \u662f\u4e00\u4e2a\u6807\u51c6\u5b57\u5178\uff0c\u5b9a\u4e49\u4e3a Dict[str, str] \u3002 \u4f8b\u5982\uff1a websocket.cookies.get('mycookie') Notice \u4f60\u6ca1\u529e\u6cd5\u4ece websocket.cookies \u91cc\u8bfb\u53d6\u5230\u65e0\u6548\u7684 cookie (RFC2109) State \u67d0\u4e9b\u60c5\u51b5\u4e0b\u9700\u8981\u50a8\u5b58\u4e00\u4e9b\u989d\u5916\u7684\u81ea\u5b9a\u4e49\u4fe1\u606f\u5230 request \u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 websocket.state \u7528\u4e8e\u5b58\u50a8\u3002 websocket . state . user = User ( name = \"Alice\" ) # \u5199 user_name = websocket . state . user . name # \u8bfb del websocket . state . user # \u5220","title":"WebSocket"},{"location":"websocket/#websocket","text":"\u5728\u4e0b\u6587\u4e2d\uff0c\u7528\u4e8e\u5904\u7406 WebSocket \u8bf7\u6c42\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u88ab\u79f0\u4e3a WebSocket \u5904\u7406\u5668\u3002","title":"WebSocket \u5904\u7406\u5668"},{"location":"websocket/#_1","text":"\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570 websocket \uff0c\u5b83\u662f\u4e00\u4e2a indexpy.websocket.request.WebSocket \u5bf9\u8c61\u3002\u5728\u51fd\u6570\u7684\u5f00\u59cb\uff0c\u5fc5\u987b\u8c03\u7528 await websocket.accept() \uff0c\u5728\u51fd\u6570\u7ed3\u675f\u5fc5\u987b\u8c03\u7528 await websocket.close(CLOSE_CODE) \u3002 async def simple_echo ( websocket ): try : await websocket . accept () while True : message = await websocket . receive_json () await websocket . send_json ( message ) finally : await websocket . close ( 1000 )","title":"\u51fd\u6570\u5904\u7406\u5668"},{"location":"websocket/#_2","text":"\u4e0e HTTP \u7c7b\u5904\u7406\u5668\u7c7b\u4f3c\uff0cWebSocket \u7c7b\u5904\u7406\u5668\u9700\u8981\u4ece indexpy.websocket.SocketView \u7ee7\u627f\u800c\u6765\u3002 \u5b83\u6709\u4e00\u4e2a\u7c7b\u5c5e\u6027\uff1a encoding \uff0c\u6b64\u5c5e\u6027\u6709\u4e09\u4e2a\u53ef\u7528\u503c\u2014\u2014 \"text\" \u3001 \"bytes\" \u3001 \"json\" \uff0c\u5c06\u51b3\u5b9a\u63a5\u6536\u5230\u7684 WebSocket \u6570\u636e\u4ee5\u4f55\u79cd\u7f16\u7801\u88ab\u89e3\u6790\u3002\u9ed8\u8ba4\u4e3a json \u3002 \u5b83\u6709\u4e09\u4e2a\u65b9\u6cd5\u53ef\u7528\u4e8e\u5e38\u89c4\u4f7f\u7528\uff0c\u5206\u522b\u5bf9\u5e94\u4e00\u4e2a WebSocket \u8fde\u63a5\u7684\u4e0d\u540c\u72b6\u6001\uff1a on_connect() \u6b64\u51fd\u6570\u5728\u4e00\u4e2a websocket \u8fde\u63a5\u88ab\u5efa\u7acb\u540e\u8c03\u7528\u3002 \u5982\u679c\u8986\u76d6\u4e86\u6b64\u51fd\u6570\uff0c\u5219\u5fc5\u987b\u5728\u5176\u4e2d\u663e\u5f0f\u7684\u8c03\u7528 await self.websocket.accept() \u6765\u63a5\u53d7\u8fde\u63a5\u7684\u5efa\u7acb\u3002 on_receive(data: typing.Any) \u6b64\u51fd\u6570\u5728\u63a5\u53d7\u4e00\u6761\u5b8c\u6574\u7684\u6570\u636e\u65f6\u88ab\u8c03\u7528\uff0c data \u7684\u7c7b\u578b\u7531\u7c7b\u5c5e\u6027 encoding \u63a7\u5236\u3002 on_disconnect(close_code: int) \u6b64\u51fd\u6570\u5728\u4e00\u4e2a websocket \u5373\u5c06\u88ab\u5173\u95ed\u65f6\u8c03\u7528\u3002 \u5982\u679c\u8986\u76d6\u4e86\u6b64\u51fd\u6570\uff0c\u4f60\u5fc5\u987b\u5728\u5176\u4e2d\u663e\u5f0f\u7684\u8c03\u7528 await self.websocket.close(code=close_code) \u7528\u4ee5\u5173\u95ed\u8fde\u63a5\u3002 Notice \u8fd9\u4e09\u4e2a\u51fd\u6570\u5fc5\u987b\u90fd\u4ee5 async def \u7684\u65b9\u5f0f\u88ab\u5b9a\u4e49\u4e3a\u5f02\u6b65\u51fd\u6570","title":"\u7c7b\u5904\u7406\u5668"},{"location":"websocket/#websocket_1","text":"\u6bcf\u4e2a WebSocket \u8fde\u63a5\u90fd\u4f1a\u5bf9\u5e94\u4e00\u4e2a indexpy.websocket.request.WebSocket \u5bf9\u8c61\uff0c\u5b83\u62e5\u6709\u4e00\u5bf9 receive / send \u51fd\u6570\u3002\u4f46\u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u5c01\u88c5\u4e86\u4e09\u5bf9 recv/send \u51fd\u6570\u3002 receive_bytes / send_bytes : \u63a5\u6536/\u53d1\u9001 bytes \u7c7b\u578b\u7684\u6570\u636e receive_text / send_text : \u63a5\u6536/\u53d1\u9001 text \u7c7b\u578b\u7684\u6570\u636e receive_json / send_json : \u63a5\u6536/\u53d1\u9001 bytes / text \u7c7b\u578b\u7684\u6570\u636e\uff0c\u4f46\u4ee5 JSON \u683c\u5f0f\u4f5c\u4e3a\u4e2d\u8f6c\u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u76f4\u63a5\u53d1\u9001/\u63a5\u6536\u4efb\u4f55\u80fd\u88ab json.dumps / json.loads \u89e3\u6790\u7684\u5bf9\u8c61\u3002 \u9664\u6b64\u4e4b\u5916\uff0cWebSocket \u5bf9\u8c61\u8fd8\u62e5\u6709 Request \u5bf9\u8c61\u76f8\u540c\u7684\u90e8\u5206\u5c5e\u6027\u3002","title":"WebSocket \u5bf9\u8c61"},{"location":"websocket/#url","text":"\u901a\u8fc7 websocket.url \u53ef\u4ee5\u83b7\u53d6\u5230\u8bf7\u6c42\u8def\u5f84\u3002\u8be5\u5c5e\u6027\u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u5b57\u7b26\u4e32\u7684\u5bf9\u8c61\uff0c\u5b83\u516c\u5f00\u4e86\u53ef\u4ee5\u4eceURL\u4e2d\u89e3\u6790\u51fa\u7684\u6240\u6709\u7ec4\u4ef6\u3002 \u4f8b\u5982\uff1a websocket.url.path , websocket.url.port , websocket.url.scheme","title":"URL"},{"location":"websocket/#path-parameters","text":"websocket.path_params \u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u6240\u6709\u89e3\u6790\u51fa\u7684\u8def\u5f84\u53c2\u6570\u3002","title":"Path Parameters"},{"location":"websocket/#headers","text":"websocket.headers \u662f\u4e00\u4e2a\u5927\u5c0f\u5199\u65e0\u5173\u7684\u591a\u503c\u5b57\u5178(multi-dict)\u3002\u4f46\u901a\u8fc7 websocket.headers.keys() / websocket.headers.items() \u53d6\u51fa\u6765\u7684 key \u5747\u4e3a\u5c0f\u5199\u3002","title":"Headers"},{"location":"websocket/#query-parameters","text":"websocket.query_params \u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u591a\u503c\u5b57\u5178(multi-dict)\u3002 \u4f8b\u5982\uff1a websocket.query_params['search']","title":"Query Parameters"},{"location":"websocket/#client-address","text":"websocket.client \u662f\u4e00\u4e2a namedtuple \uff0c\u5b9a\u4e49\u4e3a namedtuple(\"Address\", [\"host\", \"port\"]) \u3002 \u83b7\u53d6\u5ba2\u6237\u7aef hostname \u6216 IP \u5730\u5740: websocket.client.host \u3002 \u83b7\u53d6\u5ba2\u6237\u7aef\u5728\u5f53\u524d\u8fde\u63a5\u4e2d\u4f7f\u7528\u7684\u7aef\u53e3: websocket.client.port \u3002 Notice \u5143\u7ec4\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u90fd\u53ef\u80fd\u4e3a None\u3002\u8fd9\u53d7\u9650\u4e8e ASGI \u670d\u52a1\u5668\u4f20\u9012\u7684\u503c\u3002","title":"Client Address"},{"location":"websocket/#cookies","text":"websocket.cookies \u662f\u4e00\u4e2a\u6807\u51c6\u5b57\u5178\uff0c\u5b9a\u4e49\u4e3a Dict[str, str] \u3002 \u4f8b\u5982\uff1a websocket.cookies.get('mycookie') Notice \u4f60\u6ca1\u529e\u6cd5\u4ece websocket.cookies \u91cc\u8bfb\u53d6\u5230\u65e0\u6548\u7684 cookie (RFC2109)","title":"Cookies"},{"location":"websocket/#state","text":"\u67d0\u4e9b\u60c5\u51b5\u4e0b\u9700\u8981\u50a8\u5b58\u4e00\u4e9b\u989d\u5916\u7684\u81ea\u5b9a\u4e49\u4fe1\u606f\u5230 request \u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 websocket.state \u7528\u4e8e\u5b58\u50a8\u3002 websocket . state . user = User ( name = \"Alice\" ) # \u5199 user_name = websocket . state . user . name # \u8bfb del websocket . state . user # \u5220","title":"State"},{"location":"config/","text":"Index \u5185\u7f6e\u7684\u914d\u7f6e\u7c7b indexpy.config.Config \u662f\u4e00\u4e2a\u5355\u4f8b\u7c7b\uff0c\u4f60\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u4f7f\u7528 Config() \uff0c\u5b83\u4eec\u90fd\u5c06\u8fd4\u56de\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002 \u6240\u6709\u914d\u7f6e\u90fd\u662f\u5927\u5c0f\u5199\u65e0\u5173\u7684\uff0c Config().KEY \u7b49\u4ef7\u4e8e Config().Key \u548c Config().key \u3002 \u5728 Index \u542f\u52a8\u65f6\uff0c\u5b83\u5c06\u81ea\u52a8\u4ece\u73af\u5883\u53d8\u91cf\u4e0e\u9879\u76ee\u6839\u76ee\u5f55\u4e0b index.yaml / index.yml / index.json \u91cc\u8bfb\u53d6\u914d\u7f6e\u3002 Notice \u5728 Index \u8fd0\u884c\u4e4b\u540e\u66f4\u6539\u914d\u7f6e\u6587\u4ef6\u6216\u8005\u73af\u5883\u53d8\u91cf\u5e76\u4e0d\u4f1a\u89e6\u53d1 Index \u7684\u70ed\u66f4\u65b0\uff0c\u4f60\u53ea\u80fd\u901a\u8fc7\u91cd\u542f\u6765\u4f7f\u7528\u65b0\u914d\u7f6e\u542f\u52a8 Index\u3002 \u73af\u5883\u53d8\u91cf Index \u5728\u542f\u52a8\u65f6\u5c06\u4ece\u73af\u5883\u53d8\u91cf\u91cc\u8bfb\u53d6 INDEX_DEBUG \u548c INDEX_ENV \u4e24\u4e2a\u503c. INDEX_DEBUG \u7684\u503c\u4e3a True \u6216\u8005 on \u5219 DEBUG \u4e3a\u771f\uff0c\u5176\u4ed6\u4efb\u4f55\u503c\u90fd\u662f\u5047\u3002 INDEX_ENV \u7684\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u5b57\u7b26\u4e32\uff0c\u5b83\u5bf9\u5e94 ENV \u3002 Tip \u73af\u5883\u53d8\u91cf\u5728\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u4e4b\u540e\u8bfb\u53d6\uff0c\u8fd9\u610f\u5473\u4f60\u53ef\u4ee5\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u7684\u914d\u7f6e\u6765\u8986\u76d6\u914d\u7f6e\u6587\u4ef6\u91cc\u7684\u914d\u7f6e\u3002 \u914d\u7f6e\u6587\u4ef6\u793a\u4f8b # overwrite default value to this program app : \"example:app\" port : 4918 allowed_hosts : [ \"localhost\" ] cors_allow_origins : [ \"*\" ] cors_allow_methods : [ \"GET\" ] cors_allow_credentials : false # use in development dev : \"host\" : \"localhost\" \"debug\" : true \"log_level\" : \"debug\" # use in production pro : \"host\" : \"0.0.0.0\" \"port\" : \"41900\" \"log_level\" : \"warning\" # use in test test : log_level : \"debug\" \u4ec0\u4e48\u662f\u914d\u7f6e\u9694\u79bb\uff1f \u540c\u4e00\u4e2a\u9879\u76ee\uff0c\u4e0d\u540c\u73af\u5883\u4e0b\u7684\u90e8\u5206\u914d\u7f6e\u53ef\u80fd\u4e0d\u540c\u3002Index \u5185\u7f6e\u7684\u914d\u7f6e\u5141\u8bb8\u4f7f\u7528 ENV \u6765\u6307\u5b9a\u5f53\u524d\u4f7f\u7528\u7684\u914d\u7f6e\u73af\u5883\u3002 \u4ee5\u4e0a\u9762\u7684\u914d\u7f6e\u6587\u4ef6\u4e3a\u4f8b\uff0c\u5f53 ENV \u7684\u503c\u4e3a \"dev\" \u65f6\uff0c Config().DEBUG \u4f1a\u4e3a True \u3002 \u5f53\u4f60\u6307\u5b9a ENV \u7684\u503c\u4e3a \"pro\" \u65f6, \u5728\u4f7f\u7528 Config().DEBUG \u7684\u65f6\u5019\uff0c\u5b83\u5c06\u5148\u4ece \"pro\" \u4e2d\u67e5\u627e \"debug\" \uff08\u4e0d\u5206\u5927\u5c0f\u5199\uff09\u3002\u5f53\u6ca1\u6709\u627e\u5230\u65f6\uff0c\u7ee7\u7eed\u5411\u4e0a\u67e5\u627e\u3002\u7136\u800c\u8fd9\u4efd\u914d\u7f6e\u6587\u4ef6\u5e76\u6ca1\u6709\u5728\u6839\u914d\u7f6e\u4e2d\u6307\u5b9a \"debug\" \uff0c\u6240\u4ee5 Config().DEBUG \u4f1a\u4f7f\u7528\u9ed8\u8ba4\u503c False \u3002 \u5176\u4ed6\u7684\u914d\u7f6e\u540c\u7406\u3002","title":"Introduction"},{"location":"config/#_1","text":"Index \u5728\u542f\u52a8\u65f6\u5c06\u4ece\u73af\u5883\u53d8\u91cf\u91cc\u8bfb\u53d6 INDEX_DEBUG \u548c INDEX_ENV \u4e24\u4e2a\u503c. INDEX_DEBUG \u7684\u503c\u4e3a True \u6216\u8005 on \u5219 DEBUG \u4e3a\u771f\uff0c\u5176\u4ed6\u4efb\u4f55\u503c\u90fd\u662f\u5047\u3002 INDEX_ENV \u7684\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u5b57\u7b26\u4e32\uff0c\u5b83\u5bf9\u5e94 ENV \u3002 Tip \u73af\u5883\u53d8\u91cf\u5728\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u4e4b\u540e\u8bfb\u53d6\uff0c\u8fd9\u610f\u5473\u4f60\u53ef\u4ee5\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u7684\u914d\u7f6e\u6765\u8986\u76d6\u914d\u7f6e\u6587\u4ef6\u91cc\u7684\u914d\u7f6e\u3002","title":"\u73af\u5883\u53d8\u91cf"},{"location":"config/#_2","text":"# overwrite default value to this program app : \"example:app\" port : 4918 allowed_hosts : [ \"localhost\" ] cors_allow_origins : [ \"*\" ] cors_allow_methods : [ \"GET\" ] cors_allow_credentials : false # use in development dev : \"host\" : \"localhost\" \"debug\" : true \"log_level\" : \"debug\" # use in production pro : \"host\" : \"0.0.0.0\" \"port\" : \"41900\" \"log_level\" : \"warning\" # use in test test : log_level : \"debug\"","title":"\u914d\u7f6e\u6587\u4ef6\u793a\u4f8b"},{"location":"config/#_3","text":"\u540c\u4e00\u4e2a\u9879\u76ee\uff0c\u4e0d\u540c\u73af\u5883\u4e0b\u7684\u90e8\u5206\u914d\u7f6e\u53ef\u80fd\u4e0d\u540c\u3002Index \u5185\u7f6e\u7684\u914d\u7f6e\u5141\u8bb8\u4f7f\u7528 ENV \u6765\u6307\u5b9a\u5f53\u524d\u4f7f\u7528\u7684\u914d\u7f6e\u73af\u5883\u3002 \u4ee5\u4e0a\u9762\u7684\u914d\u7f6e\u6587\u4ef6\u4e3a\u4f8b\uff0c\u5f53 ENV \u7684\u503c\u4e3a \"dev\" \u65f6\uff0c Config().DEBUG \u4f1a\u4e3a True \u3002 \u5f53\u4f60\u6307\u5b9a ENV \u7684\u503c\u4e3a \"pro\" \u65f6, \u5728\u4f7f\u7528 Config().DEBUG \u7684\u65f6\u5019\uff0c\u5b83\u5c06\u5148\u4ece \"pro\" \u4e2d\u67e5\u627e \"debug\" \uff08\u4e0d\u5206\u5927\u5c0f\u5199\uff09\u3002\u5f53\u6ca1\u6709\u627e\u5230\u65f6\uff0c\u7ee7\u7eed\u5411\u4e0a\u67e5\u627e\u3002\u7136\u800c\u8fd9\u4efd\u914d\u7f6e\u6587\u4ef6\u5e76\u6ca1\u6709\u5728\u6839\u914d\u7f6e\u4e2d\u6307\u5b9a \"debug\" \uff0c\u6240\u4ee5 Config().DEBUG \u4f1a\u4f7f\u7528\u9ed8\u8ba4\u503c False \u3002 \u5176\u4ed6\u7684\u914d\u7f6e\u540c\u7406\u3002","title":"\u4ec0\u4e48\u662f\u914d\u7f6e\u9694\u79bb\uff1f"},{"location":"config/list/","text":"ENV \u9ed8\u8ba4\u503c: \"dev\" env \u662f\u4e00\u4e2a\u5341\u5206\u91cd\u8981\u7684\u914d\u7f6e\uff0c\u5b83\u5141\u8bb8 \u81ea\u52a8\u4f7f\u7528\u5bf9\u5e94\u73af\u5883\u4e0b\u7684\u914d\u7f6e \u3002 \u5b83\u5c06\u8bfb\u53d6\u73af\u5883\u53d8\u91cf\u91cc INDEX_ENV \u7684\u503c\uff0c\u53ef\u4ee5\u4f46\u4e0d\u63a8\u8350\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u3002 DEBUG \u9ed8\u8ba4\u503c: False \u5728\u73af\u5883\u53d8\u91cf\u91cc INDEX_DEBUG \u4e3a \"on\" \u6216\u8005 \"True\" \u65f6\uff0c DEBUG \u4e3a\u771f\uff1b\u8be5\u503c\u540c\u6837\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u3002 \u5f53 DEBUG \u4e3a\u771f\u65f6\uff0c\u5c06\u8be6\u7ec6\u7684\u663e\u793a 500 \u9519\u8bef\u4fe1\u606f\u3002 APP \u6ca1\u6709\u9ed8\u8ba4\u503c app \u5141\u8bb8\u81ea\u5b9a\u4e49 serve / gunicorn \u7b49\u547d\u4ee4\u4e2d\u7684\u9ed8\u8ba4 app \u3002 LOG_LEVEL \u9ed8\u8ba4\u503c: \"info\" log_level \u6709\u4e94\u4e2a\u53ef\u7528\u503c, \u4e0b\u9762\u662f\u5b83\u4e0e logging \u7684\u7b49\u7ea7\u5bf9\u5e94\u8868 log_level logging \"critical\" logging.CRITICAL \"error\" logging.ERROR \"warning\" logging.WARNING \"info\" logging.INFO \"debug\" logging.DEBUG HOST \u9ed8\u8ba4\u503c: \"127.0.0.1\" host \u6307\u5b9a Index \u76d1\u542c\u7684\u5730\u5740\u3002 PORT \u9ed8\u8ba4\u503c: 4190 port \u6307\u5b9a Index \u76d1\u542c\u7684\u7aef\u53e3\u3002 ALLOWED_HOSTS \u9ed8\u8ba4\u503c: [\"*\"] allowed_hosts \u7528\u4e8e\u6307\u5b9a Index \u5141\u8bb8\u88ab\u8bbf\u95ee\u7684 HOST\u3002 \u4e00\u4e9b\u4f8b\u5b50: [\"*\"] \u5141\u8bb8\u6240\u6709\u7684 HOST \u8bbf\u95ee [\"example.com\", \"*example.com\"] \u5141\u8bb8 example.com \u4ee5\u53ca example.com \u7684\u5b50\u57df\u540d\u8bbf\u95ee\u3002 [\"example.com\", \"test.com\"] \u5141\u8bb8 example.com \u4e0e test.com \u7684\u8bbf\u95ee\u3002 FORCE_SSL \u9ed8\u8ba4\u503c: False force_ssl \u5141\u8bb8 HTTP/WS \u5f3a\u5236\u8df3\u8f6c\u5230 HTTPS/WSS\u3002 AUTORELOAD \u9ed8\u8ba4\u503c: True autoreload \u4e3a\u771f\u65f6\uff0c\u4f7f\u7528 index-cli serve \u6216 index-cli gunicorn start \u65f6\uff0c\u5c06\u4f1a\u76d1\u542c\u5f53\u524d\u7684\u9879\u76ee\u4fee\u6539\uff0c\u81ea\u52a8\u91cd\u542f\u670d\u52a1\u3002 CORS_ALLOW_ORIGINS \u9ed8\u8ba4\u503c: () \u5728\u8de8\u57df\u8bf7\u6c42\u4e2d\u5141\u8bb8\u7684 ORIGIN \u5217\u8868\u3002 \u4f8b\u5982\uff1a ['https://example.org', 'https://www.example.org'] \u4f60\u53ef\u4ee5\u4f7f\u7528 ['*'] \u6765\u5141\u8bb8\u6240\u6709\u7684 ORIGIN \u503c\u3002 CORS_ALLOW_ORIGIN_REGEX \u9ed8\u8ba4\u503c: None \u9700\u8981\u662f\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\uff0c\u5b83\u5c06\u7528\u4e8e\u5339\u914d\u5728\u8de8\u57df\u8bf7\u6c42\u4e2d\u5141\u8bb8\u7684 ORIGIN \u3002 \u4f8b\u5982\uff1a 'https://.*\\.example\\.org' CORS_ALLOW_METHODS \u9ed8\u8ba4\u503c: (\"GET\",) \u5728\u8de8\u57df\u8bf7\u6c42\u4e2d\u5141\u8bb8\u7684 HTTP \u8bf7\u6c42\u65b9\u6cd5\u5217\u8868\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 ['*'] \u6765\u5141\u8bb8\u6240\u6709\u7684\u8bf7\u6c42\u65b9\u6cd5\u3002 CORS_ALLOW_HEADERS \u9ed8\u8ba4\u503c: () \u5728\u8de8\u57df\u8bf7\u6c42\u4e2d\u5141\u8bb8\u88ab\u4f7f\u7528\u7684 header \u5217\u8868\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 ['*'] \u6765\u5141\u8bb8\u6240\u6709\u7684 header\u3002 Accept \u3001 Accept-Language \u3001 Content-Language \u548c Content-Type \u5728\u8de8\u57df\u8bf7\u6c42\u4e2d\u662f\u9ed8\u8ba4\u5141\u8bb8\u7684\u3002 CORS_ALLOW_CREDENTIALS \u9ed8\u8ba4\u503c: False \u5141\u8bb8\u5728\u8de8\u57df\u8bf7\u6c42\u4e2d\u643a\u5e26 cookies\u3002 CORS_EXPOSE_HEADERS \u9ed8\u8ba4\u503c: () \u6307\u5b9a\u53ef\u4f9b\u6d4f\u89c8\u5668\u8bbf\u95ee\u7684\u4efb\u4f55\u54cd\u5e94\u5934\u3002 CORS_MAX_AGE \u9ed8\u8ba4\u503c: 600 \u8bbe\u7f6e\u6d4f\u89c8\u5668\u7f13\u5b58 CORS \u54cd\u5e94\u7684\u6700\u957f\u65f6\u95f4\uff08\u5355\u4f4d\uff1a\u79d2\uff09\u3002","title":"Built-in List"},{"location":"config/list/#env","text":"\u9ed8\u8ba4\u503c: \"dev\" env \u662f\u4e00\u4e2a\u5341\u5206\u91cd\u8981\u7684\u914d\u7f6e\uff0c\u5b83\u5141\u8bb8 \u81ea\u52a8\u4f7f\u7528\u5bf9\u5e94\u73af\u5883\u4e0b\u7684\u914d\u7f6e \u3002 \u5b83\u5c06\u8bfb\u53d6\u73af\u5883\u53d8\u91cf\u91cc INDEX_ENV \u7684\u503c\uff0c\u53ef\u4ee5\u4f46\u4e0d\u63a8\u8350\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u3002","title":"ENV"},{"location":"config/list/#debug","text":"\u9ed8\u8ba4\u503c: False \u5728\u73af\u5883\u53d8\u91cf\u91cc INDEX_DEBUG \u4e3a \"on\" \u6216\u8005 \"True\" \u65f6\uff0c DEBUG \u4e3a\u771f\uff1b\u8be5\u503c\u540c\u6837\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a\u3002 \u5f53 DEBUG \u4e3a\u771f\u65f6\uff0c\u5c06\u8be6\u7ec6\u7684\u663e\u793a 500 \u9519\u8bef\u4fe1\u606f\u3002","title":"DEBUG"},{"location":"config/list/#app","text":"\u6ca1\u6709\u9ed8\u8ba4\u503c app \u5141\u8bb8\u81ea\u5b9a\u4e49 serve / gunicorn \u7b49\u547d\u4ee4\u4e2d\u7684\u9ed8\u8ba4 app \u3002","title":"APP"},{"location":"config/list/#log_level","text":"\u9ed8\u8ba4\u503c: \"info\" log_level \u6709\u4e94\u4e2a\u53ef\u7528\u503c, \u4e0b\u9762\u662f\u5b83\u4e0e logging \u7684\u7b49\u7ea7\u5bf9\u5e94\u8868 log_level logging \"critical\" logging.CRITICAL \"error\" logging.ERROR \"warning\" logging.WARNING \"info\" logging.INFO \"debug\" logging.DEBUG","title":"LOG_LEVEL"},{"location":"config/list/#host","text":"\u9ed8\u8ba4\u503c: \"127.0.0.1\" host \u6307\u5b9a Index \u76d1\u542c\u7684\u5730\u5740\u3002","title":"HOST"},{"location":"config/list/#port","text":"\u9ed8\u8ba4\u503c: 4190 port \u6307\u5b9a Index \u76d1\u542c\u7684\u7aef\u53e3\u3002","title":"PORT"},{"location":"config/list/#allowed_hosts","text":"\u9ed8\u8ba4\u503c: [\"*\"] allowed_hosts \u7528\u4e8e\u6307\u5b9a Index \u5141\u8bb8\u88ab\u8bbf\u95ee\u7684 HOST\u3002 \u4e00\u4e9b\u4f8b\u5b50: [\"*\"] \u5141\u8bb8\u6240\u6709\u7684 HOST \u8bbf\u95ee [\"example.com\", \"*example.com\"] \u5141\u8bb8 example.com \u4ee5\u53ca example.com \u7684\u5b50\u57df\u540d\u8bbf\u95ee\u3002 [\"example.com\", \"test.com\"] \u5141\u8bb8 example.com \u4e0e test.com \u7684\u8bbf\u95ee\u3002","title":"ALLOWED_HOSTS"},{"location":"config/list/#force_ssl","text":"\u9ed8\u8ba4\u503c: False force_ssl \u5141\u8bb8 HTTP/WS \u5f3a\u5236\u8df3\u8f6c\u5230 HTTPS/WSS\u3002","title":"FORCE_SSL"},{"location":"config/list/#autoreload","text":"\u9ed8\u8ba4\u503c: True autoreload \u4e3a\u771f\u65f6\uff0c\u4f7f\u7528 index-cli serve \u6216 index-cli gunicorn start \u65f6\uff0c\u5c06\u4f1a\u76d1\u542c\u5f53\u524d\u7684\u9879\u76ee\u4fee\u6539\uff0c\u81ea\u52a8\u91cd\u542f\u670d\u52a1\u3002","title":"AUTORELOAD"},{"location":"config/list/#cors_allow_origins","text":"\u9ed8\u8ba4\u503c: () \u5728\u8de8\u57df\u8bf7\u6c42\u4e2d\u5141\u8bb8\u7684 ORIGIN \u5217\u8868\u3002 \u4f8b\u5982\uff1a ['https://example.org', 'https://www.example.org'] \u4f60\u53ef\u4ee5\u4f7f\u7528 ['*'] \u6765\u5141\u8bb8\u6240\u6709\u7684 ORIGIN \u503c\u3002","title":"CORS_ALLOW_ORIGINS"},{"location":"config/list/#cors_allow_origin_regex","text":"\u9ed8\u8ba4\u503c: None \u9700\u8981\u662f\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\uff0c\u5b83\u5c06\u7528\u4e8e\u5339\u914d\u5728\u8de8\u57df\u8bf7\u6c42\u4e2d\u5141\u8bb8\u7684 ORIGIN \u3002 \u4f8b\u5982\uff1a 'https://.*\\.example\\.org'","title":"CORS_ALLOW_ORIGIN_REGEX"},{"location":"config/list/#cors_allow_methods","text":"\u9ed8\u8ba4\u503c: (\"GET\",) \u5728\u8de8\u57df\u8bf7\u6c42\u4e2d\u5141\u8bb8\u7684 HTTP \u8bf7\u6c42\u65b9\u6cd5\u5217\u8868\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 ['*'] \u6765\u5141\u8bb8\u6240\u6709\u7684\u8bf7\u6c42\u65b9\u6cd5\u3002","title":"CORS_ALLOW_METHODS"},{"location":"config/list/#cors_allow_headers","text":"\u9ed8\u8ba4\u503c: () \u5728\u8de8\u57df\u8bf7\u6c42\u4e2d\u5141\u8bb8\u88ab\u4f7f\u7528\u7684 header \u5217\u8868\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 ['*'] \u6765\u5141\u8bb8\u6240\u6709\u7684 header\u3002 Accept \u3001 Accept-Language \u3001 Content-Language \u548c Content-Type \u5728\u8de8\u57df\u8bf7\u6c42\u4e2d\u662f\u9ed8\u8ba4\u5141\u8bb8\u7684\u3002","title":"CORS_ALLOW_HEADERS"},{"location":"config/list/#cors_allow_credentials","text":"\u9ed8\u8ba4\u503c: False \u5141\u8bb8\u5728\u8de8\u57df\u8bf7\u6c42\u4e2d\u643a\u5e26 cookies\u3002","title":"CORS_ALLOW_CREDENTIALS"},{"location":"config/list/#cors_expose_headers","text":"\u9ed8\u8ba4\u503c: () \u6307\u5b9a\u53ef\u4f9b\u6d4f\u89c8\u5668\u8bbf\u95ee\u7684\u4efb\u4f55\u54cd\u5e94\u5934\u3002","title":"CORS_EXPOSE_HEADERS"},{"location":"config/list/#cors_max_age","text":"\u9ed8\u8ba4\u503c: 600 \u8bbe\u7f6e\u6d4f\u89c8\u5668\u7f13\u5b58 CORS \u54cd\u5e94\u7684\u6700\u957f\u65f6\u95f4\uff08\u5355\u4f4d\uff1a\u79d2\uff09\u3002","title":"CORS_MAX_AGE"},{"location":"firststep/","text":"\u6309\u7167\u56fd\u9645\u60ef\u4f8b\uff0c\u4e0a\u624b\u4e00\u4e2a web \u6846\u67b6\u603b\u662f\u4ece\u535a\u5ba2\u5f00\u59cb\uff0c\u672c\u6559\u7a0b\u4e5f\u4e0d\u4f8b\u5916\u3002\u8ddf\u7740\u6559\u7a0b\u8d70\uff0c\u5c06\u80fd\u521b\u5efa\u4e00\u4e2a\u7b80\u6d01\u7684\u4f46\u529f\u80fd\u5b8c\u5584\u7684\u535a\u5ba2\u2014\u2014\u5305\u62ec\u7528\u6237\u767b\u5f55\u3001\u6ce8\u518c\u3001\u8bbf\u95ee\u6587\u7ae0\uff0c\u8bc4\u8bba\uff0c\u7ba1\u7406\u5458\u65b0\u589e/\u4fee\u6539/\u5220\u9664\u6587\u7ae0\u3001\u5ba1\u6838/\u5220\u9664\u8bc4\u8bba\uff0c\u4ee5\u53ca\u7528\u6237\u8bbf\u95ee\u901f\u5ea6\u9650\u5236\u3002 \u7ea6\u5b9a\u4e00\u4e2a\u76ee\u5f55\u4e3a\u9879\u76ee\u7684\u6839\u76ee\u5f55\uff0c\u540e\u7eed\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u5c06\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e0b\u8fdb\u884c\u3002","title":"Index"}]}